import{_ as c,r as e,o as l,c as i,b as a,w as u,d as s,e as n,a as p}from"./app-521e935c.js";const k={},r=s("h1",null,"Data structure and Algorithm For C Language",-1),d=s("h2",{id:"一、数据结构和算法绪论",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#一、数据结构和算法绪论","aria-hidden":"true"},"#"),n(" 一、数据结构和算法绪论")],-1),v=s("h3",{id:"_1、什么是数据结构",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1、什么是数据结构","aria-hidden":"true"},"#"),n(" 1、什么是数据结构？")],-1),m={href:"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6",target:"_blank",rel:"noopener noreferrer"},b=s("strong",null,"数据结构",-1),g={href:"https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE",target:"_blank",rel:"noopener noreferrer"},y=s("p",null,"百度百科：数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。",-1),h=s("ul",null,[s("li",null,[s("p",null,"程序设计 = 数据结构 + 算法")]),s("li",null,[s("p",null,"再简单的来说数据结构就是关系，也就是数据元素相互之间存在的一种或多种特定关系的集合。")])],-1),f=p('<blockquote><p><strong>逻辑结构和物理结构</strong></p><ul><li><p>传统上，我们把数据结构分为逻辑结构和物理结构</p><blockquote><p><strong>逻辑结构</strong>：是指数据对象中数据元素之间的相互关系，也就是本笔记所研究的问题。</p><ol><li>集合结构：集合结构中的元素之间除了同属于一个集合外，它们之间没有任何的其他关系。</li><li>线性结构：线性结构中的元素之间是一对一的关系，一个接着下一个，分为<strong>顺序结构</strong>和<strong>链式结构</strong>。</li><li>树形结构：树形结构中的元素之间存在一种一对多的层级关系。，就像树木一样，根长枝，枝长叶...。</li><li>图形结构：图形结构中的元素之间是多对多的关系。例如一个人的友谊，不止和一个人建立，是一张很复杂的网。</li></ol></blockquote><blockquote><p><strong>物理结构</strong>：是指数据的逻辑结构在计算机中的存储形式。</p><ul><li>根据物理结构的定义，我们实际上研究的是如何把数据元素存储到计算机的存储器中。</li><li>存储器主要是针对内存而言的，像硬盘、软盘、光盘等外部存储器的数据组织通常用文件结构来描述。</li><li>数据元素的存储结构形式有两种：顺序存储和链式存储。 <ul><li><strong>顺序存储结构</strong>：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的(数组)。</li><li><strong>链式存储结构</strong>：是把数据放在任意的存储单元里，这组存储单元可以是连续的也可以是不连续的，链式存储结构的数据元素存储关系并不能反映其逻辑关系，因此需要一个指针存放数据元素的地址，通过地址就可以找到相关数据元素的位置了，指针就是链着它们的一条链。指的就是链表：它们在内存中的存放数据是随意的，但是它们的每个元素都多费了一点空间，它除了存放自身的数据之外还要存方一个指针用于指向下一个元素的地址。</li></ul></li></ul></blockquote></li></ul></blockquote><p>​</p><h3 id="_2、什么是算法" tabindex="-1"><a class="header-anchor" href="#_2、什么是算法" aria-hidden="true">#</a> 2、什么是算法？</h3>',3),w=s("strong",null,"算法",-1),x={href:"https://zh.wikipedia.org/wiki/%E6%95%B8%E5%AD%B8",target:"_blank",rel:"noopener noreferrer"},L={href:"https://zh.wikipedia.org/wiki/%E7%AE%97%E5%AD%B8",target:"_blank",rel:"noopener noreferrer"},q={href:"https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zh.wikipedia.org/wiki/%E8%A8%88%E7%AE%97",target:"_blank",rel:"noopener noreferrer"},T={href:"https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86",target:"_blank",rel:"noopener noreferrer"},E={href:"https://zh.wikipedia.org/wiki/%E8%87%AA%E5%8A%A8%E6%8E%A8%E7%90%86",target:"_blank",rel:"noopener noreferrer"},N={href:"https://zh.wikipedia.org/w/index.php?title=%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95&action=edit&redlink=1",target:"_blank",rel:"noopener noreferrer"},V={href:"https://zh.wiktionary.org/wiki/Special:Search/%E6%9C%89%E9%99%90%E7%9A%84",target:"_blank",rel:"noopener noreferrer"},S={href:"https://baike.baidu.com/item/%E6%8C%87%E4%BB%A4/3225201",target:"_blank",rel:"noopener noreferrer"},z=s("p",null,[s("strong",null,"我的理解：算法就是解决问题的方式和技巧，一个问题是可以有多种算法来解决的，就像没有要能包治百病一样，一个问题可以由多个算法解决，一个算法也可能具有通解所有问题的能力，应根据不同场景匹配不同的算法。")],-1),A=p(`<blockquote><p><strong>算法具有五个基本特性</strong></p><blockquote><p><strong>1.输入</strong></p><ul><li>算法具有零个或多个输入</li></ul></blockquote><blockquote><p><strong>2.输出</strong></p><ul><li>算法至少有一个或多个输出</li><li>算法一定要有输出，都则没有意义，输出的形式可以是打印形式输出，也可以是返回一个值或多个值等。</li></ul></blockquote><blockquote><p><strong>3.有穷性</strong></p><ul><li>指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤都在可以接受范围内完成。</li></ul></blockquote><blockquote><p><strong>4.确定性</strong></p><ul><li>算法的每一个步骤都具有确定的含义，不会出现二义性。</li><li>算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。</li></ul></blockquote><blockquote><p><strong>5.可行性</strong></p><ul><li>算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。</li></ul></blockquote></blockquote><blockquote><p><strong>算法设计的要求</strong></p><blockquote><p><strong>正确性</strong></p><ul><li>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能够正确反映问题的需求、能够得到问题的正确答案。</li><li>大体分为以下四个层次： <ol><li>算法程序没有语法错误。</li><li>算法程序对于合法输入能够产生满足要求的输出。</li><li>算法程序对于非法输入能够产生满足规格的说明。</li><li>算法程序对于故意刁难的测试输入都有满足要求的输出结果。</li></ol></li></ul></blockquote><blockquote><p><strong>可读性</strong></p><ul><li>为了让计算机能正确执行，还有便于修改、阅读、理解和交流。</li></ul></blockquote><blockquote><p><strong>健壮性</strong></p><ul><li>当输入数据不合法时，算法也能做出相关的处理，而不是产生异常、崩溃或莫名其妙的结果。</li></ul></blockquote><blockquote><p><strong>时间效率高和存储量低</strong></p><ul><li>算法应具备时间效率高和存储量低的特点，设计算法的时候我们应该尽量思考这两方面的问题。</li></ul></blockquote></blockquote><h3 id="_3、时间复杂度和空间复杂度" tabindex="-1"><a class="header-anchor" href="#_3、时间复杂度和空间复杂度" aria-hidden="true">#</a> 3、时间复杂度和空间复杂度</h3><blockquote><p><strong>算法效率的度量方法</strong></p><ul><li><p>事后统计方法：这种方法主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。</p><ul><li>但是这种方法有缺陷 <ul><li>必须依据算法先编制好测试程序，通常花费大量的时间和精力。</li><li>这种方式非常容易受运行环境的影响，在性能高的机器上跑出来的结果与在性能低的机器上跑的结果相差会很大。而且对测试时使用的数据规模也有很大关系。</li></ul></li></ul></li><li><p>事前分析估算方法：在计算机程序编写前，依据统计方法对算法进行评估。</p></li><li><p>经过前辈们的总结，我们发现一个高级语言编写的程序在计算机上运行所消耗的时间取决于以下因素：</p><ol><li>算法采用的策略，方案。</li><li>编译产生的代码质量。</li><li>问题输入的规模。</li><li>机器执行指令的速度，也就是机器的性能。</li></ol><ul><li>由此可见，抛开这些与计算机硬软件有关的因素，一个程序的运行时间依赖于算法的好坏和数据的输入规模。</li></ul></li></ul><blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//第一种算法</span>
<span class="token keyword">int</span> i<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//执行了1次。因为编译器可能会对代码进行优化，有时候可能需要执行几次的，被编译器优化成1次或n次，因此不需要太精确的计算。</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>	<span class="token comment">//执行了n+1次（当i已经等于100的时候，因为for不知道所以还会判断一次。）</span>
    sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>		<span class="token comment">//执行了n次</span>
<span class="token punctuation">}</span>

<span class="token comment">//第二种算法</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>	<span class="token comment">//执行了1次</span>
sum<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>			<span class="token comment">//执行了1次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>第一种算法执行了1+(n+1)+n=2n+2次</p></li><li><p>第二种算法执行了1+1=2次</p></li><li><p>如果我们把循环看作一个整体，忽略头尾的判断开销，那么这两个语法其实就是n和1的差距。</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span>n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        x<span class="token operator">++</span><span class="token punctuation">;</span>
        sum <span class="token operator">=</span> sum <span class="token operator">+</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不必较真为什么算法1中n+2次和n的差距这么多，说忽略就忽略。</li><li>这个例子中，循环条件从1到100，每次都要让j循环100次，如果非常较真的研究精确的执行次数，那是非常累的。</li><li>另一方面，我们研究算法的复杂度，侧重的是研究算法随着输入规模扩大而增长的增长量的一个抽象（可以理解成大概），而不是精确的计算执行了多少次。</li><li>所以对于上面的例子，我们可以判定需要执行100^2次。</li></ul></blockquote><ul><li>我们不需要关心编写程序所用的语言是什么，也不用关心这些程序跑在上面机器上，我们只需要关注它所实现的算法。</li><li>我们在分析一个算法的运行时间，重要的是把基本操作的数量和输入模式关联起来。</li><li>判断一个算法的效率时，函数中的常数和其他次要项可以忽略，而更应该关注主项（最高项）的阶数。</li></ul><p>1</p></blockquote><blockquote><p><strong>时间复杂度</strong></p><ul><li><p>一个算法的时间复杂度（Time complexity）是该算法总的执行次数，记作 T(n) ，它是该算法所求问题规模n的函数，进而分析 T(n) 随着 n 的变化情况并确定 T(n) 的数量级。</p></li><li><p>时间复杂度的公式是 T(n) = O( f(n) )，它表示随着问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这个公式的全称是：<strong>算法的渐近时间复杂度</strong>，简称时间复杂度。</p></li><li><p>用大写 O 来体现算法时间复杂度的记法，我们也称之为大 O 记法，它是用来表示代码执行时间的增长变化趋势的。</p></li><li><p>一般情况下，随着输入规模的增大， T(n) 增长最慢的算法为最优算法。</p></li><li><p>一条语句的执行次数称为<strong>语句频度</strong>。</p></li><li><p>T(n) = O( f(n) )，其中f(n)一般是算法中最大的语句频度，一般情况下是最深层循环内的语句频度。</p><ul><li>如：T(n) = 2n^3+3n^2+2n+1;的语句频度为T(n)=n^3</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//举例：</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span>  temp；

    temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    x<span class="token operator">=</span>y<span class="token punctuation">;</span>

    y<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>几条语句的执行频度为1，此算法的执行时间是一个与问题规模无关的常数，所以算法的时间复杂度为常阶数，不管这个常数再大，它的时间复杂度都为T(n)=O(1)。</li></ul></li><li><p>如何分析一个算法的复杂度？</p><ol><li>用常数1取代运行时间中的所有常数。</li><li>运行次数函数合并同类项后，只保留最高项。如：T(n) = n^2*n;的语句频度为T(n)=n^3</li><li>如果最高阶项存在且不是1，则去除与这个项相乘的常数。如：T(n) = 3n^2;的语句频度为T(n)=n^2</li></ol><ul><li>得到的就是大O阶（时间复杂度）。</li></ul></li></ul><blockquote><p><strong>常数阶O(1)</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sum<span class="token punctuation">.</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里执行了8次，但是按照我们的概念“ T(n) ，它是该算法所求问题规模n的函数”来说，这里跟问题规模没有关系，所以我们记作 O(1) 即可。</li><li>无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)。</li><li>上述代码在执行的时候，它消耗的时候并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用O(1)来表示它的时间复杂度。</li></ul></blockquote><blockquote><p><strong>线性阶O(n)</strong></p><p>一般含有非嵌套循环涉及线性阶，线性阶就是随着问题规模n的扩大，对应计算次数呈直线增长。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   sum<span class="token operator">=</span>sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这段代码，for循环里面的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，因此这类代码都可以用O(n)来表示它的时间复杂度。</li></ul></blockquote><blockquote><p><strong>平方阶O(n^2)</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       j <span class="token operator">=</span> i<span class="token punctuation">;</span>
       j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>平方阶O(n²) 就更容易理解了，如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²) 了。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       j <span class="token operator">=</span> i<span class="token punctuation">;</span>
       j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果将其中一层循环的n改成m，那它的时间复杂度就变成了 O(m*n)。</li></ul></blockquote><blockquote><p><strong>对数阶O(logN)</strong></p><ul><li><p>对数就是求指数的运算，以a为底b的对数就是求a的多少次方等于b。</p></li><li><p>对数就是指数 x^i=y里面,i*x&lt;x的循环次数。或者y/x/x/...在除尽时候，一共除了多少次</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在while循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。我们试着求解一下，假设循环x次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log2^n</li><li>也就是说当循环 log2^n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：<strong>O(logn)</strong></li></ul></blockquote><blockquote><p><strong>线性对数阶O(nlogN)</strong></p><ul><li>线性对数阶O(nlogN) 其实非常容易理解，将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了O(nlogN)。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> m<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>常见的时间复杂度</strong></p><table><thead><tr><th style="text-align:center;">例子</th><th style="text-align:center;">时间复杂度</th><th style="text-align:center;">术语</th></tr></thead><tbody><tr><td style="text-align:center;">10010</td><td style="text-align:center;">O(1)</td><td style="text-align:center;">常数阶</td></tr><tr><td style="text-align:center;">3n+4</td><td style="text-align:center;">O(n)</td><td style="text-align:center;">线性阶</td></tr><tr><td style="text-align:center;">3n^2+4n+5</td><td style="text-align:center;">O(n^2)</td><td style="text-align:center;">平方阶</td></tr><tr><td style="text-align:center;">n^3+2n^2+4n+6</td><td style="text-align:center;">O(n^3)</td><td style="text-align:center;">立方阶</td></tr><tr><td style="text-align:center;">2^n</td><td style="text-align:center;">O(2^n)</td><td style="text-align:center;">指数阶</td></tr><tr><td style="text-align:center;">3log2^n+3</td><td style="text-align:center;">O(logn)</td><td style="text-align:center;">对数阶</td></tr><tr><td style="text-align:center;">2n+3nlog2^n+11</td><td style="text-align:center;">O(nlogn)</td><td style="text-align:center;">线性对数阶</td></tr></tbody></table></blockquote></blockquote><blockquote><p><strong>空间复杂度</strong></p><ul><li><p>既然时间复杂度不是用来计算程序具体耗时的，那么我也应该明白，空间复杂度也不是用来计算程序实际占用的空间的。</p></li><li><p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，我们用 S(n) 来定义。</p></li><li><p>空间复杂度比较常用的有：O(1)、O(n)、O(n²)</p><blockquote><p><strong>空间复杂度 O(1)</strong></p><ul><li>如果算法执行所需要的临时空间不随着某个变量n的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token operator">++</span>i<span class="token punctuation">;</span>
j<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> m <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>代码中的 i、j、m 所分配的空间都不随着处理数据量变化，因此它的空间复杂度 S(n) = O(1)</li></ul></blockquote><blockquote><p><strong>空间复杂度 O(n)</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
   j <span class="token operator">=</span> i<span class="token punctuation">;</span>
   j<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这段代码的2-6行，虽然有循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，即 S(n) = O(n)</li></ul></blockquote></li></ul></blockquote><h2 id="二、线性表" tabindex="-1"><a class="header-anchor" href="#二、线性表" aria-hidden="true">#</a> 二、线性表</h2><h3 id="_1、线性表的定义" tabindex="-1"><a class="header-anchor" href="#_1、线性表的定义" aria-hidden="true">#</a> 1、线性表的定义</h3><blockquote><p><strong>线性表(List)：由零个或多个数据元素组成的有限序列。</strong></p><ul><li>首先它是一个序列，也就是说元素之间是有个先来后到的。</li><li>若元素存在多个，则第一个元素无前驱，二最后一个元素无后继，其他元素都有且只有一个前驱和后继。</li><li>线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。</li></ul><p><strong>如果用数学语言来进行定义</strong></p><ul><li>若将线性表标记为（ a1 , a2 , ... , ai-1 , ai , ai+1 , ... ,an）,则表中ai-1领先于ai，ai领先于ai+1，我们称ai-1是ai的直接前驱元素，ai+1是ai的直接后继元素。</li><li>所以线性表元素的个数n(n&gt;=9)定义为线性表的长度；当n=0时，成为空表。</li></ul><p><strong>考题模拟</strong></p><blockquote><p>请问公司的组织架构是否属于线性关系？</p><ul><li>一般公司的总经理管理几个总监，每个总监管理几个经理，每个经理都有各自的下属和员工。线性关系的条件是如果存在多个元素，则“第一个元素无前驱，最后一个元素无后继，其他元素都有且只有一个前驱和后继”。</li></ul></blockquote><blockquote><p>班级里同学之间的友谊呢？</p><ul><li>不是，因为每个人都会和许多同学建立友谊关系。</li></ul></blockquote></blockquote><h3 id="_2、抽象数据类型。" tabindex="-1"><a class="header-anchor" href="#_2、抽象数据类型。" aria-hidden="true">#</a> 2、抽象数据类型。</h3><blockquote><p>在介绍抽象数据类型之前，我们应该先了解数据类型的定义是什么？</p><blockquote><p><strong>数据类型</strong>：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</p><ul><li>例如很多变成语言的类型，浮点型，字符型，这些指的就是数据类型。</li><li>在计算机内存有限，要计算1+1=2这样的整形数字的加减乘除运算，显然不需要开辟很大的内存空间。 <ul><li>而如果计算1.23456789+2.987654321这样的大量小数就需要开辟比较大的空间才能存放的下。，</li><li>于是计算机的研究者们就考虑，要对数据类型进行分类，分出多种数据类型来适配各种不同的条件差异。</li></ul></li><li>在C语言中，按照取值的不同，数据类型可以分为两类： <ul><li>原子类型：不可再进行分解的基本类型。例如：整型、浮点型、字符型。</li><li>结构类型：由若干种数据类型组合而成，是可以再分解的。例如整形数组是由若干整形数据组成的。</li></ul></li></ul></blockquote><blockquote><p><strong>抽象数据类型(Abstract Data Type, ADT)</strong>：是指一个数学模型及其定义在该模型上的一组操作。</p><ul><li><p>抽象：是指抽取出事物具有普遍性的本质，他要求抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。抽象是一种思考问题的方式，它隐藏了繁杂的细节。</p><ul><li>比如计算1+1我们不需要知道CPU是怎么执行运算的，我们不用管它，因为编译器已经帮我们抽象出来了。</li><li>再比如1+1=2的操作，在不同CPU的处理上可能不一样，但由于其定义的数学特性相同，所以在计算机编程看来，它们是相同的。</li></ul></li><li><p>抽象数据类型的定义仅取决于它的一组逻辑特性，而以其在计算机内部如何表示和实现无关。</p></li><li><p>有点像高级语言中的class，里面由成员变量，和成员方法组成。</p></li><li><p>抽象的意义在于数据类型的数学抽象特性。</p><ul><li>抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是在设计软件程序时自己定义的数据类型。</li><li>例如一个3D游戏中，要定位一个角色的位置，那么就需要 x、y、z 三个整型或浮点型组合在一起的坐标。我们就可以定义一个point的抽象数据类型，它拥有 x、y、z 三个整型或浮点型变量，这样我们就可以方便对一个角色的位置进行操作。</li></ul></li><li><blockquote><p>描述抽象数据类型的标准格式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
ADT 抽象数据类型名
Data
	数据元素之间逻辑关系的定义
Operation
	操作1
		初始条件
		操作结果描述
	操作2
		…………
	操作n
		…………
endADT
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul></blockquote></blockquote><h3 id="_3、线性表的顺序结构实现" tabindex="-1"><a class="header-anchor" href="#_3、线性表的顺序结构实现" aria-hidden="true">#</a> 3、线性表的顺序结构实现</h3><blockquote><p><strong>抽象数据类型</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
ADT List
Data
	void* **elementData;		//数据
	int size;					//当前长度
	int capcity;				//当前容量
Operation
	List *init()		//初始化ArrayList
	void add(*L,i,e)	//添加元素到指定索引
	void* get(*L,i)		//根据索引获取元素
	int size(*L)		//返回ArrayList长度
	void delete(*L,i)	//删除指定索引元素
	void clear(*L)		//清空ArrayList
	_Bool isEmpty(*L)	//返回是否为空
endADT
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>顺序存储结构线性表</strong></p><p>是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的(数组)。</p><p><strong>代码实现</strong></p><p><strong>ArrayList.h</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">/*the default size of the list*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_CAPACITY</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJECT_SIZE</span> <span class="token expression"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span>Obj<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ARRAY_LIST</span> <span class="token punctuation">{</span>
   Obj <span class="token operator">*</span>elementData<span class="token punctuation">;</span>
   <span class="token class-name">uint32_t</span> size<span class="token punctuation">;</span>
   <span class="token class-name">uint32_t</span> capacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span> ARRAY_LIST<span class="token punctuation">,</span> <span class="token operator">*</span>ArrayList<span class="token punctuation">;</span>

<span class="token comment">/*init the List*/</span>
ArrayList <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*grow the List*/</span>
<span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*malloc for object*/</span>
Obj <span class="token function">malloc_object</span><span class="token punctuation">(</span>Obj e<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> obj_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">,</span> Obj e<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> obj_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">,</span> Obj e<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> obj_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Get an Element By index*/</span>
Obj <span class="token function">get</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ArrayList.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;ArrayList.h&quot;</span></span>

ArrayList <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   ArrayList arrayList <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ARRAY_LIST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayList <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Error：Failed to allocate memory！of ArrayList\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>OBJECT_SIZE <span class="token operator">*</span> DEFAULT_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Error：Failed to allocate memory of arrayList-&gt;elementData！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   arrayList<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   arrayList<span class="token operator">-&gt;</span>capacity <span class="token operator">=</span> DEFAULT_CAPACITY<span class="token punctuation">;</span>
   <span class="token keyword">return</span> arrayList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>size <span class="token operator">==</span> arrayList<span class="token operator">-&gt;</span>capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       arrayList<span class="token operator">-&gt;</span>capacity <span class="token operator">&lt;&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span>
       arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>elementData<span class="token punctuation">,</span> OBJECT_SIZE <span class="token operator">*</span> arrayList<span class="token operator">-&gt;</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Error：Failed to allocate memory for grow！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">return</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Obj <span class="token function">malloc_object</span><span class="token punctuation">(</span>Obj e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> obj_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">void</span> <span class="token operator">*</span>value <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>obj_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Error：Failed to allocate memory！of malloc_object\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token function">memcpy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">,</span> obj_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">,</span> Obj e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> obj_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   Obj value <span class="token operator">=</span> <span class="token function">malloc_object</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> obj_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Error：Failed to allocate memory！for malloc_object\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token function">grow</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">memcpy</span><span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">+</span> arrayList<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">,</span> OBJECT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
   arrayList<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">,</span> Obj e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> obj_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> arrayList<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   Obj value <span class="token operator">=</span> <span class="token function">malloc_object</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> obj_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Error：Failed to allocate memory！for malloc_object\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token function">grow</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">memmove</span><span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">+</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">+</span> index<span class="token punctuation">,</span>
           <span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>size <span class="token operator">-</span> index<span class="token punctuation">)</span> <span class="token operator">*</span> OBJECT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">memcpy</span><span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">+</span> index<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">,</span> OBJECT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
   arrayList<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> arrayList<span class="token operator">-&gt;</span>size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
   arrayList<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
   <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>Obj <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放删除的元素</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
   <span class="token function">memmove</span><span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">+</span> index<span class="token punctuation">,</span> arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">+</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
           <span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>size <span class="token operator">-</span> index<span class="token punctuation">)</span> <span class="token operator">*</span> OBJECT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后面元素往前覆盖一位</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayList<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>Obj <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放删除的元素</span>
   <span class="token punctuation">}</span>
   arrayList<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Obj <span class="token function">get</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> arrayList<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>Obj <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> arrayList<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>ArrayList arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> arrayList <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> arrayList<span class="token operator">-&gt;</span>elementData <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> arrayList<span class="token operator">-&gt;</span>size <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   ArrayList arrayList <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Are you ok?&quot;</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;How are you?&quot;</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;How are doing?&quot;</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> str4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Welcome use my ArrayList?&quot;</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> str5<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;are you going?&quot;</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> str6<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Iam go to School!&quot;</span><span class="token punctuation">;</span>
   <span class="token function">add</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">add</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">add</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> str3<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">add</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> str4<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">add</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> str5<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">add</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> str6<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token function">delete</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">uint32_t</span> length <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d个元素!\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token function">insert</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> str4<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   length <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d个元素!\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token function">clear</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
   length <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d个元素!\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>线性表的顺序存储结构的时间复杂度分析</strong></p><ul><li><p>删除和插入的操作：</p><ul><li>最好的情况：插入和删除操作刚好是最后一个元素，因为不需要移动任何元素，所以此时的时间复杂度为O(1)。</li><li>最坏的情况：如果插入和删除的位置是第一个元素，那就意味着要移动所有的元素向后或者向前移动，所以最坏的时间复杂度为O(n)。</li><li>平均情况，取中间值为O((n-1)/2)。按照时间复杂度规则，平均情况仍然是O(n);</li><li><strong>以上分析是基于元素仅支持int的线性表(使用for循环移位)而言的。而以上我实现的是支持任意类型的线性表，使用的是内存拷贝，复杂度可能有所不同</strong>。</li></ul></li><li><p>查找</p><ul><li>线性表的顺序存储结构，查找数据时，不管是哪个位置时间复杂度都是O(1)，插入和删除复杂度为O(n)。</li></ul></li><li><p>优点：</p><ul><li>无需为表中与元素之间的逻辑关系而增加额外的存储空间（例如链表指向下一个元素的指针）</li><li>可以快速的查找任意位置的元素。</li></ul></li><li><p>缺点：</p><ul><li>因为元素的存储位置是连续的，内存中也是连续的，中间没有空隙，所以插入和删除操作可能需要移动大量元素。</li><li>容易造成存储空间碎片（这是基于老师的int类型线性表而言的，对于我实现的任意类型，根据数据的所占用的内存申请的内存空间，情况应该会有所不同）。</li></ul></li></ul></blockquote><h3 id="_4、线性表链式存储结构实现" tabindex="-1"><a class="header-anchor" href="#_4、线性表链式存储结构实现" aria-hidden="true">#</a> 4、线性表链式存储结构实现</h3><blockquote><p><strong>抽象数据类型</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
ADT List
Data
	typedef void *Obj;
	Obj elementData;
    struct Node *next;
Operation
	/*init the List*/</span>
    LinkedList <span class="token function">new_LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*new a node*/</span>
    LinkedList <span class="token function">new_node</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span>Obj e<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*Add an Element to the head*/</span>
    <span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> Obj e<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*Add an Element to the end*/</span>
    <span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> Obj e<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*Insert an Element to the Specified location*/</span>
    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> Obj e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*Delete an Element by the Specified location*/</span>
    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*Clear the List*/</span>
    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*Get an Element By index*/</span>
    Obj <span class="token function">get</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*get the size of List*/</span>
    <span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*isEmpty*/</span>
    <span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>
endADT
<span class="token operator">*</span><span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>链式存储结构线性表</strong></p><ul><li>线性表链式存储结构的特点是用一组任意的存储单元，存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。</li><li>比起顺序存储结构每个数据元素只需要存在一个位置就可以了。链式存储结构中，除了要存数据元素信息外，还要存储它的后继元素的存储位置(指针)。</li><li>我们把存储元素信息的域称为数据域，把存储直接后继元素位置的域称为指针域。把指针域中存储的信息称为指针或者链。这两部分信息组成的数据元素称为存储映像，称为节点(Node)。</li><li>链表的每个节点只包含一个指针域的链表，称为单链表。</li><li>对于线性表来说，总得有个头有个尾，链表也不例外。我们把链表中的第一个节点的存储位置叫头指针，最后一个节点的指针为空(NULL)。</li><li>头指针 <ul><li>头指针是指向第一个节点的指针，若链表有头节点，则是指向头节点的指针。</li><li>头指针具有标识作用，也就是链表变量的变量名。</li><li>头指针是链表的必要元素。</li></ul></li><li>头节点 <ul><li>“为了使空链表与非空链表处理一致，我们通常设一个头结点，当然，这并不是说，循环链表一定要头结点”</li><li>头节点是为了操作的统一和方便而设立的，放在第一个元素的节点之前，其数据域一般无意义（但是可以用来存一些其他数据，例如链表的长度）。</li><li>有了头节点，对第一个元素节点前插入节点和删除第一个节点，操作与其他节点的操作就统一了。</li><li>头节点不一定是链表的必要素。</li></ul></li></ul></blockquote><blockquote><p><strong>代码实现</strong></p><p><strong>LinkedList.h</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span>Obj<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    Obj elementData<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">,</span> <span class="token operator">*</span>LinkedList<span class="token punctuation">;</span>

<span class="token comment">/*init the List*/</span>
LinkedList <span class="token function">new_LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*new a node*/</span>
LinkedList <span class="token function">new_node</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span>Obj e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the head*/</span>
<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> Obj e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> Obj e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> Obj e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Get an Element By index*/</span>
Obj <span class="token function">get</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LinkedList.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//</span>
<span class="token comment">// Created by 刘玉培 on 2022/2/18.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;LinkedList.h&quot;</span></span>

LinkedList <span class="token function">new_LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkedList list <span class="token operator">=</span> <span class="token punctuation">(</span>LinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存空间失败！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    list<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

LinkedList <span class="token function">new_node</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> Obj e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>LinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存空间失败！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Add an Element to the head*/</span>
<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> Obj e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkedList node <span class="token operator">=</span> <span class="token function">new_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> Obj e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkedList node <span class="token operator">=</span> <span class="token function">new_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> Obj e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    LinkedList p <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> index <span class="token operator">||</span> p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    LinkedList node <span class="token operator">=</span> <span class="token function">new_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Get an Element By index*/</span>
Obj <span class="token function">get</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    list <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> index <span class="token operator">||</span> list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> list<span class="token operator">-&gt;</span>elementData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    LinkedList p <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> index <span class="token operator">||</span> p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> p<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    LinkedList node <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkedList node <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> list <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> list<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkedList list <span class="token operator">=</span> <span class="token function">new_LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;Hello1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;Hello2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;Hello3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;Hello4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;Hello5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;Hello1000&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">head_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;I is head Hello!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> length <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test LinkedList Size: %d\\n\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">delete</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\ntest delete 5：%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test isEmpty：%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    length <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\ntest LinkedList Size: %d\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">clear</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test clear 0: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test clear 5: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test is Empty: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    length <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test LinkedList Size: %d\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>时间复杂度分析</strong></p><ul><li>查找 <ul><li>查找的复杂度取决于i的位置，当i=1时，则不需要遍历，而i=n时则需要遍历n-1次才可以，因此最坏情况的时间复杂度为O(n)。</li><li>由于单链表的结构中没有定义表长，所以不能知道要循环多少次，因此也不方便使用for来控制循环。</li><li>其核心思想叫做“工作指针后移”，这其实也是很多算法的常用技术。</li></ul></li><li>插入和删除 <ul><li>对于顺序存储结构，每一次插入都要移动n-1个位置，所以每次都是O(n-1)。</li><li>而单链表，我们只需要在第一次时，找到第i个位置的指针，此时为O(n)，接下来只需简单的移动指针，时间复杂度为O(1)。</li><li>对于插入和删除数据比较频繁的操作，单链表明显更加适合。</li></ul></li></ul></blockquote><h3 id="_5、单链表结构和顺序存储结构优缺点" tabindex="-1"><a class="header-anchor" href="#_5、单链表结构和顺序存储结构优缺点" aria-hidden="true">#</a> 5、单链表结构和顺序存储结构优缺点</h3><blockquote><p><strong>单链表结构和顺序存储结构优缺点</strong></p><ul><li>查找 <ul><li>顺序存储结构O(1)。</li><li>单链表O(n)。</li></ul></li><li>插入和删除 <ul><li>顺序存储结构需要平均移动表的一半元素，时间复杂度为(n)。</li><li>单链表在计算出位置的指针后，插入和删除的时间复杂度为O(1)。</li></ul></li><li>空间性能 <ul><li>顺序存储结构需要预分配内存空间，分大了容易造成空间浪费，分小了，容易发生溢出。</li><li>单链表不需要预分配内存空间，需要时再分配，并且元素个数不受限制。</li></ul></li></ul></blockquote><h3 id="_6、静态链表与实现" tabindex="-1"><a class="header-anchor" href="#_6、静态链表与实现" aria-hidden="true">#</a> 6、静态链表与实现</h3><blockquote><p><strong>静态链表：在没有指针的语言，使用数组对单链表的实现。</strong></p><table><thead><tr><th style="text-align:center;">游标(cur)</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">5</th><th style="text-align:center;">4</th><th style="text-align:center;">6</th><th style="text-align:center;">7</th><th style="text-align:center;">0</th><th style="text-align:center;">8</th><th style="text-align:center;">....</th><th style="text-align:center;">1</th></tr></thead><tbody><tr><td style="text-align:center;">数据(data)</td><td style="text-align:center;"></td><td style="text-align:center;">A</td><td style="text-align:center;"></td><td style="text-align:center;">B</td><td style="text-align:center;">C</td><td style="text-align:center;"></td><td style="text-align:center;">D</td><td style="text-align:center;"></td><td style="text-align:center;">...</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">下标(index)</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td><td style="text-align:center;">7</td><td style="text-align:center;">...</td><td style="text-align:center;">999</td></tr></tbody></table><ul><li>我们对数组的第一个元素和最后一个元素做特殊处理，他们的data不存放数据。</li><li>我们通常把未使用的数组元素称为备用链表。</li><li>数组的第一个元素，即下标为0的那个元素的cur存放的是备用链表的第一个节点的下标，如果存放的是0代表备用链表用完长度为0。</li><li>数组的最后一个元素，即下标为MAXSIZE-1的元素的cur则存放第一个有数据的元素的下标，相当于单链表的头节点作用。</li></ul></blockquote><blockquote><p><strong>StaticLinkedList.h</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">10</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">char</span> elementType<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">STATIC_LINKED_LIST</span> <span class="token punctuation">{</span>
    elementType data<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cur<span class="token punctuation">;</span>
<span class="token punctuation">}</span> list<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token comment">/*init the List*/</span>
<span class="token keyword">void</span> <span class="token function">new_StaticLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Malloc a free-node*/</span>
<span class="token keyword">int</span> <span class="token function">malloc_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the head*/</span>
<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>elementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>elementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>elementType e<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*print the list*/</span>
<span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Get an Element By index*/</span>
elementType <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>StaticLinkedList.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;StaticLinkedList.h&quot;</span></span>


<span class="token comment">/*init the List*/</span>
<span class="token keyword">void</span> <span class="token function">new_StaticLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Malloc a free-node*/</span>
<span class="token keyword">int</span> <span class="token function">malloc_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Add an Element to the head*/</span>
<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>elementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">malloc_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>
    list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>elementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">malloc_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请备用元素</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//申请失败</span>
    list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//设置数据</span>
    list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//这函数是一个尾插法函数，所以最后一个有数据元素的游标指向0</span>
    <span class="token keyword">int</span> last <span class="token operator">=</span> list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span><span class="token comment">//获取第一个有效数据的下标</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果等于0代表还没有数据</span>
        list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//最后一个元素指向第一个有数据元素的下标</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果成立代表找到了 有数据链表的最后一个元素</span>
            list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//将有数据链表的最后一个元素的游标设置成当前游标的</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//结束</span>
        <span class="token punctuation">}</span>
        last <span class="token operator">=</span> list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span><span class="token comment">//持续寻找下一个</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//迭代直到找到有数据链表的最后一个元素</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>elementType e<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">head_insert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">tail_insert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&gt;</span> index <span class="token operator">||</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> index<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    index <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//索引从0开始，而静态链表的第一个元素和最后一个元素不存放数据，所以这里自动加1</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">malloc_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请一个备用元素</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//申请失败</span>
    list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//设置数据</span>
    <span class="token keyword">int</span> last <span class="token operator">=</span> list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span><span class="token comment">//获取最后一个元素的游标，它应该指向的是第一个有数据的元素</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果指向0代表还没有数据</span>
        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//设置第一个有数据的元素的游标为0，也代表最后一个有数据的元素</span>
        list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//设置最后一个元素的游标为第一个有数据元素的下标</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> index <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//循环寻找上一个有数据元素的游标，cur=0代表是最后一个，last未进入循环就已经指向第一个了，所以-1，因为要寻找的是上一个所以-1，一共-2</span>
        last <span class="token operator">=</span> list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span><span class="token comment">//将新的有数据元素指向上一个有数据元素的游标</span>
    list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//将上一个有数据元素的游标指向当前新增的元素的下标</span>
<span class="token punctuation">}</span>

<span class="token comment">/*print the list*/</span>
<span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;游标：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;数据：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5c&quot;</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;下标：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;数据：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> cur <span class="token operator">=</span> list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> list<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//校验输入</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> last <span class="token operator">=</span> list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span><span class="token comment">//获取第一个有数据元素的下标</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果是0代表静态链表没有数据</span>


    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//last已经获取到第一个有数据元素的下标，所以从1开始，因为获取的是index的上一个元素，所以-1</span>
        last <span class="token operator">=</span> list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> current <span class="token operator">=</span> list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>

    <span class="token comment">//从有数据链表中移除</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是第一个有数据元素</span>
        list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是最后一个有数据元素</span>
        list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> list<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span><span class="token comment">//上一个元素与下一个元素链接</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//回收到备用链表</span>
    list<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> current<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Get an Element By index*/</span>
elementType <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//校验输入</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> last <span class="token operator">=</span> list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> index<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        last <span class="token operator">=</span> list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> list<span class="token punctuation">[</span>MAX_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">new_StaticLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token char">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token char">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token char">&#39;O&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token char">&#39;N&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token char">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token char">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token char">&#39;S&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>静态链表优缺点总结</strong></p><p>优点：</p><ul><li>在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要大量移动元素的缺点。</li></ul><p>缺点：</p><ul><li>没有解决连续存储分配（数组）带来的表长难以确定的问题。</li><li>失去了顺序存储结构随机存取的特性（不能像数组一样，通过下标获取对应的元素）。</li></ul><p><strong>总的来说，静态链表其实是为了在没有指针的编程语言设计的一种实现单链表功能的方法。</strong></p><p><strong>尽管我们可以用单链表就不用静态链表了，但这样的思考方式是非常very good，我们应该理解其思想，以备不时之需。</strong></p></blockquote><h3 id="_7、单链表小结面试题" tabindex="-1"><a class="header-anchor" href="#_7、单链表小结面试题" aria-hidden="true">#</a> 7、单链表小结面试题</h3><blockquote><p>题目：快速找到未知长度单链表的中间节点。</p><ul><li><p>普通方法：普通方法很简单，首先遍历一遍单链表以确定单链表的长度L。然后再次从头节点出发循环L/2次，即可找到单链表的中间节点。复杂度为O(L+(L\\2))=O(3L/2)。</p></li><li><p>高级方法：利用快慢指针，两个指针*search 和 *mid都指向单链表的头节点。其中 *search的移动速度是 *mid的2倍。当 * search指向末尾节点的时候，mid正好指向中间节点了，这也是尺标思想。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*示例*/</span>
Obj <span class="token function">middleNode</span><span class="token punctuation">(</span>LinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkedList search <span class="token operator">=</span> list<span class="token punctuation">,</span> mid <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>search <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>search<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>search<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            search <span class="token operator">=</span> search<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            mid <span class="token operator">=</span> mid<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            search <span class="token operator">=</span> search<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> mid<span class="token operator">-&gt;</span>elementData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></blockquote><h3 id="_8、循环单链表" tabindex="-1"><a class="header-anchor" href="#_8、循环单链表" aria-hidden="true">#</a> 8、循环单链表</h3><blockquote><p>对于单链表，由于每个节点只存储了向后的指针，到了尾部标识就停止了向后链的操作。也就是说，按照这样的方式，只能索引后继节点，不能索引前驱节点。</p><p>这会带来什么问题呢？</p><ul><li>不从头节点出发，就无法访问到所有节点。</li><li>要解决这个问题不麻烦，只需要将单链表中终端节点的指针由原来的空指针NULL改为指向头节点，问题就解决了。</li><li>将单链表中终端节点的指针由原来的空指针NULL改为指向头节点，就使得整个单链表形成一个环，这种头尾相接的单链表称为循环单链表。简称循环链表。</li></ul></blockquote><blockquote><p>循环链表和单链表的主要差异在于判断空链表的条件上，原来判断head-&gt;next==NULL，现在则是head-&gt;next==head</p><p>如果终端节点用尾指针rear来指示，则查找终端节点是O(1)，开始节点则是rear-&gt;next-next 也是O(1)。</p></blockquote><h5 id="有头节点实现" tabindex="-1"><a class="header-anchor" href="#有头节点实现" aria-hidden="true">#</a> 有头节点实现</h5><blockquote><p><strong>CircularLinkedList_have_Head.h</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> elementType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    elementType elementData<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">,</span> <span class="token operator">*</span>CircularLinkedList<span class="token punctuation">;</span>

<span class="token comment">/*init the List*/</span>
CircularLinkedList <span class="token function">new_CircularLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the head*/</span>
<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span> elementType e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Get an Element By index*/</span>
elementType <span class="token function">get</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span>elementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>CircularLinkedList_have_Head.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CircularLinkedList_have_Head.h&quot;</span></span>

<span class="token comment">/*init the List*/</span>
CircularLinkedList <span class="token function">new_CircularLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList list <span class="token operator">=</span> <span class="token punctuation">(</span>CircularLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存失败！in new_CircularLinkedList\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> list<span class="token punctuation">;</span>
<span class="token comment">//    list-&gt;elementData = 0;//头节点的数据域用于存储链表长度</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Add an Element to the head*/</span>
<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>CircularLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存失败！in head_insert\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>CircularLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存失败！in tail_insert\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>
    CircularLinkedList p <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> list<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到最后一个节点</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span> elementType e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in insert\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>CircularLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存失败！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>

    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    CircularLinkedList p <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in delete\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    CircularLinkedList p <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;删除：%d\\n&quot;</span><span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList p <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">!=</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;删除：%d\\n&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Get an Element By index*/</span>
elementType <span class="token function">get</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in get\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    CircularLinkedList p <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">&gt;=</span> j<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> list <span class="token operator">==</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>CircularLinkedList p <span class="token operator">=</span> list<span class="token punctuation">;</span> p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> list<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> s <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">_Bool</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    CircularLinkedList p <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elementData<span class="token operator">==</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> flag <span class="token operator">?</span> i <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList list <span class="token operator">=</span> <span class="token function">new_CircularLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">head_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;索引：%d\\n\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">clear</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="无头节点实现" tabindex="-1"><a class="header-anchor" href="#无头节点实现" aria-hidden="true">#</a> 无头节点实现</h5><blockquote><p><strong>CircularLinkedList_no_Head.h</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> elementType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    elementType elementData<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">,</span> <span class="token operator">*</span>CircularLinkedList<span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the head*/</span>
<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Get an Element By index*/</span>
elementType <span class="token function">get</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span>elementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>CircularLinkedList_no_Head.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CircularLinkedList_not_Head.h&quot;</span></span>

<span class="token comment">/*Add an Element to the head*/</span>
<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>CircularLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存失败！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        CircularLinkedList p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到最后一个节点</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>list <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>CircularLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存失败！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token operator">*</span>list <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        CircularLinkedList p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到最后一个节点</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in insert size(): %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>CircularLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存失败！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token operator">*</span>list <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到最后一个节点</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>list <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//找到上一个节点</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in delete\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果链表长度为1,代表删除将删除所有元素</span>
        <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到最后一个节点</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>list <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//找到上一个节点</span>
    CircularLinkedList temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;释放 -&gt; %d\\n&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Get an Element By index*/</span>
elementType <span class="token function">get</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in get\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> index<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">_Bool</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elementData <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> flag <span class="token operator">?</span> index <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">head_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;索引：%d\\n\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="约瑟夫问题" tabindex="-1"><a class="header-anchor" href="#约瑟夫问题" aria-hidden="true">#</a> 约瑟夫问题</h5><blockquote><p>据说著名犹太历史学家Josephus有过以下故事：</p><p>在罗马人占领桥塔帕特后，39个犹太人与Josephus及他的朋友躲到一个山洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第一个人开始报数，每报数到第3个人，该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀为止。</p><ul><li>然而Josephus和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己分别安排在第16与第31个位置，于是逃过了这场死亡游戏。</li></ul></blockquote><blockquote><p>代码实现</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    CircularLinkedList list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">41</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m <span class="token operator">%=</span> n<span class="token punctuation">;</span><span class="token comment">//B：这里m%=n是为了防止m大于n的情况</span>
    CircularLinkedList p <span class="token operator">=</span> list<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//不等于最后一个元素，则继续查找。只有剩下最后一个元素时，这里才会成立</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//m-1=2,开始数数时上面p=list数了1次，这里也数了1次，再下面就是该自杀的人了</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d-&gt;&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自杀啦</span>
        <span class="token comment">//把死尸般走</span>
        temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//指向自杀Baby</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//自杀Baby的位置让给下一个未自杀的Baby</span>
        <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把当前自杀的Baby尸体给烧了</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//从下一个未自杀的Baby开始数数--1</span>
        
        
        <span class="token comment">/*
        p=temp-next;//注意：此方法不行，此方法不会改变链表的长度，因此会陷入无限循环。
        */</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后一个自杀的人啊</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_9、带尾指针的循环链表" tabindex="-1"><a class="header-anchor" href="#_9、带尾指针的循环链表" aria-hidden="true">#</a> 9、带尾指针的循环链表</h3><blockquote><p>在单链表中，我们有了头结点时，我们可以用O(1)的时间访问第一个结点，但对于要访问到最后一个结点，却需要O(n)时间，因为我们需要将单链表全部扫描一遍。</p><ul><li>有没有可能用O(1)的时间由链表指针访问到最后一个结点呢？当然可以。</li><li>链表变量名指向rear也叫尾指针，则查找终端结点是O(1)，而开始结点，其实就是rear-&gt;next-&gt;next，其时间复杂也为O(1)</li></ul></blockquote><h5 id="有头节点循环链表实现-尾指针" tabindex="-1"><a class="header-anchor" href="#有头节点循环链表实现-尾指针" aria-hidden="true">#</a> 有头节点循环链表实现（尾指针）</h5><blockquote><p><strong>CircularLinkedList_head_rear.h</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> elementType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    elementType elementData<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">,</span> <span class="token operator">*</span>CircularLinkedList<span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the head*/</span>
<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Get an Element By index*/</span>
elementType <span class="token function">get</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span>elementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>CircularLinkedList_head_rear.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CircularLinkedList_head_rear.h&quot;</span></span>

<span class="token comment">/*init the List*/</span>
CircularLinkedList <span class="token function">new_CircularLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList list <span class="token operator">=</span> <span class="token punctuation">(</span>CircularLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存失败！in new_CircularLinkedList\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>CircularLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">,</span> rear<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存失败！in head_insert\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>
    rear <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是空表</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> rear<span class="token punctuation">;</span><span class="token comment">//头节点指向尾节点</span>
        rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//尾节点指向头节点</span>
        <span class="token operator">*</span>list <span class="token operator">=</span> rear<span class="token punctuation">;</span><span class="token comment">//设置头指针指向尾节点</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//非空表，让头节点指向新增节点，新增节点指向原来的第一个节点</span>
    rear <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> rear<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//当前新增节点的-&gt;节点指针=尾节点-&gt;头节点-&gt;第一个节点</span>
    rear<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//尾节点-&gt;头节点-&gt;头节点指针=当前新增节点</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>CircularLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存失败！in tail_insert\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token comment">//无论是否空表都适用</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> rear<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//新增节点的后继元素指向头节点</span>
    rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//最后一个节点的后继节点指向当前新增节点</span>
    <span class="token operator">*</span>list <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> count <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in insert\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">head_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>CircularLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存失败！in tail_insert\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取上一个节点</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> count <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in delete\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> temp<span class="token punctuation">;</span><span class="token comment">//第一个节点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;删除：%d\\n&quot;</span><span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//尾指针被删除，设置新的尾指针</span>
        <span class="token operator">*</span>list <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> p<span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;删除：%d\\t&quot;</span><span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Get an Element By index*/</span>
elementType <span class="token function">get</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in get\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*CircularLinkedList p = (*list)-&gt;next-&gt;next;
    while (p != (*list)-&gt;next) {
        printf(&quot;%5d&quot;, p-&gt;elementData);
        p = p-&gt;next;
    }*/</span>
    <span class="token class-name">uint32_t</span> count <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n第一个节点：%d\\t\\t\\t最后一个节点：%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>elementData<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">,</span> elementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">_Bool</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elementData <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> flag <span class="token operator">?</span> index <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>CircularLinkedList <span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList rear <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> rear<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span> rear <span class="token operator">=</span> rear<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList list <span class="token operator">=</span> <span class="token function">new_CircularLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">head_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d的索引：%d\\n\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>要将两个循环链表合并成一个表时，有了尾指针就非常简单了。比如下面的这两个循环链表合并</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    CircularLinkedList head1 <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> head2 <span class="token operator">=</span> list2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> list2<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//第一个人链表的尾节点指向第二个链表的第一个节点</span>
    list2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head1<span class="token punctuation">;</span><span class="token comment">//第二个链表的尾节点指向第一个链表的头节点------合并到了list2</span>
    <span class="token function">printList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>查找单链表中是否有环</p><p>类似冒泡的方法：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">HasLoop1</span><span class="token punctuation">(</span>CircularLinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CircularLinkedList p1 <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> p2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> pos1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pos2<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p2 <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        pos2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">!=</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d ------- %d\\n&quot;</span><span class="token punctuation">,</span> p1<span class="token operator">-&gt;</span>elementData<span class="token punctuation">,</span> p2<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>pos1 <span class="token operator">==</span> pos2<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;环的位置在第%d处！\\n&quot;</span><span class="token punctuation">,</span> pos2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p2 <span class="token operator">=</span> p2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            pos2<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p1 <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        pos1<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>快慢指针：如果有环的话快指针会绕回来，但是无法得到具体位置</p></blockquote><h5 id="魔术师发牌问题" tabindex="-1"><a class="header-anchor" href="#魔术师发牌问题" aria-hidden="true">#</a> 魔术师发牌问题</h5><blockquote><table><thead><tr><th>1</th><th>8</th><th>2</th><th>5</th><th>10</th><th>3</th><th>12</th><th>11</th><th>9</th><th>4</th><th>7</th><th>6</th><th>13</th></tr></thead></table><p><strong>使用无头循环链表实现（非尾指针）</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> max<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//设置第一个元素为1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//num小于或者等于max</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//跳n步</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elementData <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//如果i步是被占用的，不算</span>
        <span class="token punctuation">}</span>
        p<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> num<span class="token punctuation">;</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="拉丁方阵问题" tabindex="-1"><a class="header-anchor" href="#拉丁方阵问题" aria-hidden="true">#</a> 拉丁方阵问题</h5><blockquote><p>拉丁方阵是一种nxn的方阵，方阵中恰好有n种不同的元素，每种元素恰好有n个，并且每种元素在一行一列中只出现一次。著名数学家和物理学家欧拉使用拉丁字母来作为拉丁方阵里元素的符号，拉丁方阵因此而得名。</p><table><thead><tr><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th></tr></thead><tbody><tr><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td></tr></tbody></table><p><strong>使用无头循环链表实现（非尾指针）</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    CircularLinkedList p <span class="token operator">=</span> <span class="token operator">*</span>list<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//输出n次</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按顺序输出列，每次输出1列</span>
        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//获取当前行起始位置，输出后面的列</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//每次输出n-1列</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            x<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        y<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_10、-双向链表" tabindex="-1"><a class="header-anchor" href="#_10、-双向链表" aria-hidden="true">#</a> 10、 双向链表</h3><blockquote><p>“双向链表（double linkedlist）是在单链表的每个结点中，再设置一个指向其前驱结点的指针域。所以在双向链表中的结点都有两个指针域，一个指向直接后继，另一个指向直接前驱。”</p></blockquote><h5 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h5><blockquote><p><strong>DuLinkedList.h</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">char</span> ElementType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DuNode</span> <span class="token punctuation">{</span>
    ElementType elementData<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">DuNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">DuNode</span> <span class="token operator">*</span>prior<span class="token punctuation">;</span>
<span class="token punctuation">}</span> DuNode<span class="token punctuation">,</span> <span class="token operator">*</span>DuLinkedList<span class="token punctuation">;</span>

<span class="token comment">/*init the List*/</span>
DuLinkedList <span class="token function">new_DuLinkedList</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the head*/</span>
<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> ElementType e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*Get an Element By index*/</span>
ElementType <span class="token function">get</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">Test1</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>DuLinkedList.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;DuLinkedList.h&quot;</span></span>

DuLinkedList <span class="token function">new_DuLinkedList</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DuLinkedList head <span class="token operator">=</span> <span class="token punctuation">(</span>DuLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DuNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Add an Element to the head*/</span>
<span class="token keyword">void</span> <span class="token function">head_insert</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DuLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>DuLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DuNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存空间失败！in head_insert\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//新节点赋值</span>

    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//新第一节点的后继指针指向旧第一节点</span>
    list<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//原来的第一个节点的前驱指针指向新增的第一个节点</span>
    list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//头节点指向第一节点</span>
    node<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> list<span class="token punctuation">;</span><span class="token comment">//新第一节点的前驱指针指向头接节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-&gt;</span>prior <span class="token operator">==</span> list<span class="token punctuation">)</span>list<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//如果是第一个元素，让头节点的前驱指针指向新节点。形成循环双链表</span>
<span class="token punctuation">}</span>


<span class="token comment">/*Add an Element to the end*/</span>
<span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DuLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>DuLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DuNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存空间失败！in tail_insert\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>

    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> list<span class="token punctuation">;</span><span class="token comment">//新增节点的后继指针指向head</span>
    node<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> list<span class="token operator">-&gt;</span>prior<span class="token punctuation">;</span><span class="token comment">//新增节点的前驱指针指向前驱节点</span>
    list<span class="token operator">-&gt;</span>prior<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//原来的最后节点的后继指针指向新的节点</span>
    list<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//head的后继节点指向最后一个节点</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Insert an Element to the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> ElementType e<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in insert\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    DuLinkedList node <span class="token operator">=</span> <span class="token punctuation">(</span>DuLinkedList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DuNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存空间失败！in tail_insert\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    DuLinkedList p <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//寻找上一个元素</span>
    node<span class="token operator">-&gt;</span>elementData <span class="token operator">=</span> e<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//新增节点的后继指针指向下一个节点</span>
    node<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//新增节点指向上一个节点</span>
    p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//下一个节点的前驱指针指向当前的新增元素</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//上一个节点指向新增节点</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Delete an Element by the Specified location*/</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in delete\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    DuLinkedList p <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>prior<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//前驱节点的后继指针指向被删除指针的后继节点</span>
    p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prior<span class="token punctuation">;</span><span class="token comment">//后继节点的前驱指针指向被删除指针的前驱节点</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;删除元素：%d\\n&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Clear the List*/</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DuLinkedList p <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;删除元素：%d\\n&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    list<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> list<span class="token punctuation">;</span>
    list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*Get an Element By index*/</span>
ElementType <span class="token function">get</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;下标越界！in get\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    DuLinkedList p <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">_Bool</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    DuLinkedList p <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>elementData <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> flag <span class="token operator">?</span> index <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*isEmpty*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> list<span class="token operator">-&gt;</span>next <span class="token operator">==</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*get the size of List*/</span>
<span class="token class-name">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DuLinkedList p <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> list<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;顺序：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DuLinkedList p <span class="token operator">=</span> list<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;倒序：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> list<span class="token operator">-&gt;</span>prior<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>elementData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prior<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Test1</span><span class="token punctuation">(</span>DuLinkedList list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">tail_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">head_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">head_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">head_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">head_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">head_insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> count <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;get its :&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ElementType data <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d-%d&quot;</span><span class="token punctuation">,</span> <span class="token function">getIndexByElement</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;IsEmpty: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;yes&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">clear</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;IsEmpty: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;yes&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DuLinkedList list <span class="token operator">=</span> <span class="token function">new_DuLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Test1</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="三、栈和队列-线性表" tabindex="-1"><a class="header-anchor" href="#三、栈和队列-线性表" aria-hidden="true">#</a> 三、栈和队列（线性表）</h2><h3 id="_1、栈与队列的定义" tabindex="-1"><a class="header-anchor" href="#_1、栈与队列的定义" aria-hidden="true">#</a> 1、栈与队列的定义</h3><blockquote><p>栈与队列：</p><ul><li>栈是限定仅在表尾进行插入和删除操作的线性表。</li><li>队列是只允许在一端进行插入操作、而在另一端进行删除操作的线性表。</li></ul></blockquote><blockquote><p>栈（stack）是限定仅在表尾进行插入和删除操作的线性表。</p><ul><li>我们把允许插入和删除的一端称为栈顶（top），另一端称为栈底（bottom），不含任何数据元素的栈称为空栈。栈又称为后进先出（Last In First Out）的线性表，简称LIFO结构。</li></ul><p>理解栈的定义需要注意：</p><ul><li>首先它是一个线性表，也就是说，栈元素具有线性关系，即前驱后继关系。只不过它是一种特殊的线性表而已。</li><li>定义中说是在线性表的表尾进行插入和删除操作，这里表尾是指栈顶，而不是栈底。</li><li>它的特殊之处就在于限制了这个线性表的插入和删除位置，它始终只在栈顶进行。这也就使得：栈底是固定的，最先进栈的只能在栈底。</li><li>栈的插入操作，叫作进栈，也称压栈、入栈。类似子弹入弹夹。</li><li>栈的删除操作，叫作出栈，也有的叫作弹栈。如同弹夹中的子弹出夹。</li><li>对于栈来讲，理论上线性表的操作特性它都具备，可由于它的特殊性，所以针对它在操作上会有些变化。特别是插入和删除操作，我们改名为push和pop，英文直译的话是压和弹，更容易理解。你就把它当成是弹夹的子弹压入和弹出就好记忆了，我们一般叫进栈和出栈。</li></ul></blockquote><h3 id="_2、栈的顺序存储结构及实现" tabindex="-1"><a class="header-anchor" href="#_2、栈的顺序存储结构及实现" aria-hidden="true">#</a> 2、栈的顺序存储结构及实现</h3><blockquote><p>抽象数据类型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ADT 栈<span class="token punctuation">(</span>stack<span class="token punctuation">)</span>
Data
    同线性表。元素具有相同的类型，相邻元素具有前驱和后继关系。
Operation
    <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token operator">:</span>    初始化操作，建立一个空栈S。
    <span class="token function">DestroyStack</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token operator">:</span> 若栈存在，则销毁它。
    <span class="token function">ClearStack</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token operator">:</span>   将栈清空。
    <span class="token function">StackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token operator">:</span>    若栈为空，返回true，否则返回false。
    <span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token operator">:</span>    若栈存在且非空，用e返回S的栈顶元素。
    <span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token operator">:</span>      若栈S存在，插入新元素e到栈S中并成为栈顶元素。
    <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">,</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token operator">:</span>      删除栈S中栈顶元素，并用e返回其值。
    <span class="token function">StackLength</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token operator">:</span>   返回栈S的元素个数。
endADT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_3、顺序存储结构可动态扩容且具有栈顶指针和栈底指针的栈实现" tabindex="-1"><a class="header-anchor" href="#_3、顺序存储结构可动态扩容且具有栈顶指针和栈底指针的栈实现" aria-hidden="true">#</a> 3、顺序存储结构可动态扩容且具有栈顶指针和栈底指针的栈实现</h3><blockquote><p><strong>头文件</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STACK_DEFAULT_SIZE</span> <span class="token expression"><span class="token number">20</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STACK_INCREMENT</span> <span class="token expression"><span class="token number">10</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> ElementType<span class="token punctuation">;</span>
<span class="token comment">/**
 * 这里定义了一个顺序存储结构的栈，它包含了三个元素：base、top、size。
 * base：指向栈底的指针变量
 * top：指向栈顶的指针变量
 * size：当前栈的最大容量
 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ElementType <span class="token operator">*</span>base<span class="token punctuation">;</span>
    ElementType <span class="token operator">*</span>top<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Stack<span class="token punctuation">,</span> <span class="token operator">*</span>PStack<span class="token punctuation">;</span>

PStack <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若栈S存在，插入新元素e到栈S中并成为栈顶元素。*/</span>
<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*删除栈S中栈顶元素，并用e返回其值。*/</span>
ElementType <span class="token function">pop</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若栈存在且非空，用e返回S的栈顶元素。*/</span>
ElementType <span class="token function">get_top</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若栈存在，则销毁它。*/</span>
<span class="token keyword">void</span> <span class="token function">destroy_stack</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*将栈清空。*/</span>
<span class="token keyword">void</span> <span class="token function">clear_stack</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


ElementType <span class="token function">binary_to_decimal</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

ElementType <span class="token function">binary_to_octal</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">binary_hexadecimal</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>源文件</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Stack1.h&quot;</span></span>

PStack <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PStack stack <span class="token operator">=</span> <span class="token punctuation">(</span>PStack<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>base <span class="token operator">=</span> <span class="token punctuation">(</span>ElementType <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">)</span> <span class="token operator">*</span> STACK_DEFAULT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>base <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存空间失败！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>base<span class="token punctuation">;</span><span class="token comment">//最开始栈底和栈顶一样</span>
    stack<span class="token operator">-&gt;</span>size <span class="token operator">=</span> STACK_DEFAULT_SIZE<span class="token punctuation">;</span>
    <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若栈S存在，插入新元素e到栈S中并成为栈顶元素。*/</span>
<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">-</span> stack<span class="token operator">-&gt;</span>base<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> stack<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stack<span class="token operator">-&gt;</span>base <span class="token operator">=</span> <span class="token punctuation">(</span>ElementType <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">realloc</span><span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>base<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">)</span> <span class="token operator">*</span>
                                                           <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">+</span> STACK_INCREMENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//扩容 重新分配空间，并自动释放旧内存块</span>
        stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>base <span class="token operator">+</span> stack<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span><span class="token comment">//设置栈顶</span>
        stack<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> STACK_INCREMENT<span class="token punctuation">;</span><span class="token comment">//设置容量</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top<span class="token punctuation">)</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//设置栈顶数据</span>
    stack<span class="token operator">-&gt;</span>top<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//栈顶指向数据的上的一块未使用的空间</span>
<span class="token punctuation">}</span>

<span class="token comment">/*删除栈S中栈顶元素，并用e返回其值。*/</span>
ElementType <span class="token function">pop</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//因为栈顶指向数据的上的一块未使用的空间，所以这是合理的</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> stack<span class="token operator">-&gt;</span>base<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token operator">--</span>stack<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若栈存在且非空，用e返回S的栈顶元素。*/</span>
ElementType <span class="token function">get_top</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> stack<span class="token operator">-&gt;</span>base<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">-</span> stack<span class="token operator">-&gt;</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指针相减，得到他们有几个元素，前提是他们的类型必须相等（不能一个是整形，一个字符型）（两个指针是不能相加的）</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若栈存在，则销毁它。*/</span>
<span class="token keyword">void</span> <span class="token function">destroy_stack</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> stack<span class="token operator">-&gt;</span>base <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*将栈清空。*/</span>
<span class="token keyword">void</span> <span class="token function">clear_stack</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>base<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> stack <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> stack<span class="token operator">-&gt;</span>base <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> stack<span class="token operator">-&gt;</span>base<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PStack stack <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;get_top: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">get_top</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;stack_length: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ElementType top <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">destroy_stack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_4、顺序存储结构数组实现栈" tabindex="-1"><a class="header-anchor" href="#_4、顺序存储结构数组实现栈" aria-hidden="true">#</a> 4、顺序存储结构数组实现栈</h3><blockquote><p><strong>头文件</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STACK_DEFAULT_SIZE</span> <span class="token expression"><span class="token number">50</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> ElementType<span class="token punctuation">;</span>
<span class="token comment">/**
 * data：数据元素
 * top：栈顶位置，也就是数据所在位置，当没有数据时 top为-1
 * size：栈的最大容量
 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ElementType data<span class="token punctuation">[</span>STACK_DEFAULT_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Stack<span class="token punctuation">,</span> <span class="token operator">*</span>PStack<span class="token punctuation">;</span>

PStack <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若栈S存在，插入新元素e到栈S中并成为栈顶元素。*/</span>
<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*删除栈S中栈顶元素，并用e返回其值。*/</span>
ElementType <span class="token function">pop</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若栈存在且非空，用e返回S的栈顶元素。*/</span>
ElementType <span class="token function">get_top</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若栈存在，则销毁它。*/</span>
<span class="token keyword">void</span> <span class="token function">destroy_stack</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*将栈清空。*/</span>
<span class="token keyword">void</span> <span class="token function">clear_stack</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>源文件</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Stack2.h&quot;</span></span>

PStack <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PStack stack <span class="token operator">=</span> <span class="token punctuation">(</span>PStack<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//最开始栈底和栈顶一样</span>
    stack<span class="token operator">-&gt;</span>size <span class="token operator">=</span> STACK_DEFAULT_SIZE<span class="token punctuation">;</span>
    <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若栈S存在，插入新元素e到栈S中并成为栈顶元素。*/</span>
<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> stack<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;栈空间已🈵️！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">++</span>stack<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*删除栈S中栈顶元素，并用e返回其值。*/</span>
ElementType <span class="token function">pop</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若栈存在且非空，用e返回S的栈顶元素。*/</span>
ElementType <span class="token function">get_top</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若栈存在，则销毁它。*/</span>
<span class="token keyword">void</span> <span class="token function">destroy_stack</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*将栈清空。*/</span>
<span class="token keyword">void</span> <span class="token function">clear_stack</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> stack <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PStack stack <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;get_top: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">get_top</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;stack_length: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ElementType top <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;stack_length: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">clear_stack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">destroy_stack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_5、栈的链式存储结构及实现" tabindex="-1"><a class="header-anchor" href="#_5、栈的链式存储结构及实现" aria-hidden="true">#</a> 5、栈的链式存储结构及实现</h3><blockquote><p>链式存储结构栈也称栈链</p><ul><li>对比一下顺序栈与链栈，它们在时间复杂度上是一样的，均为O(1)。</li><li>对于空间性能，顺序栈需要事先确定一个固定的长度，可能会存在内存空间浪费的问题，但它的优势是存取时定位很方便，而链栈则要求每个元素都有指针域，这同时也增加了一些内存开销，但对于栈的长度无限制。</li><li>所以它们的区别和线性表中讨论的一样，如果栈的使用过程中元素变化不可预料，有时很小，有时非常大，那么最好是用链栈，反之，如果它的变化在可控范围内，建议使用顺序栈会更好一些。</li></ul></blockquote><blockquote><p><strong>头文件</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> ElementType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token punctuation">{</span>
    ElementType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> StackNode<span class="token punctuation">,</span> <span class="token operator">*</span>StackNodePtr<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkStack</span> <span class="token punctuation">{</span>
    StackNodePtr top<span class="token punctuation">;</span><span class="token comment">//top指针</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment">//栈元素计数器</span>
<span class="token punctuation">}</span> LinkStack<span class="token punctuation">,</span> <span class="token operator">*</span>LinkedStack<span class="token punctuation">;</span>

LinkedStack <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若栈S存在，插入新元素e到栈S中并成为栈顶元素。*/</span>
<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*删除栈S中栈顶元素，并用e返回其值。*/</span>
ElementType <span class="token function">pop</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若栈存在且非空，用e返回S的栈顶元素。*/</span>
ElementType <span class="token function">get_top</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若栈存在，则销毁它。*/</span>
<span class="token keyword">void</span> <span class="token function">destroy_stack</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*将栈清空。*/</span>
<span class="token keyword">void</span> <span class="token function">clear_stack</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>源文件</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Stack3.h&quot;</span></span>

LinkedStack <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkedStack stack <span class="token operator">=</span> <span class="token punctuation">(</span>LinkedStack<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;分配内存空间失败！in new_Stack\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若栈S存在，插入新元素e到栈S中并成为栈顶元素。*/</span>
<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    StackNodePtr node <span class="token operator">=</span> <span class="token punctuation">(</span>StackNodePtr<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>StackNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;分配内存空间失败！in push\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> node<span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*删除栈S中栈顶元素，并用e返回其值。*/</span>
ElementType <span class="token function">pop</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    StackNodePtr p <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    ElementType data <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若栈存在且非空，用e返回S的栈顶元素。*/</span>
ElementType <span class="token function">get_top</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>top<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若栈存在，则销毁它。*/</span>
<span class="token keyword">void</span> <span class="token function">destroy_stack</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    StackNodePtr p <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*将栈清空。*/</span>
<span class="token keyword">void</span> <span class="token function">clear_stack</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    StackNodePtr p <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    stack<span class="token operator">-&gt;</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>LinkedStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> stack <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkedStack stack <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;get_top: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">get_top</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;stack_length: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ElementType top <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d&quot;</span><span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">destroy_stack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_6、栈实现算法" tabindex="-1"><a class="header-anchor" href="#_6、栈实现算法" aria-hidden="true">#</a> 6、栈实现算法</h3><h5 id="括号匹配算法" tabindex="-1"><a class="header-anchor" href="#括号匹配算法" aria-hidden="true">#</a> 括号匹配算法</h5><blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * 括号匹配
 * 1、将左边指定的括号存入到栈中
 * 2、当出现右边的括号时，利用栈的后进先出原理进行匹配
 * 3、栈顶元素必须和当前对比的右边括号进行匹配
 * 4、栈顶和当前对比的右边括号匹配，则从栈中弹栈
 * 5、栈顶和当前对比的右边括号则不匹配，结束匹配
 * 6、字符串对比结束了，如果栈内的左边括号未被完全弹出，也代表不匹配
 */</span>
<span class="token keyword">void</span> <span class="token function">brackets_match</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PStack stack <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入您要匹配的字符：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;{&#39;</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;[&#39;</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_top</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;{&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;括号不匹配！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;]&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_top</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;括号不匹配！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_top</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;括号不匹配！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;括号匹配&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;括号不匹配&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="二进制转十进制" tabindex="-1"><a class="header-anchor" href="#二进制转十进制" aria-hidden="true">#</a> 二进制转十进制</h5><blockquote><p><strong>任何数的0次方都是1</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * 二进制转十进制
 * 公式：位乘以2^(n-1),如：10100 = 1*2^0 + 0*2^1 + 0*2^2 + 1*2^3 + 0*2^4 = 18
 */</span>
ElementType <span class="token function">binary_to_decimal</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ElementType result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ElementType data <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">+=</span> data <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="二进制转八进制" tabindex="-1"><a class="header-anchor" href="#二进制转八进制" aria-hidden="true">#</a> 二进制转八进制</h5><blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * 二进制转八进制
 * 111刚好=8
 * 公式：10010 从底位开始 按每三位二进制转换成 八进制 在将他们从高位分别 x*10^(n-1)，如：((10 = 2)*10)+((010 = 2)*1) = 22
 */</span>
ElementType <span class="token function">binary_to_octal</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PStack octal_stack <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//按三位二进制转十六进制</span>
    ElementType octal_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">get_top</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            octal_num <span class="token operator">+=</span> data <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">push</span><span class="token punctuation">(</span>octal_stack<span class="token punctuation">,</span> octal_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        octal_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//八进制组成</span>
    ElementType result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>octal_stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> power <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">+=</span> <span class="token function">pop</span><span class="token punctuation">(</span>octal_stack<span class="token punctuation">)</span> <span class="token operator">*</span> power<span class="token punctuation">;</span>
        power <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="二进制转十六进制" tabindex="-1"><a class="header-anchor" href="#二进制转十六进制" aria-hidden="true">#</a> 二进制转十六进制</h5><blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * 二进制转十六进制
 * 1111刚好等于16=F
 * 公式：10010 从底位开始 按每四位二进制转换成 十六进制 在将他们从高位分别 x*10^(n-1)，如：((1 = 1)*10) = +((0010 = 2)*1) = 12
 */</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">binary_hexadecimal</span><span class="token punctuation">(</span>PStack stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PStack hex_stack <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//按四位二进制转十六进制</span>
    ElementType hex_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">get_top</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            hex_num <span class="token operator">+=</span> data <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">push</span><span class="token punctuation">(</span>hex_stack<span class="token punctuation">,</span> hex_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        hex_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//十六进制拼接</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>hex_stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        data <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>hex_stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> hex<span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>
                hex <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>
                hex <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>
                hex <span class="token operator">=</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">13</span><span class="token operator">:</span>
                hex <span class="token operator">=</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">14</span><span class="token operator">:</span>
                hex <span class="token operator">=</span> <span class="token char">&#39;E&#39;</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">15</span><span class="token operator">:</span>
                hex <span class="token operator">=</span> <span class="token char">&#39;F&#39;</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                hex <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>result <span class="token operator">+</span> i<span class="token punctuation">,</span> hex<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="括号匹配与二进制转换应用" tabindex="-1"><a class="header-anchor" href="#括号匹配与二进制转换应用" aria-hidden="true">#</a> 括号匹配与二进制转换应用</h5><blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PStack binary1 <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PStack binary2 <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PStack binary3 <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入您要转换的二进制：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">push</span><span class="token punctuation">(</span>binary1<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">push</span><span class="token punctuation">(</span>binary2<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">push</span><span class="token punctuation">(</span>binary3<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ElementType decimal <span class="token operator">=</span> <span class="token function">binary_to_decimal</span><span class="token punctuation">(</span>binary1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ElementType octal <span class="token operator">=</span> <span class="token function">binary_to_octal</span><span class="token punctuation">(</span>binary2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>hexadecimal <span class="token operator">=</span> <span class="token function">binary_hexadecimal</span><span class="token punctuation">(</span>binary3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Binary to octal: %d\\n&quot;</span><span class="token punctuation">,</span> octal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Binary to decimal: %d\\n&quot;</span><span class="token punctuation">,</span> decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Binary to hexadecimal: %s\\n&quot;</span><span class="token punctuation">,</span> hexadecimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="逆波兰表达式" tabindex="-1"><a class="header-anchor" href="#逆波兰表达式" aria-hidden="true">#</a> 逆波兰表达式</h5><blockquote><p>逆波兰表达式又叫做后缀表达式。逆波兰表示法是波兰逻辑学家J・卢卡西维兹(J・ Lukasiewicz)于1929年首先提出的一种表达式的表示方法。后来,人们就把用这种表示法写出的表达式称作“逆波兰表达式”(RPN)。</p><ul><li>运算符在两个数之前叫做：“前缀表达式”，在两个数中间叫：“中缀表达式”，在两个数后面也叫：“后缀表达式”。</li><li>如：(1 - 2) * (4 + 5)，如果用逆波兰表达式(后缀表达式)表示法：1 2 - 4 5 + *</li><li>中缀表达式转逆波兰表达式(后缀表达式) <ul><li>a + b ===&gt; a b +</li><li>a + (b - c) ===&gt; a b c - +</li><li>a + (b - c) * d ===&gt; a b c - d * +</li><li>(a - b) * (c + d) ===&gt; a b - c d + *</li><li>a + (b - c) * d + e / f ===&gt; a b c - d * e f / + +</li></ul></li></ul></blockquote><h5 id="逆波兰计算器" tabindex="-1"><a class="header-anchor" href="#逆波兰计算器" aria-hidden="true">#</a> 逆波兰计算器</h5><blockquote><p>计算逆波兰表达式(后缀表达式)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> PStack stack <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    <span class="token keyword">char</span> num_str<span class="token punctuation">[</span>DEFAULT_NUM_BUFFER<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//一个数的字符形式</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//用于确定字符形式的运算数个数</span>
    ElementType d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token comment">//d用于存储字符形式的数转换成浮点数后的结果，代表左边的运算数，b代表右边的运算数</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请按照逆波兰表达式格式输入数据，数与数与运算符之间用空格隔开：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取一个字符</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果接收到回车建，结束循环</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">&gt;=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断输入是否为数字或者小数点</span>
            num_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span><span class="token comment">//将字符形式的数字存入缓冲区</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//加1</span>
            num_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span><span class="token comment">//存入字符结束符，atof根据结束符确定转换到哪里</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//限制一个运算数的个数</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;数据过大！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取下一个字符</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果等于空格，代表一个整体的运算数识别完毕</span>
                d <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>num_str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换成浮点数</span>
                <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入栈里面</span>
                i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//重新计数</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//如果是运算符，从栈中弹出两个运算数进行对应运算</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token char">&#39;+&#39;</span><span class="token operator">:</span>
                a <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                b <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> b <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意了，先弹出的是操作数，后弹出的是被操作数</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;-&#39;</span><span class="token operator">:</span>
                a <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                b <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意了，先弹出的是操作数，后弹出的是被操作数</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;*&#39;</span><span class="token operator">:</span>
                a <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                b <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> b <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意了，先弹出的是操作数，后弹出的是被操作数</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;/&#39;</span><span class="token operator">:</span>
                a <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                b <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> b <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意了，先弹出的是操作数，后弹出的是被操作数</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取下一个字符</span>
    <span class="token punctuation">}</span>
    d <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Sum -&gt; %f&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="中缀表达式转逆波兰表达式-后缀表达式-并计算" tabindex="-1"><a class="header-anchor" href="#中缀表达式转逆波兰表达式-后缀表达式-并计算" aria-hidden="true">#</a> 中缀表达式转逆波兰表达式(后缀表达式)并计算</h5><blockquote><p><strong>中缀表达式转后缀表达式</strong></p><ol><li>如果遇数字直接输出</li><li>如果遇到“(”、“*”、“/”，入栈</li><li>如果遇到“+”、“-”，栈顶是否为乘除，如果是让“*”、“/”出栈</li><li>如果遇到“)”，找到最近的做括号，并按照后进先出顺序依次输出运算符</li><li>最后如果栈中还有运算符，按照后进先出顺序依次输出</li><li>注意：整体数或者运算符之间，必须有空格，因为后缀表达式依赖空格判断数是否为一个整体</li></ol><p><strong>逆波兰计算器</strong></p><ol><li>将整体数字符串转成整形或浮点型，并入栈</li><li>如果是合法的后缀表达式，那么里面栈里面一定有两个以上的数。</li><li>遇到运算符，将最近的两个运算完后入栈</li><li>直到最后，栈中只剩下整个后缀表达式的计算结果</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">infix_to_suffix</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入中缀表达式公式：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PStack stack <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用于存储后缀表达式</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//遍历每一个字符</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是数字或者小数点</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//输出属于一个整体的数</span>
                result<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//运行到这里代表整体数已经输出完</span>
            result<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span><span class="token comment">//输出空格，用于后缀表达式计算器区分数是否为一个整体</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;+&#39;</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是加减</span>
            <span class="token keyword">char</span> symbol <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token function">get_top</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取栈顶符号</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>symbol <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span> <span class="token operator">||</span> symbol <span class="token operator">==</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是乘除，要遵守先乘除后加减原则，输出</span>
                <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                result<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> symbol<span class="token punctuation">;</span>
                result<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span><span class="token comment">//输出空格隔开</span>
            <span class="token punctuation">}</span>
            <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将加减入栈</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;/&#39;</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是加减和做左括号，入栈</span>
            <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是右括号，</span>
            <span class="token keyword">char</span> symbol <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出一个最近入栈的运算符</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>symbol <span class="token operator">!=</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//直到找到最近的一个左括号</span>
                result<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> symbol<span class="token punctuation">;</span><span class="token comment">//将两个括号之间的运算符按后进先出全部输出</span>
                result<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span><span class="token comment">//输出空格隔开</span>
                symbol <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//迭代</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    len <span class="token operator">=</span> <span class="token function">stack_length</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将栈里的符号，按后进先出顺序依次输出</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    result<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span><span class="token comment">//再最后补一个结束符，-1是因为上面会多出一个字符</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ElementType <span class="token function">anti_poland_calc</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PStack stack <span class="token operator">=</span> <span class="token function">new_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> num_str<span class="token punctuation">[</span>DEFAULT_NUM_BUFFER<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用于存储临时字符形式的整体数</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//临时字符形式的整体数截止位置</span>
    ElementType num<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span><span class="token comment">//整体数转成浮点数的临时变量，被操作数，操作数</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果不是字符串结束符</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是数字或者小数点</span>
            num_str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存入整体数缓冲区</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//指向临时整体数位置+1</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//后缀表达式位置+1</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是空格代表整体数结束了</span>
                num_str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span><span class="token comment">//设置结束符，字符床转浮点数需要有个结束符</span>
                num <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>num_str<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入栈</span>
                j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//重新计数</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//如果是运算符，执行对应的操作</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token char">&#39;+&#39;</span><span class="token operator">:</span>
                right <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作数</span>
                left <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//被操作数</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f + %f\\n&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;-&#39;</span><span class="token operator">:</span>
                right <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                left <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f - %f\\n&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> left <span class="token operator">-</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;*&#39;</span><span class="token operator">:</span>
                right <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                left <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f * %f\\n&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> left <span class="token operator">*</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;/&#39;</span><span class="token operator">:</span>
                right <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                left <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f / %f\\n&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> left <span class="token operator">/</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//继续匹配下一个</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ElementType result <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运算完成之后，栈里面只剩下结果了</span>
    <span class="token function">free</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放传过来的字符床</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token comment">//返回</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>exp <span class="token operator">=</span> <span class="token function">infix_to_suffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ElementType result <span class="token operator">=</span> <span class="token function">anti_poland_calc</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;结果：%f\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_7、队列定义" tabindex="-1"><a class="header-anchor" href="#_7、队列定义" aria-hidden="true">#</a> 7、队列定义</h3><blockquote><p><strong>队列的定义：</strong></p><ul><li><p>队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</p></li><li><p>队列是一种先进先出（First In First Out）的线性表，简称FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。假设队列是q=(a1,a2,......,an)，那么a1就是队头元素，而an是队尾元素。这样我们就可以删除时，总是从a1开始，而插入时，列在最后。</p></li><li><p>与栈相同的是，队列也是一种重要的线性结构，实现一个队列同样需要顺序表或链表作为基础。</p><table><thead><tr><th>出队列</th><th>A1</th><th>A2</th><th>A3</th><th>A4</th><th>A5</th><th>A6</th><th>...</th><th>An</th><th>入队列</th></tr></thead><tbody><tr><td></td><td>队头</td><td></td><td></td><td></td><td></td><td></td><td></td><td>队尾</td><td></td></tr></tbody></table></li></ul><p><strong>队列的抽象数据类型：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ADT 队列<span class="token punctuation">(</span>Queue<span class="token punctuation">)</span>
Data
    同线性表。元素具有相同的类型，相邻元素具有前驱和后继关系。
Operation
    <span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token operator">:</span>    初始化操作，建立一个空队列Q。
    <span class="token function">DestroyQueue</span><span class="token punctuation">(</span><span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token operator">:</span> 若队列Q存在，则销毁它。
    <span class="token function">ClearQueue</span><span class="token punctuation">(</span><span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token operator">:</span>   将队列Q清空。
    <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token operator">:</span>    若队列Q为空，返回true，否则返回false。
    <span class="token function">GetHead</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token operator">:</span>   若队列Q存在且非空，用e返回队列Q的队头元素。
    <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">*</span>Q<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token operator">:</span>   若队列Q存在，插入新元素e到队列Q中并成为队尾元素。
    <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">*</span>Q<span class="token punctuation">,</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token operator">:</span>  删除队列Q中队头元素，并用e返回其值。
    <span class="token function">QueueLength</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token operator">:</span>   返回队列Q的元素个数
endADT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_8、队列的链式存储结构" tabindex="-1"><a class="header-anchor" href="#_8、队列的链式存储结构" aria-hidden="true">#</a> 8、队列的链式存储结构</h3><blockquote><p><strong>队列的链式存储结构</strong></p><ul><li>队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已，我们把它简称为链队列。为了操作上的方便，我们将队头指针指向链队列的头结点，而队尾指针指向终端结点。(注：头节点不是必须的，但为了操作统一、方便，所以加上了)</li><li>空队列时，front和rear都指向头结点。</li></ul></blockquote><blockquote><p><strong>头文件</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">char</span> ElementType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token punctuation">{</span>
    ElementType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//后继指针</span>
<span class="token punctuation">}</span> QNode<span class="token punctuation">,</span> <span class="token operator">*</span>QNodePtr<span class="token punctuation">;</span>

<span class="token comment">//允许插入的一端称为队尾，允许删除的一端称为队头。</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    QNodePtr front<span class="token punctuation">;</span><span class="token comment">//队头</span>
    QNodePtr rear<span class="token punctuation">;</span><span class="token comment">//队尾</span>
<span class="token punctuation">}</span> LQueue<span class="token punctuation">,</span> <span class="token operator">*</span>LinkQueue<span class="token punctuation">;</span>

<span class="token comment">/*初始化操作，建立一个空队列Q。*/</span>
LinkQueue <span class="token function">new_Queue</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若队列Q存在，则销毁它。*/</span>
<span class="token keyword">void</span> <span class="token function">DestroyQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*将队列Q清空。*/</span>
<span class="token keyword">void</span> <span class="token function">ClearQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若队列Q为空，返回true，否则返回false。*/</span>
<span class="token keyword">_Bool</span> <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若队列Q存在且非空，用e返回队列Q的队头元素。*/</span>
<span class="token keyword">void</span> <span class="token function">GetHead</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">,</span> ElementType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若队列Q存在，插入新元素e到队列Q中并成为队尾元素。*/</span>
<span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*  删除队列Q中队头元素，并用e返回其值。*/</span>
<span class="token keyword">void</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">,</span> ElementType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*返回队列Q的元素个数*/</span>
<span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>源文件</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//</span>
<span class="token comment">// Created by 刘玉培 on 2022/3/9.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Queue1.h&quot;</span></span>

<span class="token comment">/*初始化操作，建立一个空队列Q。*/</span>
LinkQueue <span class="token function">new_Queue</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkQueue queue <span class="token operator">=</span> <span class="token punctuation">(</span>LinkQueue<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;分配内存空间失败！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    QNodePtr node <span class="token operator">=</span> <span class="token punctuation">(</span>QNodePtr<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;分配内存空间失败！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//头节点指向NULL</span>
    queue<span class="token operator">-&gt;</span>front <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//队头，空队列时都指向头节点</span>
    queue<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//队尾，空队列时都指向头节点</span>
    <span class="token keyword">return</span> queue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若队列Q存在，插入新元素e到队列Q中并成为队尾元素。*/</span>
<span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    QNodePtr node <span class="token operator">=</span> <span class="token punctuation">(</span>QNodePtr<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//无论是否空队列，因为空队列的时候队头队尾都指向头节点，队尾的后继元素指向新增节点</span>
    queue<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment">//队尾指向新节点</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若队列Q存在且非空，用e返回队列Q的队头元素。*/</span>
<span class="token keyword">void</span> <span class="token function">GetHead</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">,</span> ElementType <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>e <span class="token operator">=</span> queue <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> queue<span class="token operator">-&gt;</span>front <span class="token operator">!=</span> queue<span class="token operator">-&gt;</span>rear <span class="token operator">?</span> queue<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>data <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*  删除队列Q中队头元素，并用e返回其值。*/</span>
<span class="token keyword">void</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">,</span> ElementType <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> queue<span class="token operator">-&gt;</span>front <span class="token operator">==</span> queue<span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    QNodePtr node <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//第一个节点</span>
    <span class="token operator">*</span>e <span class="token operator">=</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//头节点指向第一个节点的后继元素。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>rear <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果出列的是队尾指针</span>
        queue<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span><span class="token comment">//它们都指向头节点</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*返回队列Q的元素个数*/</span>
<span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>QNodePtr p <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若队列Q为空，返回true，否则返回false。*/</span>
<span class="token keyword">_Bool</span> <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> queue <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> queue<span class="token operator">-&gt;</span>front <span class="token operator">==</span> queue<span class="token operator">-&gt;</span>rear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*将队列Q清空。*/</span>
<span class="token keyword">void</span> <span class="token function">ClearQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    QNodePtr p <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//一直释放到NULL</span>
        temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    queue<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//设置第一个元素为NULL</span>
    queue<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span><span class="token comment">//空队列队头和队尾都指向头节点</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若队列Q存在，则销毁它。*/</span>
<span class="token keyword">void</span> <span class="token function">DestroyQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkQueue queue<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>front<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果队头不为空，队尾的都后继元素为NULL</span>
        queue<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//这里的队尾queue-&gt;rear只作为暂时变量，存储下一个元素</span>
        <span class="token function">free</span><span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>front<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环释放队头</span>
        queue<span class="token operator">-&gt;</span>front <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>rear<span class="token punctuation">;</span><span class="token comment">//队头指向下一个元素</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LinkQueue queue <span class="token operator">=</span> <span class="token function">new_Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">EnQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ElementType e<span class="token punctuation">;</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue length : %d\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetHead</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue head   :%c\\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">DeQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue DeQueue  :%c\\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">ClearQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    length <span class="token operator">=</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue length : %d\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">DestroyQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue DestroyQueue:%d&quot;</span><span class="token punctuation">,</span> queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_9、循环队列" tabindex="-1"><a class="header-anchor" href="#_9、循环队列" aria-hidden="true">#</a> 9、循环队列</h3><blockquote><p>线性表有顺序存储和链式存储，栈是线性表，所以有这两种存储方式。同样，队列作为一种特殊的线性表，也同样存在这两种存储方式。</p></blockquote><h5 id="队列顺序存储的" tabindex="-1"><a class="header-anchor" href="#队列顺序存储的" aria-hidden="true">#</a> 队列顺序存储的</h5><blockquote><p><strong>队列顺序存储的不足</strong></p><ul><li><p>我们假设一个队列有n个元素，则顺序存储的队列需建立一个大于n的数组，并把队列的所有元素存储在数组的前n个单元，数组下标为0的一端即是队头。所谓的入队列操作，其实就是在队尾追加一个元素，不需要移动任何元素，因此时间复杂度为O(1)。</p></li><li><p>与栈不同的是，队列元素的出列是在队头，即下标为0的位置，那也就意味着，队列中的所有元素都得向前移动，以保证队列的队头，也就是下标为0的位置不为空，此时时间复杂度为O(n)。</p></li><li><p>为了避免当只有一个元素时，队头和队尾重合使处理变得麻烦，所以引入两个指针，front指针指向队头元素，rear指针指向队尾元素的下一个位置，这样当front等于rear时，队列是空的。</p></li><li><p>假设数组的长度是5，初始状态，front与rear指针均指向下标为0的位置。然后入队a1、a2、a3、a4，front指针依然指向下标为0位置，而rear指针指向下标为4的位置。</p></li><li><p>出队a1、a2，则front指针指向下标为2的位置，rear不变，再入队a5，此时front指针不变，rear指针移动到数组之外。</p></li><li><p>目前如果接着入队的话，因数组末尾元素已经占用，再向后加，就会产生数组越界的错误，可实际上，我们的队列在下标为0和1的地方还是空闲的。我们把这种现象叫做“假溢出”。</p></li></ul></blockquote><h5 id="循环队列的定义" tabindex="-1"><a class="header-anchor" href="#循环队列的定义" aria-hidden="true">#</a> 循环队列的定义</h5><blockquote><p>所以解决假溢出的办法就是后面满了，就再从头开始，也就是头尾相接的循环。我们把队列的这种头尾相接的顺序存储结构称为循环队列。（注意：在实际内存中不可能存在环形存储区，我们只是用循序表模拟出来的逻辑上的循环）。</p><ul><li>循环队列只需要灵活改变front或rear指针即可，也即是让front或rear指针不断加1，即使超出了地址范围，也会自动从头开始。我们可以采取 取模运算（也就是取余），它取到的值永远都不会大于除数。 <ul><li>(front + 1) % QueueSize</li><li>(rear + 1) % QueueSize</li></ul></li></ul></blockquote><p><strong>代码实现</strong></p><blockquote><p><strong>头文件</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> ElementType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ElementType <span class="token operator">*</span>base<span class="token punctuation">;</span><span class="token comment">//用于存放分配的内存的基地址，用指针的好处是方便动态扩容。也可以使用普通数组</span>
    <span class="token keyword">int</span> front<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rear<span class="token punctuation">;</span>

<span class="token punctuation">}</span> Queue<span class="token punctuation">,</span> <span class="token operator">*</span>CycleQueue<span class="token punctuation">;</span>

<span class="token comment">/*初始化操作，建立一个空队列Q。*/</span>
CycleQueue <span class="token function">new_Queue</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若队列Q存在，则销毁它。*/</span>
<span class="token keyword">void</span> <span class="token function">DestroyQueue</span><span class="token punctuation">(</span>CycleQueue <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*将队列Q清空。*/</span>
<span class="token keyword">void</span> <span class="token function">ClearQueue</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若队列Q为空，返回true，否则返回false。*/</span>
<span class="token keyword">_Bool</span> <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若队列Q存在且非空，用e返回队列Q的队头元素。*/</span>
<span class="token keyword">void</span> <span class="token function">GetHead</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">,</span> ElementType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*若队列Q存在，插入新元素e到队列Q中并成为队尾元素。*/</span>
<span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*  删除队列Q中队头元素，并用e返回其值。*/</span>
<span class="token keyword">void</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">,</span> ElementType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*返回队列Q的元素个数*/</span>
<span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>源文件</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//</span>
<span class="token comment">// Created by 刘玉培 on 2022/3/9.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Queue2.h&quot;</span></span>

<span class="token comment">/*初始化操作，建立一个空队列Q。*/</span>
CycleQueue <span class="token function">new_Queue</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CycleQueue queue <span class="token operator">=</span> <span class="token punctuation">(</span>CycleQueue<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;分配内存空间失败！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    queue<span class="token operator">-&gt;</span>base <span class="token operator">=</span> <span class="token punctuation">(</span>ElementType <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">)</span> <span class="token operator">*</span> MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>base <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;分配内存空间失败！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    queue<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> queue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若队列Q存在，插入新元素e到队列Q中并成为队尾元素。*/</span>
<span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">,</span> ElementType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE <span class="token operator">==</span> queue<span class="token operator">-&gt;</span>front<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//它们碰撞表示数组满了</span>
    queue<span class="token operator">-&gt;</span>base<span class="token punctuation">[</span>queue<span class="token operator">-&gt;</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//rear指向的是最后一个元素的下一个位置，添加没毛病</span>
    queue<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span><span class="token comment">//指向新的下个位置</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若队列Q存在且非空，用e返回队列Q的队头元素。*/</span>
<span class="token keyword">void</span> <span class="token function">GetHead</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">,</span> ElementType <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>e <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>front <span class="token operator">!=</span> queue<span class="token operator">-&gt;</span>rear <span class="token operator">?</span> queue<span class="token operator">-&gt;</span>base<span class="token punctuation">[</span>queue<span class="token operator">-&gt;</span>front<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*  删除队列Q中队头元素，并用e返回其值。*/</span>
<span class="token keyword">void</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">,</span> ElementType <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>front <span class="token operator">==</span> queue<span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//队列为空</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>e <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>base<span class="token punctuation">[</span>queue<span class="token operator">-&gt;</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//返回队头数据</span>
    queue<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span><span class="token comment">//队头变成原来队头的后继元素</span>
<span class="token punctuation">}</span>

<span class="token comment">/*返回队列Q的元素个数*/</span>
<span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>rear <span class="token operator">-</span> queue<span class="token operator">-&gt;</span>front <span class="token operator">+</span> MAX_SIZE<span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span><span class="token comment">//公式</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若队列Q为空，返回true，否则返回false。*/</span>
<span class="token keyword">_Bool</span> <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> queue <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> queue<span class="token operator">-&gt;</span>front <span class="token operator">==</span> queue<span class="token operator">-&gt;</span>rear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*将队列Q清空。*/</span>
<span class="token keyword">void</span> <span class="token function">ClearQueue</span><span class="token punctuation">(</span>CycleQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*若队列Q存在，则销毁它。*/</span>
<span class="token keyword">void</span> <span class="token function">DestroyQueue</span><span class="token punctuation">(</span>CycleQueue <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     *
     * 作用是从front开始根据rear，求出范围max以内的数，当rear&gt;4会自动循环从0开始，如果他们碰撞表示数组满了
     * (rear + 1)范围是0～4，rear是0～5。很明显前者才符合数组下标
     *
     * rear==0时，余4
     * rear==1时，余3
     * rear==2时，余2
     * rear==3时，余1
     * rear==4时，余0
     */</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> max<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;循环索引：%d\\n&quot;</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    CycleQueue queue <span class="token operator">=</span> <span class="token function">new_Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">EnQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ElementType e<span class="token punctuation">;</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue length : %d\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetHead</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue head   :%c\\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">DeQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue DeQueue  :%c\\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">ClearQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    length <span class="token operator">=</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue length : %d\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">DestroyQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue DestroyQueue:%d&quot;</span><span class="token punctuation">,</span> queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="四、递归和分治思想" tabindex="-1"><a class="header-anchor" href="#四、递归和分治思想" aria-hidden="true">#</a> 四、递归和分治思想</h2><p><strong>递归的定义</strong></p>`,99),j={href:"https://baike.baidu.com/item/%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},C={href:"https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://baike.baidu.com/item/%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},B={href:"https://baike.baidu.com/item/%E8%AF%AD%E5%8F%A5",target:"_blank",rel:"noopener noreferrer"},U={href:"https://baike.baidu.com/item/%E6%97%A0%E9%99%90%E9%9B%86%E5%90%88",target:"_blank",rel:"noopener noreferrer"},D=p(`<h3 id="_1、递归应用" tabindex="-1"><a class="header-anchor" href="#_1、递归应用" aria-hidden="true">#</a> 1、递归应用</h3><h5 id="斐波那契数列" tabindex="-1"><a class="header-anchor" href="#斐波那契数列" aria-hidden="true">#</a> 斐波那契数列</h5><blockquote><p>斐波那契数列(Fibonacci sequence)是一位意大利的数学家，他闲着没事去研究兔子繁殖的过程，研究着就发现，可以写成这么一个序列：1，1，2，3，5，8，13，21… 也就是每个数等于它前两个数之和。</p><ul><li><p>公式 $$ F(n) = \\begin{cases} 0, &amp; \\text{当 }n=\\text{ 0} \\\\ 1, &amp; \\text{当 }n=\\text{ 1} \\\\ F(n-1)+F(n-2), &amp; \\text{当 }n&gt;\\text{ 1} \\</p><p>\\end{cases} $$</p></li><li><p>代码实现</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * 数组迭代实现斐波那契
 */</span>
<span class="token keyword">void</span> <span class="token function">fibonacci1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arr<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;第%d个月-&gt;%ld\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
                                                                                                                                                                            
<span class="token comment">/**
 * 递归实现斐波那契
 */</span>
<span class="token keyword">int</span> <span class="token function">fibonacci2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">fibonacci2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
                                                                                                                                                                            
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">/**
     * 数组实现斐波那契
     */</span>
    <span class="token comment">/*fibonacci1();*/</span>
                                                                                                                                                                            
    <span class="token comment">/**
     * 递归实现斐波那契
     */</span>
    <span class="token comment">/*int num = fibonacci2(12);
    printf(&quot;第%d个月-&gt;%d\\n&quot;, 12, num);*/</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></blockquote><h5 id="递归求阶乘" tabindex="-1"><a class="header-anchor" href="#递归求阶乘" aria-hidden="true">#</a> 递归求阶乘</h5><blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * 递归实现阶乘
 */</span>
<span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="递归实现字符顺序输入反转输出" tabindex="-1"><a class="header-anchor" href="#递归实现字符顺序输入反转输出" aria-hidden="true">#</a> 递归实现字符顺序输入反转输出</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">reversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//\\n作为结束符号，当递归到结束符号时，返回</span>
    <span class="token function">reversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一直递归到结束符号</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从最后依次输出上来</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="汉诺塔" tabindex="-1"><a class="header-anchor" href="#汉诺塔" aria-hidden="true">#</a> 汉诺塔</h5>`,8),I={href:"https://baike.baidu.com/item/%E7%88%B1%E5%BE%B7%E5%8D%8E%C2%B7%E5%8D%A2%E5%8D%A1%E6%96%AF",target:"_blank",rel:"noopener noreferrer"},P={href:"https://baike.baidu.com/item/%E6%A2%B5%E5%A4%A9",target:"_blank",rel:"noopener noreferrer"},G={href:"https://baike.baidu.com/item/%E6%A2%B5%E5%A1%94",target:"_blank",rel:"noopener noreferrer"},H=p(`<ul><li><p>递归移动汉诺塔</p><ul><li><p>当汉诺塔只有一层时，直接将A移动到C。</p></li><li><p>当层数超过1层时把汉诺塔整体看成2块，当作两块去移动即可。</p><ol><li><p>比如有5块，把上面的4块看成是1块(n-1)，把第5块看成1块(n)。</p></li><li><p>比如有4块，把上面的3块看成是1块(n-1)，把第4块看成1块(n)。</p></li><li><p>比如有3块，把上面的2块看成是1块(n-1)，把第3块看成1块(n)。</p></li><li><p>比如有2块，把上面的1块看成是1块(n-1)，把第2块看成1块(n)。</p></li></ol></li></ul></li><li><p>切记不要一味的从结果找规律，还得需要多思考如何在过程找规律！！！！</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">char</span> a<span class="token punctuation">,</span><span class="token keyword">char</span> b<span class="token punctuation">,</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
	  <span class="token comment">//只有一块盘</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c---&gt;%c\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//A(n)  ===&gt;C</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">move</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//A(n-1		===&gt;B</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c---&gt;%c\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//A(n)  ===&gt;C</span>
        <span class="token function">move</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//B(n-1)	===&gt;C</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入汉诺塔层数：\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">move</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),O=s("h5",{id:"八皇后问题-递归实现",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#八皇后问题-递归实现","aria-hidden":"true"},"#"),n(" 八皇后问题(递归实现)")],-1),X={href:"https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B/80888",target:"_blank",rel:"noopener noreferrer"},M={href:"https://baike.baidu.com/item/%E7%9A%87%E5%90%8E/15860305",target:"_blank",rel:"noopener noreferrer"},F={href:"https://baike.baidu.com/item/%E9%AB%98%E6%96%AF/24098",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://baike.baidu.com/item/%E6%9F%8F%E6%9E%97/75855",target:"_blank",rel:"noopener noreferrer"},R={href:"https://baike.baidu.com/item/%E5%9B%BE%E8%AE%BA/1433806",target:"_blank",rel:"noopener noreferrer"},$={href:"https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338",target:"_blank",rel:"noopener noreferrer"},K=p(`<table><thead><tr><th style="text-align:center;">1-1</th><th style="text-align:center;">1-2</th><th style="text-align:center;">1-3</th><th style="text-align:center;">1-4</th><th style="text-align:center;">1-5</th><th style="text-align:center;">1-6</th><th style="text-align:center;">1-7</th><th style="text-align:center;">1-8</th></tr></thead><tbody><tr><td style="text-align:center;">2-1</td><td style="text-align:center;">2-2</td><td style="text-align:center;">2-3</td><td style="text-align:center;">2-4</td><td style="text-align:center;">2-5</td><td style="text-align:center;">2-6</td><td style="text-align:center;">2-7</td><td style="text-align:center;">2-8</td></tr><tr><td style="text-align:center;">3-1</td><td style="text-align:center;">3-2</td><td style="text-align:center;">3-3</td><td style="text-align:center;">3-4</td><td style="text-align:center;">3-5</td><td style="text-align:center;">3-6</td><td style="text-align:center;">3-7</td><td style="text-align:center;">3-8</td></tr><tr><td style="text-align:center;">4-1</td><td style="text-align:center;">4-2</td><td style="text-align:center;">4-3</td><td style="text-align:center;">4-4</td><td style="text-align:center;">4-5</td><td style="text-align:center;">4-6</td><td style="text-align:center;">4-7</td><td style="text-align:center;">4-8</td></tr><tr><td style="text-align:center;">5-1</td><td style="text-align:center;">5-2</td><td style="text-align:center;">5-3</td><td style="text-align:center;">5-4</td><td style="text-align:center;">5-5</td><td style="text-align:center;">5-6</td><td style="text-align:center;">5-7</td><td style="text-align:center;">5-8</td></tr><tr><td style="text-align:center;">6-1</td><td style="text-align:center;">6-2</td><td style="text-align:center;">6-3</td><td style="text-align:center;">6-4</td><td style="text-align:center;">6-5</td><td style="text-align:center;">6-6</td><td style="text-align:center;">6-7</td><td style="text-align:center;">6-8</td></tr><tr><td style="text-align:center;">7-1</td><td style="text-align:center;">7-2</td><td style="text-align:center;">7-3</td><td style="text-align:center;">7-4</td><td style="text-align:center;">7-5</td><td style="text-align:center;">7-6</td><td style="text-align:center;">7-7</td><td style="text-align:center;">7-8</td></tr><tr><td style="text-align:center;">8-1</td><td style="text-align:center;">8-2</td><td style="text-align:center;">8-3</td><td style="text-align:center;">8-4</td><td style="text-align:center;">8-5</td><td style="text-align:center;">8-6</td><td style="text-align:center;">8-7</td><td style="text-align:center;">8-8</td></tr></tbody></table><p><strong>递归实现八皇后问题</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>

<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">_Bool</span> <span class="token function">danger</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">,</span> <span class="token keyword">int</span> chess<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//行不需要判断，因为是一行行来判断是否有冲突的</span>
    <span class="token comment">//判断左上方是否有危险</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> row<span class="token punctuation">,</span> y <span class="token operator">=</span> column<span class="token punctuation">;</span> x <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">--</span><span class="token punctuation">,</span> y<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>chess<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//判断右上方是否有危险</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> row<span class="token punctuation">,</span> y <span class="token operator">=</span> column<span class="token punctuation">;</span> x <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> x<span class="token operator">--</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>chess<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//判断左下方是否有危险</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> row<span class="token punctuation">,</span> y <span class="token operator">=</span> column<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>chess<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//判断右下方是否有危险</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> row<span class="token punctuation">,</span> y <span class="token operator">=</span> column<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>chess<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//判断纵向是否有危险</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>chess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/*
    int left = row - column;//左上方到右下方斜线的坐标差是一样的
    int right = row + column;//右上方到左下方斜线坐标和是一样的
    for (int i = 0; i &lt; 8; ++i) {
        for (int j = 0; j &lt; 8; ++j) {
            if (i - j == left &amp;&amp; chess[i][j] == 1)return 1;
            if (i + j == right &amp;&amp; chess[i][j] == 1)return 1;
        }
    }*/</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">EightQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">,</span> <span class="token keyword">int</span> chess<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> chess2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//保存上层棋盘的结果</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            chess2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> chess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;第%d种解法：\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%3d&quot;</span><span class="token punctuation">,</span> chess2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> column<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断当前行的每一列是否有危险，如果没有危险不断一层层的分裂下去</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">danger</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> i<span class="token punctuation">,</span> chess<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果没有危险</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//将当前行的每一列清空</span>
                chess2<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//设置成0</span>
            <span class="token punctuation">}</span>
            chess2<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//设置皇后的位置</span>
            <span class="token function">EightQueens</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> column<span class="token punctuation">,</span> chess2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对比下一列</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> chess<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">EightQueens</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> chess<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Y=p(`<h3 id="_2、分治思想" tabindex="-1"><a class="header-anchor" href="#_2、分治思想" aria-hidden="true">#</a> 2、分治思想</h3><blockquote><p>分而治之的思想古已有之，秦灭六国，统一天下正是采取各个击破、分而治之的原则。</p><ul><li>分治思想在算法中是比较常见的，当一个问题规模大且不易求解的时候，就可以考虑将问题分成几个小的模块逐一解决。</li></ul></blockquote><h5 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找" aria-hidden="true">#</a> 二分查找</h5><blockquote><p>二分查找（折半查找法）</p><ul><li>二分查找是一种常用的查找方法，使用该方法通过不断缩小查找范围，直到达到目的为止，所以效率比较高。（注意：只适用于有序排列）</li></ul></blockquote><blockquote><p><strong>实现1</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * 二分查找递归实现，也就是将数组不断分成两半，直到最后一个元素
 * @param arr  元素顺序的数组，使用mid来分割成两份再选择其中一份进行查找
 * @param low  指向最小范围
 * @param mid  指向中间
 * @param high 指向最后
 * @param n    根据它来查询
 * @return
 */</span>
<span class="token keyword">int</span> <span class="token function">binarySearch1</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果n小于数组中间元素，arr变成小的一半，m-1是因为中间元素已经对比过来，不必再对比，需要对比的是low ~ mid-1元素</span>
        <span class="token keyword">return</span> <span class="token function">binarySearch1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mid <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果n大于中间元素，把arr变成大的一半，m+1是因为中间元素已经对比过来，不必再对比，需要对比的是low ~ mid+1元素</span>
        <span class="token keyword">return</span> <span class="token function">binarySearch1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> n <span class="token operator">==</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//对比到最后如果相等，返回它，否则返回-1</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实现2</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * 这个也是递归，一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法
 * @param arr 元素顺序的数组
 * @param length 数组长度
 * @param key  查找关键字
 * @return
 */</span>
<span class="token keyword">int</span> <span class="token function">binarySearch2</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//刚开始从0开始查找</span>
    <span class="token keyword">int</span> high <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//刚开始范围在最后</span>
    <span class="token keyword">int</span> mid<span class="token punctuation">;</span><span class="token comment">//中间索引</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果low==high表示最后一个元素</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//中间索引/每次循环不断折半</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果等于，返回</span>
            <span class="token keyword">return</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//否则折半</span>
            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//折半</span>
            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="五、字符串" tabindex="-1"><a class="header-anchor" href="#五、字符串" aria-hidden="true">#</a> 五、字符串</h2><h3 id="_1、串的定义" tabindex="-1"><a class="header-anchor" href="#_1、串的定义" aria-hidden="true">#</a> 1、串的定义</h3><blockquote><p>早先的计算机在被发明时，主要作用是做一些科学和工程的计算工作，也就是现在我们理解的计算器，只不过它比小小计算器功能更强大、速度更快一些。后来发现，在计算机上作非数值处理的工作越来越多，使得我们不得不需要引入对字符的处理。于是就有了字符串的概念。</p><ol><li>字符串的定义：串（string）是由零个或多个字符组成的有限序列，又名叫字符串。</li><li>字符串的定义：一般记为s=&quot;a1a2......an&quot;(n≥0)，其中，s是串的名称，用双引号（有些书中也用单引号）括起来的字符序列是串的值，注意引号不属于串的内容。ai（1≤i≤n）可以是字母、数字或其他字符，i就是该字符在串中的位置。</li><li>串的长度：串中的字符数目n称为串的长度，定义中谈到“有限”是指长度n是一个有限的数值。</li><li>空串：零个字符的串称为空串（nullstring），它的长度为零，可以直接用两双引号“&quot;&quot;”表示，也可以用希腊字母“Φ”来表示。</li><li>序列：所谓的序列，说明串的相邻字符之间具有前驱和后继的关系。</li><li>空格串：是只包含空格的串。注意它与空串的区别，空格串是有内容有长度的，而且可以不止一个空格。</li><li>子串与主串：串中任意个数的连续字符组成的子序列称为该串的子串，相应地，包含子串的串称为主串。</li><li>子串：“over”、“end”、“lie”其实可以认为是“lover”、“friend”、“believe”这些单词字符串的子串。</li></ol></blockquote><h3 id="_2、字符串的比较" tabindex="-1"><a class="header-anchor" href="#_2、字符串的比较" aria-hidden="true">#</a> 2、字符串的比较</h3><blockquote><ul><li>字符串的比较比的是每个字符的ASCII码大小，因为 &#39;A&#39; == 65 、&#39;a&#39; == 97，所以 &quot;abcd&quot; &gt; &quot;Abcd&quot;。</li><li>其实对比大小的意义不是很大，字符串的比较，我们更重视的是是否相等。</li></ul></blockquote><h3 id="_3、字符串的存储结构" tabindex="-1"><a class="header-anchor" href="#_3、字符串的存储结构" aria-hidden="true">#</a> 3、字符串的存储结构</h3><blockquote><ol><li>字符串的存储结构与线性表相同，也分为顺序存储结构和链式存储结构。</li><li>字符串的顺序存储结构是用一组地址连续的存储单元来存储串中的字符序列。</li><li>按照预定的大小，为每个定义的字符变脸分配一个固定长度的存储区，一般用长度固定的数组来定义。</li><li>与线性表相似，既然是固定长度的存储区，就存在一个空间分配不灵活的问题，那么会考虑链式存储结构。</li><li>不同的是字符串我们一般都是连在一起表述的，“断章取义”的情况并不多，所以习惯上我们通常还是直接定义一个足够长度的存储区来存储。</li></ol></blockquote><h3 id="_4、bf-brute-force-算法" tabindex="-1"><a class="header-anchor" href="#_4、bf-brute-force-算法" aria-hidden="true">#</a> 4、BF（Brute Force）算法</h3><blockquote><p>BF算法，即暴力(Brute Force)算法，是普通的模式匹配算法，BF算法的思想就是将目标串S的第一个字符 <strong>S[1]</strong> 与模式串T的第一个字符 <strong>T[1]</strong> 进行匹配，若相等，则继续比较S的第二个字符 <strong>S[2]</strong> 和T的第二个字符 <strong>T[2]</strong> ；若不相等，则比较S的第二个字符 <strong>S[2]</strong> 和T的第一个字符 <strong>T[1]</strong>，依次比较下去，直到得出最后的匹配结果。BF算法是一种蛮力算法。</p><ul><li>目标串和模式串:在串匹配运算过程中，将<strong>主串称为目标串</strong>，而<strong>将需要匹配的子串称为模式串</strong>，两者是相对的。</li><li>这里的S指的是主串，T是子串，这种子串定位操作通常称作串的模式匹配。</li><li>该算法最坏的情况下要进行 M * ( N - M + 1 ) 次比较，时间复杂度为 O(M*N)。</li><li>缺点：效率不高。</li></ul></blockquote><h5 id="bf算法练习-查找子串的位置" tabindex="-1"><a class="header-anchor" href="#bf算法练习-查找子串的位置" aria-hidden="true">#</a> BF算法练习，查找子串的位置</h5><blockquote><p><strong>我们要从 S=&quot;ILoveChengXuRenSheng.xyz&quot; 中找到 T=&quot;ChengXuRenSheng&quot; 这个子串的位置。</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;string.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">BruteForce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*我们要从 S=&quot;ILoveChengXuRenSheng.xyz&quot; 中找到 T=&quot;ChengXuRenSheng&quot; 这个子串的位置。*/</span>
    <span class="token keyword">char</span> S<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;SSSS.xyz&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;SSSS.xyz&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span> <span class="token operator">&amp;&amp;</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//目标串和模式串其中一个到结尾就结束循环</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\t%c\\n&quot;</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果当前字符相等，继续对比下一个字符</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//+1</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//+1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//不相等，i从起始位置+1</span>
            i <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//i-j=对比的字符数，i从起始位置+1，如：SSSSSS和SSSB，当它们不相等时，i和j都=2，我们需要从下一个字符再开始对比所以+1</span>
            j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> j <span class="token operator">==</span> <span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">-</span> j <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//j==t_len 模式串比较完毕?i-j=起始位置:-1=模式串不属于目标串的子串</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">BruteForce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello: %d\\n&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_5、kmp算法" tabindex="-1"><a class="header-anchor" href="#_5、kmp算法" aria-hidden="true">#</a> 5、KMP算法</h3><blockquote><p>KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为克努特—莫里斯—普拉特操作（简称KMP算法）。KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。KMP算法的时间复杂度O(m+n) 。</p><ul><li>BF算法走的路线叫做回溯，回溯就是坚持条条大路通罗马的决心，遇到挫折就回到跌倒的地方重新爬起来，继续往前，这种思想是好的，但效率是低的。</li><li>KMP算法的核心思想就是避免不必要的回溯，那什么是不必要的呢？问题由模式串决定，不是由目标串决定。</li><li>KMP算法是通过next让模式串回溯的，避免像Brute Force那样目标串频繁回溯。</li></ul></blockquote><blockquote><p>next数组：next数组是通过模式串T生成的，当模式串T失配时，next数组对应的元素指导模式串T回溯到哪个元素继续开始匹配。</p><ul><li>真前缀和真后缀：abcdefg <ul><li>真前缀：a、ab、abc、abcd、abcde、abcdef</li><li>真后缀：g、fg、efg、defg、cdefg、bcdefg</li><li>即：真前缀不包括最后一个字符，真后缀不包括第一个字符。</li></ul></li></ul></blockquote><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203220057918.png" alt=""></p><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203220131159.png" alt=""></p><p><strong>代码实现1</strong></p><blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;string.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">genNext</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> d_len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">calloc</span><span class="token punctuation">(</span>d_len<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//第0字符前面不存在字符，所以0</span>
    next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//第1字符前面只有一个字符不存在真前缀和真后缀，所以0</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//因为1之前不用对比也是0</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//真缀对数</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> d_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//最后一个不需要匹配</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果相等</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//后缀进一步</span>
            n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//前缀进一步</span>
            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token comment">//设置匹配真缀对数</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//如果没有匹配到真缀对数就失配了，后缀进一步</span>
            <span class="token keyword">else</span> n <span class="token operator">=</span> next<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//否则，回溯上一个前缀位置</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/**
 * KMP算法是通过next让模式串回溯的，避免像Brute Force那样目标串频繁回溯。
 * @param S 目标串
 * @param T 模式串
 * @return  模式串在目标串的位置
 */</span>
<span class="token keyword">int</span> <span class="token function">indexKMP</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>S<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>next <span class="token operator">=</span> <span class="token function">genNext</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//从0开始匹配</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//从0开始匹配</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span> <span class="token operator">&amp;&amp;</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//任意一串匹配完，结束循环</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果匹配</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//目标串+1</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//模式串+1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//如果不匹配，目标串+1</span>
            <span class="token keyword">else</span> j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//设置模式串回溯位置</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token keyword">return</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\0&#39;</span> <span class="token operator">?</span> i <span class="token operator">-</span> j <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//T[j] == &#39;\\0模式串匹配完，表示模式串属于目标串的子串，i-j=index</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> S<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;AACAAACABEABA&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;EA&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\t&quot;</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\t&quot;</span><span class="token punctuation">,</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexKMP</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n%d\\n&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
A	A	C	A	A	A	C	A	B	E	A	B	A	
E	A	
9
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_6、kmp算法优化" tabindex="-1"><a class="header-anchor" href="#_6、kmp算法优化" aria-hidden="true">#</a> 6、KMP算法优化</h3><blockquote><p>如果真后缀和真前缀相等，当真后缀失配了，就没有必要回溯到相同的真前缀了，在生成next提前判断。</p></blockquote><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203230256847.png" alt=""></p><blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;string.h&quot;</span></span>

<span class="token comment">/*
        next通过模式串T生成，next表的第 0 个元素是-1，第 1 个元素是0
        1、next表的第一个元素是-1的作用是：如果KMP算法中如果第一个字符就发生失配、通过next[d]获取到第一个字符，和原来失配的字符是一样的，这样会导致死循环，
        所以引入一个-1，再d==-1时，目标串索引c 和 模式串d索引都+1

        2、在生成next表时，当d==-1时有两种可能：
            1、在匹配第一个字符时，因为第一个字符不存在真后缀和真前缀，所以是0
            2、在非匹配第一个字符时失配，d会逐步回溯到匹配的字符，否则直至-1
            3、接着 i++,n++，i=i+1,n=0

        3、第 1 个元素永远是0，因为模式串中第1个字符，不存在真前缀和真后缀。同样在KMP算法匹配时，模式串索引第1个字符发生失配，模式串需要回溯到第0个元素，在第0个元素失配，下次还是从第0个开始。

    匹配：next[c+1] = next[c]+1 = d+1
    失配：d=next[d]
 */</span>
<span class="token comment">/**
 * next数组是通过模式串T生成的，当模式串T失配时，next数组对应的元素指导模式串T回溯到哪个元素继续开始匹配。
 * @param T 模式串
 * @return  next数组
 */</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">genNext</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> d_len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">calloc</span><span class="token punctuation">(</span>d_len<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//第0字符前面不存在字符，所以0</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> d_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//最后一个不需要匹配</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果相等</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//后缀进一步</span>
            n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//前缀进一步</span>
            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">?</span> next<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">:</span> n<span class="token punctuation">;</span><span class="token comment">//避免重复匹配</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            n <span class="token operator">=</span> next<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//否则，回溯上一个前缀位置</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * KMP算法是通过next让模式串回溯的，避免像Brute Force那样目标串频繁回溯。
 * @param S 目标串
 * @param T 模式串
 * @return  模式串在目标串的位置
 */</span>
<span class="token keyword">int</span> <span class="token function">indexKMP</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>S<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>next <span class="token operator">=</span> <span class="token function">genNext</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//从0开始匹配</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//从0开始匹配</span>
    <span class="token keyword">int</span> t_len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> t_len<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//任意一串匹配完，结束循环</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果匹配</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//目标串+1</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//模式串+1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\t%d\\n&quot;</span><span class="token punctuation">,</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//模式串回溯</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> j <span class="token operator">==</span> t_len <span class="token operator">?</span> i <span class="token operator">-</span> j <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//模式串匹配完，表示模式串属于目标串的子串，i-j=index</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> S<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;AACAAACABEABA&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;AAAAC&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\t&quot;</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\t&quot;</span><span class="token punctuation">,</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexKMP</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="六、树" tabindex="-1"><a class="header-anchor" href="#六、树" aria-hidden="true">#</a> 六、树</h2><h3 id="_1、树的定义" tabindex="-1"><a class="header-anchor" href="#_1、树的定义" aria-hidden="true">#</a> 1、树的定义</h3><blockquote><ul><li><p><strong>树的定义</strong></p><ul><li><p>树(Tree)是n(n &gt;= 0)个节点的有限集。当n=0时称为空树，在任意一棵非空树中：</p></li><li><p>有且仅有一个特定的称为**根(Root)**的结点。</p></li><li><p>当n&gt;1时，其余节点可分为m(m&gt;0)个互不相交的有限集T1,T2,T3,....,Tm，其中每一个集合本身又是一棵树，称为根的<strong>子树(SubTree)</strong>。</p></li><li><p>线性表是一对一的，树是一对多的，图是多对多的。</p></li></ul></li><li><p><strong>结点分类</strong></p><p>​ <img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203242154370.png" style="zoom:25%;"></p><ul><li>(A)称为Root，(B、C、D、E、F、G、H) 称为SubTree</li><li>n&gt;0时，根结点是唯一的，不可能存在多个根结点。</li><li>m&gt;0时，子树的个数是没有限制的，它们互不相交。例如(B和C)，(B和G)，(C和D)...。</li><li>上面图片中，每一个圈圈我们称为树的一个结点。结点拥有的子树称为<strong>结点的度(Degree)</strong>，树的度取的是树内各结点的度的最大值。如上图 B结点的度为3为最大值，所以树的节点是3。 <ul><li>度为0的节点称为叶**节点(Leaf)**或终端结点。</li><li>度不为0的结点称为分枝结点或非终端结点，除根结点外，分枝结点也称为内部结点。</li></ul></li></ul></li><li><p><strong>结点间的关系</strong></p><ul><li><p>结点的子结点称为该结点的<strong>孩子(Child)</strong>，相应的，该结点的子结点称该结点为<strong>双亲(Parent)</strong>，同一双亲的孩子互相称为<strong>兄弟(Sibling)</strong>。</p></li><li><p>结点的祖先是从根节点到该结点所经分支上的所有结点。</p></li></ul></li><li><p><strong>节点的层次</strong></p><ul><li>结点的<strong>层次(Level)从根开始，根结点为第一层</strong>，根结点的子结点为第二层，以此类推。</li><li>双亲在同一层的结点互为堂兄弟。</li><li>树中结点的最大层次称为树的<strong>深度(Depth)或高度</strong>。</li></ul></li><li><p><strong>其他概念</strong></p><ul><li>如果树中结点的各子树从左到右是有序的，不能互换的，则称该树为有序树，否则称为无序树。</li><li>森林(Forest)是m(m&gt;0)课互不相交的树的集合。对树中的每个结点而言，与其子树的集合即为森林。</li></ul></li></ul></blockquote><h3 id="_2、树的存储结构" tabindex="-1"><a class="header-anchor" href="#_2、树的存储结构" aria-hidden="true">#</a> 2、树的存储结构</h3><blockquote><p><strong>树的存储结构</strong></p><ul><li><p>要存储树，简单的顺序存储结构和链式存储结构是不行的，不过可以充分的利用它们各自的特点，是可以实现的。</p></li><li><p>实现树的存储结构还要考虑 双亲、孩子、兄弟之间的关系，有三种表示法。</p><ul><li><p>双亲表示法</p><ul><li><p>双亲表示法就是以双亲作为索引的一种存储方式。</p></li><li><p>假设我们用一组连续的空间来存储树的结点，同时在每个结点中附设一个指示其双亲结点在数组中的位置的元素。</p></li><li><p>也就是说每个结点除了知道自己是谁外，还要知道它的双亲在哪里。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_TREE_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> ElementType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
    ElementType data<span class="token punctuation">;</span><span class="token comment">//结点数据</span>
    <span class="token keyword">int</span> parent<span class="token punctuation">;</span><span class="token comment">//双亲结点位置</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Tree</span><span class="token punctuation">{</span>
    Node nodes<span class="token punctuation">[</span>MAX_TREE_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//结点数组</span>
    <span class="token keyword">int</span> root<span class="token punctuation">;</span><span class="token comment">//根结点位置</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//结点数目</span>
<span class="token punctuation">}</span> <span class="token operator">*</span>PTree<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这样的存储结构，我们可以根据某结点的parent指针找到它的双亲结点，所用的时间复杂度是O(1)，索引到parent的值为-1时，表示找到了树结点的根。</p></li><li><p>如果我们想知道某结点的孩子都有谁，则需要遍历整颗树。</p><ul><li><p>可以在Node里面加几个指向兄弟结点的指针，如child1，child2。</p></li><li><p>如果比较关心它们兄弟之间的关系，如右边的和左边的，可以分别定义指针leftSib,rightSib。</p></li><li><p>孩子表示法</p></li></ul></li></ul></li><li><p>孩子表示法就是每个结点都有一个指针指向它所有的孩子。</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>             <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_TREE_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span>
                                                                                                                                            
        <span class="token keyword">typedef</span> <span class="token keyword">int</span> ElementType<span class="token punctuation">;</span>
                                                                                                                                                                
        <span class="token comment">//孩子结点</span>
                            <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">CTNode</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> child<span class="token punctuation">;</span>			 	 <span class="token comment">//孩子结点的下标</span>
            <span class="token keyword">struct</span> <span class="token class-name">CTNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>	<span class="token comment">//指向下一个孩子结点的指针</span>
        <span class="token punctuation">}</span> <span class="token operator">*</span>ChildPtr<span class="token punctuation">;</span>
                                                                                                                                            
        <span class="token comment">//结点结构</span>
                            <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
            ElementType data<span class="token punctuation">;</span>		  	<span class="token comment">//结点数据</span>
            <span class="token keyword">int</span> parent<span class="token punctuation">;</span>				  	<span class="token comment">//双亲结点位置，加了parent变成双亲孩子表示法</span>
            ChildPtr firstchild<span class="token punctuation">,</span>sibling<span class="token punctuation">;</span><span class="token comment">//指向第一个孩子，加了siblin变成孩子兄弟表示法</span>
        <span class="token punctuation">}</span> Node<span class="token punctuation">;</span>
                                                                                                                                            
        <span class="token comment">//树结构</span>
                            <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Tree</span><span class="token punctuation">{</span>
            Node nodes<span class="token punctuation">[</span>MAX_TREE_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//结点数组</span>
            <span class="token keyword">int</span> root<span class="token punctuation">;</span><span class="token comment">//根结点位置</span>
            <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//结点数目</span>
        <span class="token punctuation">}</span> <span class="token operator">*</span>PTree<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>    -   孩子兄弟表示法
</code></pre><ul><li>孩子兄弟表示法就是在孩子表示法的基础上加一个指向兄弟的链表(见上代码示例)。</li></ul></li><li><p><strong>存储结构设计是一个非常灵活的过程，只要你愿意，你可以设计出任何你想要的奇葩。</strong></p></li><li><p><strong>一个存储结构设计得是否合理，取决于该存储结构的运算是否合适，是否方便，时间复杂度好不好等。</strong></p></li><li><p><strong>当你的思维放开了，世界就变小了！</strong></p></li><li><p><strong>当你的思维放开了，知识就变少了！</strong></p></li></ul></blockquote><h3 id="_3、二叉树" tabindex="-1"><a class="header-anchor" href="#_3、二叉树" aria-hidden="true">#</a> 3、二叉树</h3><blockquote><p>树的类型有很多，但是二叉树的使用范围是最广的。</p><p>二叉树（Binary Tree）是（n&gt;=0）个结点的有限集合，或者空集（空二叉树），或者由一个根结点和 两颗互不相交的分别称为根结点的左子树和右子树的二叉树组成。</p></blockquote><h4 id="_1、二叉树的特点" tabindex="-1"><a class="header-anchor" href="#_1、二叉树的特点" aria-hidden="true">#</a> 1、二叉树的特点</h4><blockquote><p><strong>二叉树的特点</strong></p><ul><li><p>只要结点数&lt;=2就算是二叉树，就算一个结点也没有也叫做二叉树</p></li><li><p>每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点。（注意：不是都需要两颗子树，而是最多两颗子树，没有子树或只有一棵子树也是可以的。）</p></li><li><p>做子树和右子树是有顺序的，顺序不能颠倒。</p></li><li><p>即使树中某结点只有一棵子树，也要区分它是左子树还是右子树，下面是完全不同的二叉树。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262256691.png" style="zoom:25%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262257985.png" style="zoom:25%;"></li></ul></blockquote><h4 id="_2、二叉树的五种基本形态" tabindex="-1"><a class="header-anchor" href="#_2、二叉树的五种基本形态" aria-hidden="true">#</a> 2、二叉树的五种基本形态</h4><blockquote><p><strong>二叉树的五种基本形态</strong></p><ul><li><p>空二叉树。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262300883.png" style="zoom:33%;"></li><li><p>只有一个根结点的二叉树。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262259442.png" style="zoom:33%;"></li><li><p>根结点只有左子树。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262256691.png" style="zoom:25%;"></li><li><p>根结点只有右子树。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262257985.png" style="zoom:25%;"></li><li><p>根结点既有左子树又有右子树。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262301249.png" style="zoom:25%;"></li></ul></blockquote><h4 id="_3、二叉树的概念" tabindex="-1"><a class="header-anchor" href="#_3、二叉树的概念" aria-hidden="true">#</a> 3、二叉树的概念</h4><blockquote><p><strong>二叉树的概念</strong></p><ul><li><p>拥有三个结点的二叉树只有两种情况，两层或者三层。</p></li><li><p>但对于二叉树来说，由于区分左右，所以就演变成五种形态。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262301249.png" style="zoom:25%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262306875.png" style="zoom:25%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262308970.png" style="zoom:25%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262308779.png" style="zoom:25%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262309229.png" style="zoom:25%;"></li></ul></blockquote><h4 id="_4、特殊的二叉树" tabindex="-1"><a class="header-anchor" href="#_4、特殊的二叉树" aria-hidden="true">#</a> 4、特殊的二叉树</h4><blockquote><p><strong>特殊的二叉树</strong></p><ul><li><p><strong>斜树</strong></p><ul><li><p>故名思义就是根结点的子树要么都是左边，要么都是右边</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262306875.png" style="zoom:25%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203262308970.png" style="zoom:25%;"></li></ul></li><li><p><strong>满二叉树</strong></p><ul><li><p>苏轼：“人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。”。意思就是说完美的是理想，不完美的是人生。</p></li><li><p>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203271249005.png" style="zoom:25%;"></li><li><p>满二叉树的特点</p><ul><li>叶子只能出现在最下一层。</li><li>非叶子结点的度一定是2。</li><li>在同样深度的二叉树中，满二叉树的结点数一定是最多的，同时叶子也是最多的。</li></ul></li></ul></li><li><p><strong>完全二叉树</strong></p><ul><li><p>对一棵具有n个结点的二叉树按层序编号，如果编号为i(1&lt;=i&lt;=n)的结点与同样深度的满二叉树中编号为i的结点位置完全相同，则这棵树称为完全二叉树。</p></li><li><p>生成满二叉树过程中，经历的所有树，都是完全二叉树。（完全二叉树是满二叉树的生成树。）</p></li><li><p><strong>完全二叉树的特点</strong></p><ul><li>叶子结点只能出现在最下两层。</li><li>最下层的叶子一定集中在左部连续位置。</li><li>倒数第二层，若有叶子结点，一定集中在右部连续位置。</li><li>如果结点度为1，则该结点只有左孩子。</li><li>同样结点树的二叉树，完全二叉树的深度最小。</li></ul></li><li><p><strong>注意</strong></p><ul><li>满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。</li></ul></li><li><p>以下这些都<strong>不是</strong>完全二叉树</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203271406337.png" style="zoom:25%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203271409597.png" style="zoom:25%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203271411227.png" style="zoom:25%;"></li></ul></li></ul></blockquote><h4 id="_5、二叉树的性质" tabindex="-1"><a class="header-anchor" href="#_5、二叉树的性质" aria-hidden="true">#</a> 5、二叉树的性质</h4><blockquote><p><strong>二叉树的性质</strong></p><ul><li><p><strong>性质1</strong>：在二叉树的第i层上至多有2^(i-1)个结点。(n&gt;=1)</p></li><li><p><strong>性质2</strong>：深度为k的二叉树最多有(2^k)-1个结点。</p></li><li><p><strong>性质3</strong>：在任意一棵二叉树中，度为0的结点（即叶子结点）总是比度为2的结点多一个。（即：如果结点数为n0，度为2的结点为n2，则n0=n2+1 ）。</p><ul><li>首先我们假设度为1的结点为n1，则二叉树的结点为n=n0+n1+n2。</li><li>其次我们发现连接数总是等于总结点数n-1，并且等于n1+2*n2。</li><li>所以n-1=n1+2*n2</li><li>所以n0+n1+n2-1=n1+n2+n2</li><li>最后n0=n2+1</li></ul></li><li><p><strong>性质4</strong>：具有n个结点的完全二叉树，其深度至少为 [log2n] +1，其中 [log2n]表示取 log2n 的整数部分。</p><ul><li><p>由性质2我们知道，深度为k的满二叉树的结点数n一定是2^k-1。</p></li><li><p>那么对于满二叉树我们可以通过n=2^k-1倒推得到满二叉树的深度k为log2(n+1)。</p></li><li><p>那么对于<strong>倒数第二层</strong>的满二叉树我们同样很容易回推它的结点数为n=2^(k-1)-1。</p><ul><li><p>所以完全二叉树的结点数的取值范围是2^(k-1)-1 &lt; n &lt;= 2^k-1。</p></li><li><p>n &lt;= 2^k-1 可以看称n &lt; 2^k。</p></li><li><p>同理2^(k-1)-1 &lt; n可以看成 2^(k-1) &lt;= n。</p></li><li><p>所以 2^(k - 1) &lt;= n &lt; 2^k。</p></li><li><p>不等式两边同时取对数，得到 k-1 &lt;= log2n &lt; k。</p></li><li><p>由于k是深度，必须取整，所以 k = [log2n] + 1。</p></li></ul></li></ul></li><li><p><strong>性质5</strong>：如果对一棵有n个结点的完全二叉树（其深度为 [log2n] + 1）的结点按层序编号，对任一</p><p>结点i (1 &lt;= i &lt;= n) 有以下性质：</p><ul><li>如果i=1，则结点i是二叉树的根，无双亲；如果i &gt; 1，则其双亲就是结点 [i/2]。（[i/2]:取整数部分）</li><li>如果2*i &gt; n ，则结点 i 无左孩子(结点i为叶子结点)；否则其左孩子是结点2i。</li><li>如果2*i+1 &gt; n，则结点i无右孩子；否则其右孩子是结点2i + 1。</li></ul><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203271906282.png" alt=""></p></li></ul></blockquote><h3 id="_4、二叉树的存储结构" tabindex="-1"><a class="header-anchor" href="#_4、二叉树的存储结构" aria-hidden="true">#</a> 4、二叉树的存储结构</h3><blockquote><p>树结构在计算机中的存储形式有很多，可谓是天马行空任你创造，只要能够按要求完成即可。</p><ul><li><p>前面的树，我们发觉很难单单只用顺序存储结构或者链式存储结构来存放。</p></li><li><p>但是二叉树是一种特殊的树，由于它的特殊性，使得顺序存储结构或链式存储结构都能够简单实现。</p></li><li><p>二叉树的顺序存储结构就是用一维数组存储二叉树中的各个结点，并且结点的存储位置就能体现结点之间的逻辑关系。</p></li><li><p>对于完全二叉树由于它的严格定义，在数组中直接能表现出逻辑结构，它所有的树都要偏左的。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203280043269.png" style="zoom:25%;"><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">A</th><th style="text-align:center;">B</th><th style="text-align:center;">C</th><th style="text-align:center;">D</th><th style="text-align:center;">E</th><th style="text-align:center;">F</th><th style="text-align:center;">G</th></tr></thead><tbody><tr><td style="text-align:center;">下标</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td></tr></tbody></table><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203280043705.png" style="zoom:25%;"><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">A</th><th style="text-align:center;">B</th><th style="text-align:center;">C</th><th style="text-align:center;">D</th><th style="text-align:center;">E</th><th style="text-align:center;">F</th><th style="text-align:center;">NULL</th></tr></thead><tbody><tr><td style="text-align:center;">下标</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td></tr></tbody></table></li><li><p>当然对于一般的二叉树，尽管层序编号不能反映其逻辑关系，但是也可以按照完全二叉树编号方式修改一下，把不存在的结点用NULL代替即可。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203280042440.png" style="zoom:25%;"><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">A</th><th style="text-align:center;">B</th><th style="text-align:center;">C</th><th style="text-align:center;">D</th><th style="text-align:center;">NULL</th><th style="text-align:center;">F</th><th style="text-align:center;">G</th></tr></thead><tbody><tr><td style="text-align:center;">下标</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td></tr></tbody></table></li><li><p>但对于一种极端的情况呢？比如斜树，特别是右斜树？那就不合理了。</p></li><li><p>既然顺序存储方式的适用性不强，那么我们就要考虑链式存储结构了，二叉树的存储结构按照国际惯例来说一般也是采用链式存储结构的。</p></li><li><p>二叉树每个结点最多有两个孩子，所以为它设计一个数据域和两个指针域是比较自然的想法，我们称这样的链表为<strong>二叉链表</strong>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElementType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BitNode</span><span class="token punctuation">{</span>
    ElementType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">bitNode</span> <span class="token operator">*</span>parent<span class="token punctuation">,</span><span class="token operator">*</span>leftchild<span class="token punctuation">,</span><span class="token operator">*</span>rightchild<span class="token punctuation">;</span>
<span class="token punctuation">}</span> BitNode<span class="token punctuation">,</span><span class="token operator">*</span>BitTree
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></blockquote><h3 id="_5、二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#_5、二叉树的遍历" aria-hidden="true">#</a> 5、二叉树的遍历</h3><p><strong>二叉树的遍历</strong></p><ul><li>二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种<strong>次序</strong>依次<strong>访问</strong>二叉树中的所有节点，每个结点被访问一次且仅被访问一次。</li><li><strong>次序</strong><ul><li>二叉树的遍历次序不同于线性结构，线性结构最多分为 顺序、循环、双向 等简单的遍历方式。</li></ul></li><li><strong>访问</strong><ul><li>树的结点之间不存在唯一的前驱和后继这样的关系，在访问一个结点后，下一个被访问的结点有着不同的选择。</li></ul></li></ul><p><strong>二叉树的遍历方法分为四种</strong></p><ul><li><p>前序遍历</p><ul><li><p>若二叉树为NULL，直接返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树。（从根结点开始，遍历左子树直到左叶子，接着右子树类似的操作。）</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203290444856.png" alt="QQ20220329-004524@2x" style="zoom:33%;"></li></ul></li><li><p>中序遍历</p><ul><li><p>若树为NULL，直接返回，否则从根结点开始（注意：不是访问根结点，是以它为中心），中序遍历根结点的左子树，然后再访问根结点，最后中序遍历右子树。（从叶子逐步到整个二叉树根结点。）</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203290444510.png" alt="QQ20220329-004456@2x" style="zoom:33%;"></li></ul></li><li><p>后序遍历</p><ul><li><p>若树为NULL，直接返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后访问根结点。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203290444246.png" alt="QQ20220329-010232@2x" style="zoom:33%;"></li></ul></li><li><p>层序遍历</p><ul><li><p>若树为NULL，直接返回，否则从树的第一层（根结点）开始访问，从上至下逐层访问，在同一层中按照从左到右的顺序逐个访问。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203290444805.png" alt="4A2F4B60-03D5-40C3-B6C3-74C1DAAFE7ED" style="zoom:33%;"></li></ul></li></ul><h3 id="_6-1、二叉树的建立与遍历-递归" tabindex="-1"><a class="header-anchor" href="#_6-1、二叉树的建立与遍历-递归" aria-hidden="true">#</a> 6.1、二叉树的建立与遍历（递归）</h3><p><strong>递归实现前中后序遍历</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">char</span> ElementType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BiNode</span> <span class="token punctuation">{</span>
    ElementType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">BiNode</span> <span class="token operator">*</span>left_child<span class="token punctuation">,</span> <span class="token operator">*</span>right_child<span class="token punctuation">;</span>
<span class="token punctuation">}</span> BiNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">createBinaryTree</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">/**T = (BiTree) malloc(sizeof(BiNode));

    (*T)-&gt;left_child = (BiTree) malloc(sizeof(BiNode));
    (*T)-&gt;right_child = (BiTree) malloc(sizeof(BiNode));

    (*T)-&gt;left_child-&gt;left_child = (BiTree) malloc(sizeof(BiNode));
    (*T)-&gt;left_child-&gt;right_child = (BiTree) malloc(sizeof(BiNode));

    (*T)-&gt;right_child-&gt;left_child = (BiTree) malloc(sizeof(BiNode));
    (*T)-&gt;right_child-&gt;right_child = (BiTree) malloc(sizeof(BiNode));

    (*T)-&gt;left_child-&gt;left_child-&gt;left_child = NULL;
    (*T)-&gt;left_child-&gt;left_child-&gt;right_child = NULL;

    (*T)-&gt;left_child-&gt;right_child-&gt;left_child = NULL;
    (*T)-&gt;left_child-&gt;right_child-&gt;right_child = NULL;

    (*T)-&gt;right_child-&gt;left_child-&gt;left_child = NULL;
    (*T)-&gt;right_child-&gt;left_child-&gt;right_child = NULL;

    (*T)-&gt;right_child-&gt;right_child-&gt;left_child = NULL;
    (*T)-&gt;right_child-&gt;right_child-&gt;right_child = NULL;

    (*T)-&gt;data = &#39;A&#39;;// level=1
    (*T)-&gt;left_child-&gt;data = &#39;B&#39;;// level=2
    (*T)-&gt;right_child-&gt;data = &#39;C&#39;;// level=2
    (*T)-&gt;left_child-&gt;left_child-&gt;data = &#39;D&#39;;// level=3
    (*T)-&gt;left_child-&gt;right_child-&gt;data = &#39;E&#39;;// level=3
    (*T)-&gt;right_child-&gt;left_child-&gt;data = &#39;F&#39;;// level=3
    (*T)-&gt;right_child-&gt;right_child-&gt;data = &#39;G&#39;;// level=3*/</span>


    <span class="token comment">/**
     * 采用前序初始化二叉树
     */</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//输入x表示，设置该结点为NULL，左孩子和右孩子都是NULL 是 叶子结点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data <span class="token operator">=</span> ch<span class="token punctuation">;</span>
        <span class="token function">createBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>left_child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从根结点开始不断创建左子树，输入x=NULL</span>
        <span class="token function">createBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>right_child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建完根结点和左子树之后 也即是创建完子树的左斜树，开始从左斜树底部开始往上创建右子树</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 对结点进行某些操作
 * @param node 结点
 * @param level 所在层级
 */</span>
<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>BiNode <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c在第%d层\\n&quot;</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 前序遍历二叉树，中左右，几种遍历方式只是操作顺序有所区别
 * @param T 二叉树
 */</span>
<span class="token keyword">void</span> <span class="token function">PreorderTraversal</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//左子树从根结点开始一直到左叶子结点</span>
    <span class="token function">display</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树从根结点开始一直到左叶子结点</span>
    <span class="token function">PreorderTraversal</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>left_child<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树从根结点开始一直到左叶子结点</span>
    <span class="token function">PreorderTraversal</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>right_child<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树每一层都分裂出右子树，在左子树查找完之后，逐层向上执行右子树的左右子树</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 中序遍历二叉树，左中后，几种遍历方式只是操作顺序有所区别
 * @param T 二叉树
 */</span>
<span class="token keyword">void</span> <span class="token function">InOrderTraversal</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//递归到左叶子结点，才开始逐层向上操作结点，和递归当前结点的右子树</span>
    <span class="token function">InOrderTraversal</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>left_child<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归到左叶子结点，才开始逐层向上操作结点，和递归当前结点的右子树</span>
    <span class="token function">display</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归到左叶子结点，才开始逐层向上操作结点，和递归当前结点的右子树</span>
    <span class="token function">InOrderTraversal</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>right_child<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树每一层都分裂出右子树，如果存在继续以上步骤</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 后序遍历二叉树，左右中，几种遍历方式只是操作顺序有所区别
 * @param T 二叉树
 */</span>
<span class="token keyword">void</span> <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//左右子树都递归到最底层，接着输出左叶子-&gt;右叶子-&gt;中结点 也就是上一层的左结点-&gt;右结点-&gt;中结点 也就是上一层的左结点...</span>
    <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>left_child<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>right_child<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">display</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作当前结点</span>

<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    BiTree T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">createBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;前序遍历：\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PreorderTraversal</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n中序遍历：\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">InOrderTraversal</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n后序遍历：\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    <span class="token comment">/*
    ABDH##I##E#K##CF#M##G##
前序遍历：
A在第1层
B在第2层
D在第3层
H在第4层
I在第4层
E在第3层
K在第4层
C在第2层
F在第3层
M在第4层
G在第3层

中序遍历：
H在第4层
D在第3层
I在第4层
B在第2层
E在第3层
K在第4层
A在第1层
F在第3层
M在第4层
C在第2层
G在第3层

后序遍历：
H在第4层
I在第4层
D在第3层
K在第4层
E在第3层
B在第2层
M在第4层
F在第3层
G在第3层
C在第2层
A在第1层
    */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2、二叉树的建立与遍历-非递归" tabindex="-1"><a class="header-anchor" href="#_6-2、二叉树的建立与遍历-非递归" aria-hidden="true">#</a> 6.2、二叉树的建立与遍历（非递归）</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">char</span> ElementType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BiNode</span> <span class="token punctuation">{</span>
    ElementType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">BiNode</span> <span class="token operator">*</span>left_child<span class="token punctuation">,</span> <span class="token operator">*</span>right_child<span class="token punctuation">;</span>
<span class="token punctuation">}</span> BiNode<span class="token punctuation">,</span> <span class="token operator">*</span>BinaryTree<span class="token punctuation">;</span>

<span class="token comment">/**
 * 采用前序初始化二叉树
 */</span>
<span class="token keyword">void</span> <span class="token function">createBinaryTree</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//输入x表示，设置该结点为NULL，左孩子和右孩子都是NULL 是 叶子结点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token punctuation">(</span>BinaryTree<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data <span class="token operator">=</span> ch<span class="token punctuation">;</span>
        <span class="token function">createBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>left_child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从根结点开始不断创建左子树，输入x=NULL</span>
        <span class="token function">createBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>right_child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建完根结点和左子树之后 也即是创建完子树的左斜树，开始从左斜树底部开始往上创建右子树</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//top变量始终指向栈顶元素，-1表示不存在元素</span>


<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>T<span class="token punctuation">,</span> BiNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

BiNode <span class="token operator">*</span><span class="token function">pop</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> top<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> T<span class="token punctuation">[</span>top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

BiNode <span class="token operator">*</span><span class="token function">getTop</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> T<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">/**
 * 对结点进行某些操作
 * @param node 结点
 * @param level 所在层级
 */</span>
<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>BiNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\t&quot;</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 *  1 将根结点入栈，进入循环后出栈
 *  2 如果出栈的结点不是NULL
 *  3 使用它并判断结点是否存在右孩子 有则入栈
 *  4 接着对左孩子覆盖当前的结点 递归下去，直到p==NULL
 *  5 P=NULL后退出循环，接着对进栈的右子树重复2开始递归操作，直到P==NULL和top==-1
 *
 * @param T
 * @param level
 */</span>
<span class="token keyword">void</span> <span class="token function">PreorderTraversal</span><span class="token punctuation">(</span>BinaryTree T<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BiNode <span class="token operator">*</span>stack<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义一个二十个元素的顺序存储结构栈</span>
    BiNode <span class="token operator">*</span>p <span class="token operator">=</span> T<span class="token punctuation">;</span>
    <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//栈不为空</span>
        p <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出栈</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//从根结点到左叶子，使用它 并 入栈</span>
            <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用结点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>right_child <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果右孩子不为NULL存入栈</span>
                <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>right_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>left_child<span class="token punctuation">;</span><span class="token comment">//下一个左孩子</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 *  1 从根结点到左叶子，入栈
 *  2 到达左叶子结点，使用它并出栈，再出栈父结点，使用父结点，并获取父结点的右孩子
 *  3 如果右孩子是NULL 使用父孩子并回溯，否则作为根结点从1步骤开始。
 * @param T
 * @param level
 */</span>
<span class="token keyword">void</span> <span class="token function">InorderTraversal1</span><span class="token punctuation">(</span>BinaryTree T<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BiNode <span class="token operator">*</span>stack<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义一个二十个元素的顺序存储结构栈</span>
    BiNode <span class="token operator">*</span>p <span class="token operator">=</span> T<span class="token punctuation">;</span>
    <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token function">getTop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果栈顶不为NULL</span>
            <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>left_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将NULL出栈</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果栈不为空</span>
            p <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出栈</span>
            <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出</span>
            <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>right_child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树进栈</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">InorderTraversal2</span><span class="token punctuation">(</span>BinaryTree T<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BiNode <span class="token operator">*</span>stack<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义一个二十个元素的顺序存储结构栈</span>
    BiNode <span class="token operator">*</span>p <span class="token operator">=</span> T<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> top <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//循环至左叶子</span>
            <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>left_child<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出栈</span>
            <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>right_child<span class="token punctuation">;</span><span class="token comment">//右子树</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">//后序遍历非递归实现</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SNode</span> <span class="token punctuation">{</span>
    BiNode <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">int</span> tag<span class="token punctuation">;</span>
<span class="token punctuation">}</span> SNode<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">postPop</span><span class="token punctuation">(</span>SNode <span class="token operator">*</span>stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">--</span>top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">postPush</span><span class="token punctuation">(</span>SNode <span class="token operator">*</span>stack<span class="token punctuation">,</span> SNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

SNode <span class="token function">postGetTop</span><span class="token punctuation">(</span>SNode <span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PostOrderTraversal</span><span class="token punctuation">(</span>BinaryTree T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SNode stack<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义一个二十个元素的顺序存储结构栈</span>
    SNode sp<span class="token punctuation">;</span>
    BiNode <span class="token operator">*</span>p <span class="token operator">=</span> T<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">||</span>top<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//遍历至左叶子</span>
            sp<span class="token punctuation">.</span>p <span class="token operator">=</span> p<span class="token punctuation">;</span>
            sp<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//设置未访问过标识</span>
            <span class="token function">postPush</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> sp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>left_child<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        sp <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取栈顶结点</span>
        p <span class="token operator">=</span> sp<span class="token punctuation">.</span>p<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sp<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果结点未被访问过</span>
            stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//设置为已访问过</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>right_child<span class="token punctuation">;</span><span class="token comment">//遍历右子树</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//否则已经访问过</span>
            <span class="token function">postPop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出栈</span>
            <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用</span>
            p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//设置NULL，不设置会陷入无限循环</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BinaryTree T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">createBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;后序遍历：\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PostOrderTraversal</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3、二叉树层序遍历" tabindex="-1"><a class="header-anchor" href="#_6-3、二叉树层序遍历" aria-hidden="true">#</a> 6.3、二叉树层序遍历</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">char</span> ElementType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BiNode</span> <span class="token punctuation">{</span>
    ElementType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">BiNode</span> <span class="token operator">*</span>left_child<span class="token punctuation">,</span> <span class="token operator">*</span>right_child<span class="token punctuation">;</span>
<span class="token punctuation">}</span> BiNode<span class="token punctuation">,</span> <span class="token operator">*</span>BinaryTree<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">createBinaryTree</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token punctuation">(</span>BinaryTree<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data <span class="token operator">=</span> ch<span class="token punctuation">;</span><span class="token comment">//前序创建二叉树</span>
    <span class="token function">createBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>left_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//(*T)-&gt;data = ch;//中序创建二叉树</span>
    <span class="token function">createBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>right_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//(*T)-&gt;data = ch;//后序创建二叉树</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>BiNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\t&quot;</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//初始化队头和队尾指针开始时都为0</span>
<span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>BiNode <span class="token operator">*</span><span class="token operator">*</span>q<span class="token punctuation">,</span> BiNode <span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    q<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

BiNode <span class="token operator">*</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>BiNode <span class="token operator">*</span><span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> q<span class="token punctuation">[</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BinaryTree T<span class="token punctuation">;</span>
    <span class="token function">createBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    BiNode <span class="token operator">*</span>Q<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>front <span class="token operator">&lt;</span> rear<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">display</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>left_child<span class="token punctuation">)</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>left_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>right_child<span class="token punctuation">)</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>right_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、线索二叉树" tabindex="-1"><a class="header-anchor" href="#_7、线索二叉树" aria-hidden="true">#</a> 7、线索二叉树</h3><p><strong>普通二叉树的缺陷</strong></p><ul><li><strong>浪费空间</strong><ul><li>从上面的代码实现中可以看出，当没有左孩子和右孩子时，它们的指针指向NULL，虽然没有指向任何内存，但是指针本身也占用了一定的空间。（64位系统的一个指针占用8个字节），下图浪费了8*11=88个字节。</li></ul></li><li><strong>浪费时间</strong><ul><li>因为不知道前驱和后继，通过递归与直接知道前驱和后继结点，区别还是很大的。所以我们可以利用浪费的空间用于存储结点的前驱和后继结点。</li></ul></li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202203290443234.png" alt="QQ20220329-043320@2x" style="zoom:33%;"><ul><li><p>仅适用于<strong>中序遍历</strong>，<strong>其他遍历出来的序列不具备</strong>这样的特点，<strong>必须是完全二叉树</strong>并且每个结点有必须有<strong>两个孩子</strong>或者<strong>零个孩子</strong>，不能<strong>只有一个孩子</strong></p></li><li><p>上图中序遍历的顺序：#H#D#I#B#E#A#F#C#G#，叶子结点刚好可以记录它的前驱和后继</p></li><li><p>前序遍历：ABDH##I#....，显然是没有规律，后序也是如此。</p></li></ul><h4 id="什么是线索二叉树" tabindex="-1"><a class="header-anchor" href="#什么是线索二叉树" aria-hidden="true">#</a> 什么是线索二叉树</h4><ul><li><strong>规律：在有 n 个结点的二叉链表中必定存在 n+1 个空指针域。</strong><ul><li>线索二叉树实际上就是使用这些空指针域来存储结点之间前趋和后继关系的一种特殊的二叉树。</li></ul></li><li>如果算法中多次涉及到对二叉树的遍历，普通的二叉树就需要使用栈结构做重复性的操作。</li><li>线索二叉树不需要如此，在遍历的同时，使用二叉树中空闲的内存空间记录某些结点的前驱和后继元素的位置（不是全部）。这样在算法后期需要遍历二叉树时，就可以利用保存的结点信息，提高了遍历的效率。使用这种方法构建的二叉树，即为“线索二叉树”。</li></ul><p><strong>线索二叉树结构</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BitNode</span> <span class="token punctuation">{</span>
    ElementType data<span class="token punctuation">;</span><span class="token comment">//数据域</span>
    <span class="token keyword">enum</span> <span class="token class-name">left_tag</span><span class="token punctuation">;</span><span class="token comment">//left_tag为0时指向的是该结点的左孩子，否则指向该结点的前驱</span>
    <span class="token keyword">enum</span> <span class="token class-name">right_tag</span><span class="token punctuation">;</span><span class="token comment">//right_tag为0时指向的是该结点的右孩子，否则指向该结点的前驱</span>
    <span class="token keyword">struct</span> <span class="token class-name">BitNode</span> <span class="token operator">*</span>left_child<span class="token punctuation">;</span><span class="token comment">//左孩子/前驱结点</span>
    <span class="token keyword">struct</span> <span class="token class-name">BitNode</span> <span class="token operator">*</span>right_child<span class="token punctuation">;</span><span class="token comment">//右孩子/后继结点</span>
<span class="token punctuation">}</span> BitNode<span class="token punctuation">,</span> <span class="token operator">*</span>BitTree<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="线索二叉树代码实现" tabindex="-1"><a class="header-anchor" href="#线索二叉树代码实现" aria-hidden="true">#</a> 线索二叉树代码实现</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">char</span> ElementType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">ChildTag</span> <span class="token punctuation">{</span>
    Link<span class="token punctuation">,</span> Thread
<span class="token punctuation">}</span> PointerTag<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BiNode</span> <span class="token punctuation">{</span>
    ElementType data<span class="token punctuation">;</span>
    PointerTag left_tag<span class="token punctuation">,</span> right_tag<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">BiNode</span> <span class="token operator">*</span>left_child<span class="token punctuation">,</span> <span class="token operator">*</span>right_child<span class="token punctuation">;</span>
<span class="token punctuation">}</span> BiNode<span class="token punctuation">,</span> <span class="token operator">*</span>ThreadedBinaryTree<span class="token punctuation">;</span>


<span class="token keyword">void</span> <span class="token function">createThreadedBinaryTree</span><span class="token punctuation">(</span>ThreadedBinaryTree <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ElementType ch<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token punctuation">(</span>ThreadedBinaryTree<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data <span class="token operator">=</span> ch<span class="token punctuation">;</span>
    <span class="token function">createThreadedBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>left_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">createThreadedBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>right_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ThreadedBinaryTree pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 中序遍历索引化
 * @param T
 */</span>
<span class="token keyword">void</span> <span class="token function">InThreading</span><span class="token punctuation">(</span>ThreadedBinaryTree T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">InThreading</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>left_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//如果当前结点没有左孩子，标记当前结点为线索结点，指向上一个结点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>left_child <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        T<span class="token operator">-&gt;</span>left_tag <span class="token operator">=</span> Thread<span class="token punctuation">;</span>
        T<span class="token operator">-&gt;</span>left_child <span class="token operator">=</span> pre<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果pre没有右孩子，pre为线索结点，右孩子指向当前结点。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-&gt;</span>right_child <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pre<span class="token operator">-&gt;</span>right_tag <span class="token operator">=</span> Thread<span class="token punctuation">;</span>
        pre<span class="token operator">-&gt;</span>right_child <span class="token operator">=</span> T<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    pre <span class="token operator">=</span> T<span class="token punctuation">;</span><span class="token comment">//pre指向当前结点，也就是作为上一个结点</span>
    <span class="token function">InThreading</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>right_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">InOrderTraverse_Thread</span><span class="token punctuation">(</span>ThreadedBinaryTree p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//找到最左叶子结点，这时候的最左叶子结点的left_tag=Thread，所以在找到最左叶子结点时会退出循环</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>left_tag <span class="token operator">==</span> Link<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>left_child<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//输出结点data</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\t&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果右结点是Thread线索结点，并且有指向的结点</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>right_tag <span class="token operator">==</span> Thread <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>right_child <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>right_child<span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\t&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>right_child<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ThreadedBinaryTree T<span class="token punctuation">;</span>
    <span class="token function">createThreadedBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">InThreading</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">InOrderTraverse_Thread</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
ABDH##I##E#K##CF#M##G##
H	D	I	B	E	K	A	F	M	C	G	
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202204262043193.jpg" alt="IMG_0072" style="zoom:33%;"><h3 id="_8、树、森林、二叉树互相转换" tabindex="-1"><a class="header-anchor" href="#_8、树、森林、二叉树互相转换" aria-hidden="true">#</a> 8、树、森林、二叉树互相转换</h3><p><strong>重点理解：左子树保存儿子，右子树保存兄弟(next_sibling)/其他树</strong></p><ul><li><p>从树的定义我们可以知道，在满足树的条件下可以是任意形状的，一个结点可以有任意多个孩子，但是这样对树的处理显然要复杂很多。</p></li><li><p>所以我们研究出了一些条条框框的限定，如：二叉树，完全二叉树，满二叉树。</p></li><li><p>那么这时候就会想，如果所有的树都像二叉树一样方便处理就好了。</p></li></ul><h4 id="树到二叉树的转换" tabindex="-1"><a class="header-anchor" href="#树到二叉树的转换" aria-hidden="true">#</a> 树到二叉树的转换</h4><p><strong>步骤</strong></p><ol><li><p>在树中所有的兄弟结点之间加一条线</p></li><li><p>对每个结点，除了保留与其长子（最左孩子）的连线外，去掉该结点与其他孩子的连线。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202204262357110.jpg" alt="IMG_0076" style="zoom:50%;"></li></ol><h4 id="森林转成二叉树" tabindex="-1"><a class="header-anchor" href="#森林转成二叉树" aria-hidden="true">#</a> <strong>森林转成二叉树</strong></h4><p><strong>步骤</strong></p><ol><li>先将森林的每棵树转成二叉树</li><li>将各二叉树的根结点视为兄弟（sibling），从左到右连到一起，左子树的根作为二叉树的根，就形成了一颗二叉树。</li></ol><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202204262358778.jpg" alt="IMG_0078" style="zoom:50%;"><h4 id="二叉树到树、森林的转换" tabindex="-1"><a class="header-anchor" href="#二叉树到树、森林的转换" aria-hidden="true">#</a> 二叉树到树、森林的转换</h4><p><strong>步骤</strong></p><ol><li><p>若结点x是其双亲的左孩子，则把x的右孩子，的右孩子的右孩子，....,都与y连起来。</p></li><li><p>去除所有双亲到右孩子之间的连线。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202204270015921.jpg" alt="IMG_0079" style="zoom:33%;"></li></ol><p><strong>判断一颗二叉树能够转换成一棵树还是森林，只要看这棵树的根结点有没有右孩子，有的话就是森林，没有就是树</strong></p><h4 id="树与森林的遍历" tabindex="-1"><a class="header-anchor" href="#树与森林的遍历" aria-hidden="true">#</a> 树与森林的遍历</h4><p><strong>树的遍历分为两种方式：一种是先根遍历一种是后根遍历</strong></p><ul><li><p>先根遍历：先访问树的根结点，然后再依次先根遍历根的没课树（类似前面的前序遍历）。</p></li><li><p>后根遍历：先依次遍历每棵子树，再访问根结点（类似前面的后序遍历）。</p></li></ul><p><strong>森林的遍历也分为前序遍历和后序遍历，其实就是按照树的先根遍历和后根遍历依次访问森林的每一棵树。</strong></p><h4 id="树、森林、二叉树的规律" tabindex="-1"><a class="header-anchor" href="#树、森林、二叉树的规律" aria-hidden="true">#</a> 树、森林、二叉树的规律</h4><ul><li>树、森林的前序遍历和二叉树的前序遍历结果相同。</li><li>树、森林的后序遍历和二叉树的中序遍历结果相同。</li></ul><h3 id="_9、赫夫曼树-huffman" tabindex="-1"><a class="header-anchor" href="#_9、赫夫曼树-huffman" aria-hidden="true">#</a> 9、赫夫曼树（Huffman）</h3><blockquote><p>赫夫曼树，别名“哈夫曼树”、“最优树”以及“最优二叉树”，学习赫夫曼树之前首先要了解几个名词。</p><p>在n个结点（都做叶子结点且都有各自的权值）试图构建一颗树时，如果构建的这棵树的带权路径最小，称这棵树为“最优二叉树”，有时也叫“赫夫曼树”或者“哈夫曼树”。</p><p>在构建赫夫曼树时，要使树的带权路径长度最小只需遵循一个原则，那就是：权重越大的结点离树根越近。（在图 1 中，因为结点 a 的权值最大，所以理应作为根结点的孩子结点。）</p><ul><li><strong>路径</strong>：在一颗树中，一个结点到另一个结点的通路称为路径。（图 1 中，从根结点到结点a之间的通路就是一条路径。）</li><li><strong>路径长度</strong>：在一条路径中，每经过一个结点，路径的长度都要加1，例如在一棵树中，规定根结点为 1 层，那么从根结点到第 i 层结点的路径长度为 i - 1 。（图 1 中，从根结点到结点c的路径长度为3。）</li><li><strong>结点的权</strong>：给每一个结点赋予一个新的数值，被称为这个结点的权。（例如图 1 中，结点a的权为7，结点b的权为5。）</li><li><strong>结点的带权路径长度</strong>：指的是从根结点到该结点之间的的路径长度与该结点的权的乘积。（例如图 1 中，结点 b 的带权路径长度为 2 * 5 = 10）</li><li><strong>树的带权路径长度</strong>：指树中所有叶子结点的带权路径长度之和。通常记作“WPL（Weighted Path Length）”。（例如图 1 中，这棵树的带权路径长度为： WPL = 7 *1 + 5 * 2 + 2 * 3 + 4 * 3 ）。</li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202204270104042.jpg" alt="IMG_0080" style="zoom:25%;"></blockquote><h4 id="构建赫夫曼树" tabindex="-1"><a class="header-anchor" href="#构建赫夫曼树" aria-hidden="true">#</a> 构建赫夫曼树</h4><p>对于给定的有各权值的n个结点，构建赫夫曼树有一个行之有效的办法：</p><ol><li>在n个权值中选出两个最小的权值，对应的两个结点组成一颗新的二叉树 <strong>权值小的在左边，权值大的在右边</strong>，且新二叉树的根结点的权值为左右孩子权值的和。</li><li>在原有的n个权值中删除最小的两个权值，同时将新的权值加入到 n-2 个权值的行列中，以此类推。</li><li>重复1和2 ，直到所有的结点构建成一颗二叉树位置，这棵树就是赫夫曼树。</li></ol><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202204282018093.jpeg" alt="WechatIMG199" style="zoom:33%;"><p>上图中:（A）给定了四个结点 a、b、c、d，权值分别为7、5、2、4；</p><p>​ （B）找出权值最小的两个结点 2、4，构建一颗二叉树，树根的权值为2+4=6。接着在剩余未加入二叉树的结点和刚构建的的二叉树权值中再找出最权值最小的结点/树，加入到二叉树的树根。</p><p>​ （C）重复以上的步骤。</p><p>​ （D）所有的结点构建成了一颗赫夫曼树。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>

<span class="token comment">//赫夫曼树结点结构</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> weight<span class="token punctuation">;</span><span class="token comment">//结点权值</span>
    <span class="token keyword">int</span> parent<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span><span class="token comment">//分别是父结点、左孩子、右孩子在数组中的下标位置</span>
<span class="token punctuation">}</span> HTNode<span class="token punctuation">,</span> <span class="token operator">*</span>HuffmanTree<span class="token punctuation">;</span>


<span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span>HuffmanTree p<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>m1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>m2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> min1<span class="token punctuation">,</span> min2<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token operator">-&gt;</span>parent <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//找到还没有构建进树的结点，end根结点构造到的位置</span>
    min1 <span class="token operator">=</span> j<span class="token punctuation">;</span>
    j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//加一后继续比较</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token operator">-&gt;</span>parent <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//在上次找到的位置的基础上继续找第二个结点</span>
    min2 <span class="token operator">=</span> j<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">+</span> min1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight <span class="token operator">&gt;</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果最小权值大于第二小权值，将它们交换</span>
        min2 <span class="token operator">=</span> min1<span class="token punctuation">;</span>
        min1 <span class="token operator">=</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token operator">-&gt;</span>parent <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//有父节点，跳过</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight <span class="token operator">&lt;</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> min1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//小于最小权值，将原来的的最小权值给第二小权值，再设置最小权值</span>
            min2 <span class="token operator">=</span> min1<span class="token punctuation">;</span>
            min1 <span class="token operator">=</span> j<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight <span class="token operator">&lt;</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> min2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight<span class="token punctuation">)</span> min2 <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">//如果小于第二小权值，替换</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>m1 <span class="token operator">=</span> min1<span class="token punctuation">;</span>
    <span class="token operator">*</span>m2 <span class="token operator">=</span> min2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">getPathLen</span><span class="token punctuation">(</span>HuffmanTree ht<span class="token punctuation">,</span> HuffmanTree node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 *
 * @param hu
 * @param ws
 * @param n
 */</span>
<span class="token keyword">void</span> <span class="token function">CreateHuffmanTree</span><span class="token punctuation">(</span>HuffmanTree <span class="token operator">*</span>hu<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>ws<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>hu <span class="token operator">=</span> <span class="token punctuation">(</span>HuffmanTree<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HTNode<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    HuffmanTree p <span class="token operator">=</span> <span class="token operator">*</span>hu<span class="token punctuation">;</span>
    <span class="token comment">//构建存放数据的结点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>ws <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//构建根结点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//查找权值最小的两个结点或者一颗树</span>
    <span class="token keyword">int</span> min1<span class="token punctuation">;</span><span class="token comment">//最小权值</span>
    <span class="token keyword">int</span> min2<span class="token punctuation">;</span><span class="token comment">//第二小权值</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">select</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>min1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>min2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> min1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>parent <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> min2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>parent <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//设置找出来的两个最小结点的父节点为当前结点</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>left <span class="token operator">=</span> min1<span class="token punctuation">;</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>right <span class="token operator">=</span> min2<span class="token punctuation">;</span>
        <span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> min1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight <span class="token operator">+</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> min2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> WPL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">getPathLen</span><span class="token punctuation">(</span><span class="token operator">*</span>hu<span class="token punctuation">,</span> <span class="token operator">*</span>hu <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;路径长度：%d\\t结点的权：%d\\n&quot;</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>hu<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        WPL <span class="token operator">+=</span> len <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>hu<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>weight<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;WPL：%d\\n&quot;</span><span class="token punctuation">,</span> WPL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">getPathLen</span><span class="token punctuation">(</span>HuffmanTree ht<span class="token punctuation">,</span> HuffmanTree node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>parent <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> ht <span class="token operator">+</span> node<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>HuffmanTree hu<span class="token punctuation">,</span> HuffmanTree p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//left==0和right==0都可以表示是叶子结点，为什么要加上right==0呢？因为顺序存储结构是从0开始的，树的构建是从左到右的，因此left==0并不能确定这是个叶子结点</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">display</span><span class="token punctuation">(</span>hu<span class="token punctuation">,</span> hu <span class="token operator">+</span> p<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">display</span><span class="token punctuation">(</span>hu<span class="token punctuation">,</span> hu <span class="token operator">+</span> p<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*中序遍历
        if (p-&gt;left || p-&gt;right) display(hu, hu + p-&gt;left);
        if (p-&gt;left == 0 &amp;&amp; p-&gt;right == 0) {
            printf(&quot;%d\\n&quot;, p-&gt;weight);
            return;
        }
        if (p-&gt;right) display(hu, hu + p-&gt;right);
     */</span>
    <span class="token comment">/*后序遍历
        if (p-&gt;left || p-&gt;right) display(hu, hu + p-&gt;left);
        if (p-&gt;right) display(hu, hu + p-&gt;right);
        if (p-&gt;left == 0 &amp;&amp; p-&gt;right == 0) {
           printf(&quot;%d\\n&quot;, p-&gt;weight);
           return;
   }
    */</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ws<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    HuffmanTree hu<span class="token punctuation">;</span>
    <span class="token function">CreateHuffmanTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hu<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">display</span><span class="token punctuation">(</span>hu<span class="token punctuation">,</span> <span class="token punctuation">(</span>hu <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">/*
路径长度：4	结点的权：1
路径长度：4	结点的权：2
路径长度：2	结点的权：9
路径长度：3	结点的权：4
路径长度：2	结点的权：5
路径长度：2	结点的权：8
WPL：68
5
1
2
4
8
9
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205012330605.jpeg" alt="IMG_0083"></p><h4 id="赫夫曼编码-huffman-coding" tabindex="-1"><a class="header-anchor" href="#赫夫曼编码-huffman-coding" aria-hidden="true">#</a> 赫夫曼编码（Huffman coding）</h4><blockquote><p><strong>赫夫曼编码</strong></p><p>在数据膨胀，信息爆炸的今天，数据压缩的意义不言而喻。谈到数据压缩，就不得不提赫夫曼（Huffman）编码，赫夫曼编码是首个使用的压缩编码方案，即使在今天的许多知名压缩算法里，依然可以见到赫夫曼编码的影子。</p><p>另外，在数据通信中，用二进制给每个字符进行编码时不得不面对的一个问题是如何使电文总长度最短，且不产生二义性。根据字符出现的频率，利用赫夫曼编码可以构造出一种不等长的二进制，使编码后的电文长度最短，且保证不产生二义性。</p><ul><li><p>赫夫曼编码也翻译为哈夫曼编码(Huffman Coding)，又称霍夫曼编码，是一种<strong>编码方式</strong>,是一种用于<strong>无损数据压缩</strong>的<strong>熵编码</strong>（权编码）算法。</p></li><li><p>赫夫曼编码是 <strong>赫哈夫曼树</strong> 在电讯通信中的经典的应用之一。</p></li><li><p>赫夫曼编码广泛地用于<strong>数据文件压缩</strong>。其压缩率通常在**20%～90%**之间。</p></li><li><p>赫夫曼码是可变字长编码(VLC)的一种。Huffman 于 1952 年提出一种编码方法，称之为最佳编码。</p></li></ul></blockquote><p><strong>通信领域中信息传递的几种方式</strong></p><ol><li><p>定长编码</p><p>比如ASCII码，它的每个字符占1个字节=8位</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//原始字符</span>
i like c i like js <span class="token keyword">do</span> you like
<span class="token comment">//对应的ASCII码</span>
<span class="token number">105</span> <span class="token number">32</span> <span class="token number">108</span> <span class="token number">105</span> <span class="token number">107</span> <span class="token number">101</span> <span class="token number">32</span> <span class="token number">99</span> <span class="token number">32</span> <span class="token number">105</span> <span class="token number">32</span> <span class="token number">108</span> <span class="token number">105</span> <span class="token number">107</span> <span class="token number">101</span> <span class="token number">32</span> <span class="token number">106</span> <span class="token number">115</span> <span class="token number">32</span> <span class="token number">100</span> <span class="token number">111</span> <span class="token number">32</span> <span class="token number">121</span> <span class="token number">111</span> <span class="token number">117</span> <span class="token number">32</span> <span class="token number">108</span> <span class="token number">105</span> <span class="token number">107</span> <span class="token number">101</span>
<span class="token comment">//ASCII对应的二进制</span>
<span class="token number">01101001</span> <span class="token number">00100000</span> <span class="token number">01101100</span> <span class="token number">01101001</span> <span class="token number">01101011</span> <span class="token number">01100101</span> <span class="token number">00100000</span> <span class="token number">01100011</span> <span class="token number">00100000</span> <span class="token number">01101001</span> <span class="token number">00100000</span> <span class="token number">01101100</span> <span class="token number">01101001</span> <span class="token number">01101011</span> <span class="token number">01100101</span> <span class="token number">00100000</span> <span class="token number">01101010</span> <span class="token number">01110011</span> <span class="token number">00100000</span> <span class="token number">01100100</span> <span class="token number">01101111</span> <span class="token number">00100000</span> <span class="token number">01111001</span> <span class="token number">01101111</span> <span class="token number">01110101</span> <span class="token number">00100000</span> <span class="token number">01101100</span> <span class="token number">01101001</span> <span class="token number">01101011</span> <span class="token number">01100101</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>​ 按照上面的二进制来传递信息，总长度（包括空格）240位</p><ol start="2"><li><p>变长编码</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//原始字符</span>
i like c i like js <span class="token keyword">do</span> you like
 <span class="token comment">//各字符对应的出现个数</span>
j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">6</span>， <span class="token operator">=</span><span class="token number">8</span>
<span class="token comment">//按照各个字符出现的次数进行编码，原则上出现次数越多，则编码越小，比如 空格出现了8次，编码为0，其他的一次类推</span>
<span class="token number">0</span><span class="token operator">=</span> <span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">=</span>i<span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">=</span>e<span class="token punctuation">,</span><span class="token number">11</span><span class="token operator">=</span>k<span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">=</span>l<span class="token punctuation">,</span><span class="token number">101</span><span class="token operator">=</span>c<span class="token punctuation">,</span><span class="token number">110</span><span class="token operator">=</span>u<span class="token punctuation">,</span><span class="token number">111</span><span class="token operator">=</span>y<span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">=</span>o<span class="token punctuation">,</span><span class="token number">1001</span><span class="token operator">=</span>d<span class="token punctuation">,</span><span class="token number">1010</span><span class="token operator">=</span>s<span class="token punctuation">,</span><span class="token number">1011</span><span class="token operator">=</span>j
<span class="token comment">//按照上面的各字符的编码，对原始字符编码后</span>
  i 空格 l i k e <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token number">1</span> <span class="token number">0</span> <span class="token number">100</span> <span class="token number">1</span> <span class="token number">11</span> <span class="token number">10</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token number">1010011110</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>前缀码（赫夫曼编码）</p><p>字符编码都<strong>不能是其他字符编码的前缀</strong>，符合此要求的编码叫做<strong>前缀编码</strong>，即不能匹配到重复的编码。上面的编码都不是前缀码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//原始字符</span>
i like c i like js <span class="token keyword">do</span> you like
 <span class="token comment">//各字符对应的出现个数</span>
j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">6</span>， <span class="token operator">=</span><span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照上面字符出现的次数构建一颗赫夫曼树，字符出现的次数作为权值。</p><p>构建好的赫夫曼树如下图：</p><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205020157256.jpeg" alt="IMG_0085"></p><p>根据赫夫曼树，给各个字符规定编码（前缀编码）：</p><ul><li>向左路径为<strong>0</strong></li><li>向右路径为<strong>1</strong></li></ul><p>根据从根结点到子结点的路径来编码，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>y<span class="token operator">:</span><span class="token number">0000</span>	u<span class="token operator">:</span><span class="token number">0001</span>	k<span class="token operator">:</span><span class="token number">001</span>	     <span class="token operator">:</span><span class="token number">01</span>
e<span class="token operator">:</span><span class="token number">100</span>		c<span class="token operator">:</span><span class="token number">1010</span> 	j<span class="token operator">:</span><span class="token number">10110</span>		s<span class="token operator">:</span><span class="token number">10111</span>
d<span class="token operator">:</span><span class="token number">11000</span>	o<span class="token operator">:</span><span class="token number">11001</span>	l<span class="token operator">:</span><span class="token number">1101</span>		i<span class="token operator">:</span><span class="token number">111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据给出的<strong>前缀编码</strong>（赫夫曼编码），<strong>i like c i like js do you like</strong> 字符串对应的编码为（注意这里我们使用的无损压缩）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">11101110111100110001101001111011101111001100011011010111011100011001010000110010001011101111001100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此编码总长度：98，原始定长编码长度为：240，压缩了<strong>240-98/240=59%</strong>。</p><p>此编码满足前缀码要求，即字符编码不能是其他字符编码的前缀。不会造成多义性，比如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">111011101111001100</span>
i 空格 l i k e
<span class="token number">111</span> <span class="token number">01</span> <span class="token number">1101</span> <span class="token number">111</span> <span class="token number">001</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单说就是：上面给出的每个字符的编码都是唯一的</p></li></ol><p><strong>注意事项</strong>：<strong>赫夫曼树根据排序方法不同，可能不太一样，这样对应的赫夫曼编码也完全不一样</strong>，但是WPL是一样的，都是最小的，最后生成的赫夫曼编码长度也是一样的（压缩程度也是一样的）。</p><p>什么意思呢？比如数列 3,3,3,3,4.5,6,7 有很多相同的树结点，每次最小的两个组成一棵树：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>原始<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span>
第一次<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token comment">//减少了两个权值为3的树结点，多了一个权值为6的树</span>
第二次<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token comment">//减少了两个权值为3的树结点，多了一个权值为6的树</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么问题来了：相同权值，你怎么排序？这个排序不稳定，导致后面每次重新生成树的编码都对应不上同一个字符。</p><p>但是他们的WPL是一样的，也就是最后用赫夫曼编码之后的数据长度是一样的（压缩程度也一样）。</p><p>下面对比不同的生成规则，生成的树的区别：</p><p>分别是：每次生成新的二叉树排在相同权值的后面，每次生成新的二叉树排在相同权值的前面</p><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205020325569.jpeg" alt="IMG_0086"></p><p>重点区别在权值为2的子树上：简单的说左边的<strong>结点优先</strong>，右边的<strong>树优先</strong>。</p><h4 id="赫夫曼编码压缩代码实现" tabindex="-1"><a class="header-anchor" href="#赫夫曼编码压缩代码实现" aria-hidden="true">#</a> 赫夫曼编码压缩代码实现</h4><blockquote><p><strong>Huffman.h</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;string.h&quot;</span></span>
<span class="token comment">//置某一位为1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SET_BIT_ONE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">|=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token comment">//置某一位为0</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SET_BIT_ZERO</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token comment">//某一位取反</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REV_BIT</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">^=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token comment">//获取谋一位的值</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_BIT</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>

<span class="token comment">/** 记录最后一个字节占用情况的位长度
 * 将字符形式的code存到字节中，一个字节有8位 ，需要记录code的长度，code不一定能占满每个字节，从而导致读取到多余的数据，这里使用后4位来存储最后一个字节占用情况，4位刚好可以存下一个字节的位数8
 * 例如code ：11001110 10
 * 一个字节8位：00000000
 * code需要两个字节才能存储，存入字节后 11001110 10000000        //多出 000000，可能导致会找到错误的数据或程序出错
 * 使用最后一个字节的低四位来记录字节占用的情况，11001110 10000000   记录长度后变成 11001110 10000010   //code第二个字节用来2位，用四位二进制表示：0010，把它的长度2存在低四位
 *
 * 同时还需要一个位来记录 code是否和记录长度的4位共用一个字节，
 * 比如：code长度为13 + 记录长度的4位 = 17 ，需要3个字节才能存储了
 * 那么记录长度的4位就要放到第三个字节存储了，但是有个问题，就是 你不知道这四个位记录的是当前这个字节占用的位数还是上个字节占用的位数，因此还需要增加一个位来区分记录的是哪个字节
 * 约定：最后一个字节的第5位记录长度的是当前字节还是上个字节
 * 0：最后一个字节
 * 1：倒数第二个字节
 *
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LAST_BYTE_USED_LEN</span> <span class="token expression"><span class="token number">5</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">htNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">htNode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>
<span class="token punctuation">}</span> HtNode<span class="token punctuation">,</span> <span class="token operator">*</span>PHTNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">hTree</span> <span class="token punctuation">{</span>
    PHTNode root<span class="token punctuation">;</span>
<span class="token punctuation">}</span> HTree<span class="token punctuation">,</span> <span class="token operator">*</span>PHTree<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">htcNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> data<span class="token punctuation">;</span><span class="token comment">//字符</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>code<span class="token punctuation">;</span><span class="token comment">//字符对应的编码</span>
    <span class="token keyword">struct</span> <span class="token class-name">htcNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> HtcNode<span class="token punctuation">,</span> <span class="token operator">*</span>PHtcNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">htcTable</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">htcNode</span> <span class="token operator">*</span>front<span class="token punctuation">,</span> <span class="token operator">*</span>rear<span class="token punctuation">;</span>
<span class="token punctuation">}</span> HtcTable<span class="token punctuation">,</span> <span class="token operator">*</span>PHtcTable<span class="token punctuation">;</span>

PHTree <span class="token function">buildHTree</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>symbol<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">traversalTree</span><span class="token punctuation">(</span>PHTNode node<span class="token punctuation">,</span> PHtcTable table<span class="token punctuation">,</span> <span class="token keyword">char</span> code<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

PHtcTable <span class="token function">buildTable</span><span class="token punctuation">(</span>PHTree ht<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">encode</span><span class="token punctuation">(</span>PHtcTable table<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">decode</span><span class="token punctuation">(</span>PHTree tree<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>code<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">codeToBinary</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>code<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>biLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">binaryToCode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>binaryCode<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

PHTree <span class="token function">zip</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>otPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">unzip</span><span class="token punctuation">(</span>PHTree tree<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>otPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>queue.h</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Huffman.h&quot;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">qNode</span> <span class="token punctuation">{</span>
    HtNode <span class="token operator">*</span>data<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">qNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> QNode<span class="token punctuation">,</span> <span class="token operator">*</span>PQNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    PQNode first<span class="token punctuation">;</span><span class="token comment">//指向最小的结点，依次到大</span>
<span class="token punctuation">}</span> Queue<span class="token punctuation">,</span> <span class="token operator">*</span>PQueue<span class="token punctuation">;</span>


<span class="token comment">//初始化操作，建立一个空队列Q。</span>
PQueue <span class="token function">new_Queue</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//若队列Q存在，则销毁它。</span>
<span class="token keyword">void</span> <span class="token function">destroyQueue</span><span class="token punctuation">(</span>PQueue <span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//将队列Q清空。</span>
<span class="token keyword">void</span> <span class="token function">clearQueue</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//若队列Q为空，返回true，否则返回false。</span>
<span class="token keyword">_Bool</span> <span class="token function">queueEmpty</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//若队列Q存在且非空，用e返回队列Q的队头元素。</span>
<span class="token keyword">void</span> <span class="token function">getHead</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">,</span> PQNode <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//若队列Q存在，插入新元素e到队列Q中并成为队尾元素。</span>
<span class="token keyword">void</span> <span class="token function">addQueue</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">,</span> PHTNode e<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//删除队列Q中队头元素</span>
<span class="token keyword">void</span> <span class="token function">deQueue</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队列Q的元素个数</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">queueLength</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>queue.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;queue.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Huffman.h&quot;</span></span>

<span class="token comment">//初始化操作，建立一个空队列Q。</span>
PQueue <span class="token function">new_Queue</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PQueue queue <span class="token operator">=</span> <span class="token punctuation">(</span>PQueue<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;申请内存空间失败！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    queue<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>first <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> queue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//若队列Q存在，按weight从小到大插入新元素e</span>
<span class="token keyword">void</span> <span class="token function">addQueue</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">,</span> PHTNode htNode<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PQNode node <span class="token operator">=</span> <span class="token punctuation">(</span>PQNode<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> htNode<span class="token punctuation">;</span>

    node<span class="token operator">-&gt;</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>first <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果队列是NULL</span>
        queue<span class="token operator">-&gt;</span>first <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>first<span class="token operator">-&gt;</span>weight <span class="token operator">&gt;=</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果小于或者等于对头则插入到队列头</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>first<span class="token punctuation">;</span>
        queue<span class="token operator">-&gt;</span>first <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//找到合适的位置，weight从小到大排列</span>
    PQNode p <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>first<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>weight <span class="token operator">&lt;</span> weight <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>weight <span class="token operator">&lt;</span> weight<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//若队列Q存在且非空，用e返回队列Q的队头元素。</span>
<span class="token keyword">void</span> <span class="token function">getHead</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">,</span> PQNode <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>e <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>first<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//删除队列Q中队头元素</span>
<span class="token keyword">void</span> <span class="token function">deQueue</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>first <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    PQNode p <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>first<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>first <span class="token operator">=</span> p<span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//返回队列Q的元素个数</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">queueLength</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> queue<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//若队列Q为空，返回true，否则返回false。</span>
<span class="token keyword">_Bool</span> <span class="token function">queueEmpty</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> queue<span class="token operator">-&gt;</span>first <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//将队列Q清空。</span>
<span class="token keyword">void</span> <span class="token function">clearQueue</span><span class="token punctuation">(</span>PQueue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> queue<span class="token operator">-&gt;</span>first <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    PQNode p <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>first<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>first <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//若队列Q存在，则销毁它。</span>
<span class="token keyword">void</span> <span class="token function">destroyQueue</span><span class="token punctuation">(</span>PQueue <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearQueue</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>queue <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>Huffman.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Huffman.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;queue.h&quot;</span></span>


PHTree <span class="token function">buildHTree</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>symbol<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//统计symbol中每个字符出现的次数</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> counts<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counts<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> symbol<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//创建一个根据出现次数从小到达排序的队列</span>
    PQueue queue <span class="token operator">=</span> <span class="token function">new_Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//将出现过的字符存入队列</span>
            PHTNode htNode <span class="token operator">=</span> <span class="token punctuation">(</span>PHTNode<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HtNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            htNode<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span><span class="token comment">//将无符号，转成回有符号</span>
            htNode<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            htNode<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token function">addQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> htNode<span class="token punctuation">,</span> counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    PQNode qn <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">getHead</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>qn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取队头</span>
    PHTree ht <span class="token operator">=</span> <span class="token punctuation">(</span>PHTree<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HTree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>qn <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        PHTNode htNode <span class="token operator">=</span> <span class="token punctuation">(</span>PHTNode<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HtNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> weight <span class="token operator">=</span> qn<span class="token operator">-&gt;</span>weight<span class="token punctuation">;</span>
        htNode<span class="token operator">-&gt;</span>left <span class="token operator">=</span> qn<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        <span class="token function">deQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除使用过的</span>
        <span class="token function">getHead</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>qn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取最新的</span>
        weight <span class="token operator">+=</span> qn<span class="token operator">-&gt;</span>weight<span class="token punctuation">;</span>
        htNode<span class="token operator">-&gt;</span>right <span class="token operator">=</span> qn<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        <span class="token function">deQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除使用过的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">queueEmpty</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//队列已清空</span>
            ht<span class="token operator">-&gt;</span>root <span class="token operator">=</span> htNode<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">addQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> htNode<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并后入队</span>
        <span class="token function">getHead</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>qn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ht<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

PHtcTable <span class="token function">buildTable</span><span class="token punctuation">(</span>PHTree ht<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建编码与字符对应的表</span>
    PHtcTable table <span class="token operator">=</span> <span class="token punctuation">(</span>PHtcTable<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HtcTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    table<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    table<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> code<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//零时存放编码</span>
    <span class="token function">traversalTree</span><span class="token punctuation">(</span>ht<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> table<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//递归树生成编码</span>
<span class="token keyword">void</span> <span class="token function">traversalTree</span><span class="token punctuation">(</span>PHTNode node<span class="token punctuation">,</span> PHtcTable table<span class="token punctuation">,</span> <span class="token keyword">char</span> code<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> node<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
        PHtcNode htcNode <span class="token operator">=</span> <span class="token punctuation">(</span>PHtcNode<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HtcNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        htcNode<span class="token operator">-&gt;</span>data <span class="token operator">=</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        htcNode<span class="token operator">-&gt;</span>code <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">strlen</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>htcNode<span class="token operator">-&gt;</span>code<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c=&gt;%s\\t&quot;</span><span class="token punctuation">,</span> htcNode<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> htcNode<span class="token operator">-&gt;</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        htcNode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-&gt;</span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            table<span class="token operator">-&gt;</span>front <span class="token operator">=</span> htcNode<span class="token punctuation">;</span>
            table<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> htcNode<span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        table<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> htcNode<span class="token punctuation">;</span>
        table<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> htcNode<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
        <span class="token function">traversalTree</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> table<span class="token punctuation">,</span> code<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span>
        <span class="token function">traversalTree</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> table<span class="token punctuation">,</span> code<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">encode</span><span class="token punctuation">(</span>PHtcTable table<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> len <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> charSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>code <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>charSize <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    PHtcNode p<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> table<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>data <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">strcat</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> code<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">codeToBinary</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>code<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>biLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> codeLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取二进制字符串个数</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> codeLen <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token comment">//计算需要多少个字节存储二进制</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> codeLen <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">//存不下的个数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>len<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//如果不能被整除，多加一个字节来存储</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> LAST_BYTE_USED_LEN<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span>len<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//如果被整除，或者加上记录长度后存放不下</span>
    <span class="token operator">*</span>biLen <span class="token operator">=</span> len<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>binaryCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//字符串形式二进制转二进制</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token function">SET_BIT_ONE</span><span class="token punctuation">(</span>binaryCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            y<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//给字节加上code长度数据</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>last <span class="token operator">=</span> binaryCode <span class="token operator">+</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//第一种情况，code刚好占满字节</span>
        <span class="token function">SET_BIT_ONE</span><span class="token punctuation">(</span><span class="token operator">*</span>last<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置存储的是倒数第二个字节的占用情况</span>
        <span class="token function">SET_BIT_ONE</span><span class="token punctuation">(</span><span class="token operator">*</span>last<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置上个字节占用了8的字节情况，8</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//第二种情况，code没占满字节，剩余部分不可存下长度</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> LAST_BYTE_USED_LEN<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">SET_BIT_ONE</span><span class="token punctuation">(</span><span class="token operator">*</span>last<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>y<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GET_BIT</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">SET_BIT_ONE</span><span class="token punctuation">(</span><span class="token operator">*</span>last<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token comment">//在最后一个字节的低四位设置长度</span>
        <span class="token comment">//第三种情况，code没占满字节 并且 剩余部分可以存下长度</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> LAST_BYTE_USED_LEN<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">[</span>codeLen <span class="token operator">-</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">SET_BIT_ONE</span><span class="token punctuation">(</span><span class="token operator">*</span>last<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                i<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> binaryCode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">binaryToCode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>binaryCode<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">//解码后字符个数</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>code <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请内存空间</span>

    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            code<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GET_BIT</span><span class="token punctuation">(</span>binaryCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;1&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">char</span> last <span class="token operator">=</span> binaryCode<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最后一个字节</span>
    <span class="token keyword">char</span> lastLen <span class="token operator">=</span> last<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">SET_BIT_ZERO</span><span class="token punctuation">(</span>lastLen<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取上一个字节code占用位数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GET_BIT</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取最后一个字节的第5位，判断记录长度的是当前字节还是上个字节，0是当前字节，1是上一个字节</span>
        <span class="token comment">//第一种情况，code刚好占满字节</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastLen <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span>code<span class="token punctuation">[</span>count <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
        <span class="token comment">//第二种情况，code没占满字节，剩余部分不可存下长度</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastLen <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>code<span class="token punctuation">[</span>count <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">+</span> lastLen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//第三种情况，code没占满字节 并且 剩余部分可以存下长度</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lastLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            code<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GET_BIT</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;1&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> code<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

PHTree <span class="token function">zip</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>otPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;打开文件失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置文件流位置指示器到末尾 byte</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">ftell</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取文件流指示器位置 byte</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>byte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置文件指示器到头</span>
    len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">fread</span><span class="token punctuation">(</span>byte<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PHTree ht <span class="token operator">=</span> <span class="token function">buildHTree</span><span class="token punctuation">(</span>byte<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据文件生成编码</span>
    PHtcTable table <span class="token operator">=</span> <span class="token function">buildTable</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成编码表</span>

    <span class="token keyword">char</span> <span class="token operator">*</span>code <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> byte<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编码</span>
    <span class="token function">free</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放原始编码</span>
    byte <span class="token operator">=</span> <span class="token function">codeToBinary</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编码转二进制</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>code1 <span class="token operator">=</span> <span class="token function">binaryToCode</span><span class="token punctuation">(</span>byte<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>otPath<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;打开文件失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span>byte<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ht<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">unzip</span><span class="token punctuation">(</span>PHTree tree<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>otPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;打开文件失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置文件流位置指示器到末尾 byte</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">ftell</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取文件流指示器位置 byte</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>byte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置文件指示器到头</span>
    len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">fread</span><span class="token punctuation">(</span>byte<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> <span class="token operator">*</span>code <span class="token operator">=</span> <span class="token function">binaryToCode</span><span class="token punctuation">(</span>byte<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>de <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> de<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>otPath<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;打开文件失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span>de<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">decode</span><span class="token punctuation">(</span>PHTree tree<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>code<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>
    PHTNode p <span class="token operator">=</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> codeLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> codeLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                size <span class="token operator">+=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
                new <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">memcpy</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">free</span><span class="token punctuation">(</span>dc<span class="token punctuation">)</span><span class="token punctuation">;</span>
                dc <span class="token operator">=</span> new<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            dc<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    new <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>dc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dc <span class="token operator">=</span> new<span class="token punctuation">;</span>
    <span class="token operator">*</span>len <span class="token operator">=</span> count<span class="token punctuation">;</span>
    <span class="token keyword">return</span> dc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>main.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Huffman.h&quot;</span></span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*//根据出现频率较多的字符生成赫夫曼树
    PHTree ht = buildHTree(&quot;根据赫夫曼树生成赫夫曼表，symbol字符，code对应编码&quot;);
    //根据赫夫曼树生成赫夫曼表，symbol字符，code对应编码
    PHtcTable table = buildTable(ht);
    //输入字符，在赫夫曼表中找到对应的字符symbol对应的编码code，并保存code
    char *code = encode(table, &quot;symbolssssssssccccc&quot;);
    printf(&quot;\\n%s &lt;- 编码-----编码长度 -&gt; %lu\\n&quot;, code, strlen(code));
    //根据code，在赫夫曼树中0往左走，1往右走，找到叶子结点，又从头查找
    char *deStr = decode(ht, code);
    printf(&quot;%s &lt;- 解码-----解码长度 -&gt; %lu\\n&quot;, deStr, strlen(deStr));
    free(code);
    free(deStr);*/</span>
    PHTree ht <span class="token operator">=</span> <span class="token function">zip</span><span class="token punctuation">(</span><span class="token string">&quot;/Users/liuyupei/Downloads/hello.mp4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/Users/liuyupei/Downloads/hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">unzip</span><span class="token punctuation">(</span>ht<span class="token punctuation">,</span><span class="token string">&quot;/Users/liuyupei/Downloads/hello&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/Users/liuyupei/Downloads/hello.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>压缩测试</strong></p><ul><li>很多格式本身就是经过压缩的，所以再压缩的效果不大（文本除外，他也是效果最明显的）</li><li>能做出专业的压缩软件的人，应该是很牛逼的人</li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205101946518.jpg" alt="视频压缩" style="zoom:50%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205101956518.png" alt="image-20220510195633371" style="zoom:50%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205101958969.png" alt="image-20220510195849832" style="zoom:50%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205102000858.png" alt="image-20220510200035707" style="zoom:50%;"><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205102005119.png" alt="image-20220510200507969" style="zoom:50%;"><h2 id="七、图-graph" tabindex="-1"><a class="header-anchor" href="#七、图-graph" aria-hidden="true">#</a> 七、图（Graph）</h2><blockquote><p>我们知道，数据之间的关系有 3 种，分别是 &quot;<strong>一对一</strong>&quot;、&quot;<strong>一对多</strong>&quot; 和 &quot;<strong>多对多</strong>&quot;，前两种关系的数据可分别用线性表和树结构存储，图是具有&quot;<strong>多对多</strong>&quot;逻辑关系数据的结构。</p><p><strong>图（Graph）由顶点的有穷非空集合(非空的有限集合) 和顶点之间的边的集合组成</strong>，通常表示为：G(V , E)，其中G表示一个图，V是图G中顶点的集合，E 是图 G 中边的集合。</p></blockquote><p>图的存储结构可以分为两种表现类型，分别是</p><ul><li>无向图（以下用图1表示）：</li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205102119337.png" alt="无向图" style="zoom:50%;"><ul><li>有向图（以下用图2表示）：</li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205102127799.png" alt="有向图" style="zoom:50%;"><ul><li><p>以上无向图：存储 V1、V2、V3、V4 的图结构，从图中可以看出数据之间具有 &quot;多对多&quot; 的关系。例如：V1 与 V2 和 V3 和 V4 建立着联系，V4 与 V1 和 V3 建立着联系，以此类推。</p></li><li><p>以上有向图：可以看到各个顶点之间的关系并不是 &quot;双向&quot; 的。比如：V4 只与 V1 存在联系（从V4可以直接找到V1），与 V3 没有直接联系；同样，V3 只与 V3存在联系（从 V3 可以直接找到 V4），与 V1 没有直接联系。</p></li><li><blockquote><p>图存储结构中，习惯用Vi表示图中的顶点，且所有的顶点构成的集合通常用V来表示，如上图中顶点的集合为</p><p>V = { V1,V2,V3,V4 };</p></blockquote></li></ul><h3 id="图的定义" tabindex="-1"><a class="header-anchor" href="#图的定义" aria-hidden="true">#</a> 图的定义</h3><ul><li><p>线性表中我们把数据元素叫元素、数中叫结点，在图中数据元素我们称之为 <strong>顶点( Vertex )</strong>。</p></li><li><p>线性表可以没有数据元素，称为空表；树中可以没有结点，称为空树；而图结构在国内大部分教材中强调<strong>顶点集合V要有穷非空(非空的有限集合)</strong>。</p></li><li><p>线性表中，相邻的数据元素之间具有线性关系；树结构中，相邻两层结点具有层级关系；而图结构中，任意<strong>两个顶点之间都可能有关系</strong>，顶点之间的逻辑关系用边来表示，（边：顶点之间的连线）边集可以是空的（与其他结点没有对应关系）。</p></li><li><p>无向边：若顶点Vi到Vj之间的边没有方向，则称这条边为<strong>无向边（Edge）</strong>，用无序偶 (Vi,Vj) （<strong>括号表示双向关系</strong>，(Vj,Vi)表示也可） 来表示。则 图1:</p><ul><li>G={ V,E };</li><li>V={ V1,V2,V3,V4 };</li><li>E={ ( V1,V2 ) , ( V1,V3 ) , ( V1,V4 ) , ( V3,V4 ) };</li><li>图中习惯用VR表示图中所有顶点之间的关系，VR = { (v1,v2),(v1,v4),(v1,v3),(v3,v4) }</li></ul></li><li><p>有向边：若从顶点 Vi 到 Vj 的边有方向 ( 图2 )，则称这条边为有向边，也称为弧（Arc），用有序偶 &lt;Vi,Vj&gt; （<strong>尖括号单向关系</strong>，顺序不可变） 来表示，Vi称为弧尾，Vj称为弧头( 无箭头的一端的顶点通常被称为：&quot;<strong>初始点</strong>&quot; 或 &quot;<strong>弧尾</strong>&quot; ，箭头那端被称为 &quot;<strong>终端点</strong>&quot; 或 &quot;<strong>弧头</strong>&quot; )，则 图2:</p><ul><li><p>G={ V,E };</p></li><li><p>V={ V1,V2,V3,V4 };</p></li><li><p>E={ &lt;V1,V2 &gt; , &lt; V1,V3 &gt; , &lt; V1,V4 &gt; , &lt; V3,V4 &gt; };</p></li><li><p>图中习惯用VR表示图中所有顶点之间的关系，VR = { &lt;V1,V2 &gt; , &lt; V1,V3 &gt; , &lt; V3,V4 &gt; , &lt; V4,V1 &gt; }</p></li></ul></li><li><p><strong>邻接点</strong>：</p><ul><li>对于无向图 G = (V,E) ，如果边 (V1,V2) $\\subseteq$ E ,则称顶点 V1 和 V2 <strong>互为邻接点(Adjacent)</strong>，即 V1 和 V2 相邻接。边 (V1,V2) <strong>依附(incident)于</strong>顶点 V1和V2 ，或者说边 (V1,V2) 与顶点 V1 和 V2 相关联。 <ul><li>如图1 ，顶点 V1 与 V2 互为邻接点，边 (V1,V2 ) 依附于 顶点 V1与V2上。</li></ul></li><li>对于有向图 G=(V,E) , 如果 &lt;V1,V2&gt; $\\subseteq$ E ，则称顶点<strong>V1邻接到顶点 V2</strong>，<strong>顶点 V2 邻接自顶点 V1</strong>。</li></ul></li><li><p><strong>度(Degree)</strong>：</p></li><li><p>无向图：顶点V的度(Degree)是和V相关联的边的数目，记为 TD(V) ，拿 图1的顶点V1 来说，该顶点 V1 的度为 3。</p></li><li><p>有向图：对于图中的一个顶点来说，箭头指向 V 的弧的数量为 V 的入度 ( In Degree , 记为 <strong>ID(V)</strong> ) ;箭头远离 V 的弧的数量为 V 的出度（ Out Degree ，记为 <strong>OD(V)</strong> ）；拿 图2 的顶点V1来说，该结点的入度为 1，出度为 2，<strong>该顶点的度</strong>为 TD(V) = ID(V) + OD(V) = 3。</p></li></ul><p>​</p><ul><li><p><strong>路径</strong>与<strong>回路</strong></p><ul><li><p>无论是无向图还是有向图，从一个顶点到另一个顶点途径的所有顶点组成的序列 (包括这两个顶点) , 称为一条<strong>路径(Path)</strong>。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205122005752.png" alt="image-20220512200301100" style="zoom:25%;"><p>​ 从顶点B到D的四种不同路径 (包括这两个顶点)</p><ul><li><p>在有向图中，每条路径或回路都是有方向的。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205122010490.png" alt="image-20220512201041435" style="zoom:25%;"><p>​ 从顶点B到D的两种路径，而顶点A到顶点B不存在路径</p></li><li><p>如果路径中的第一个顶点和最后一个顶点相同，则称此路径为 &quot;<strong>回路(Cycle)</strong>&quot; 或 &quot;环&quot;。</p></li><li><p>并且，若路径中各个结点都不重复，此路径又被称为 &quot;<strong>简单路径</strong>&quot;；同样，若回路中的顶点互不重复，此回路被称为 &quot;<strong>简单回路</strong>&quot; 或 &quot;<strong>简单环</strong>&quot;。</p></li><li><p>拿 图1 来说，从 V1 寸在一条路径还可以回到 V1 ，此路径为 {V1,V3,V4,V1} ，这是一个 &quot;<strong>回路</strong>&quot;（环），而且还是一个 &quot;<strong>简单回路</strong>&quot;</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205122020053.png" alt="image-20220512202012950" style="zoom:25%;"></li></ul></li></ul></li></ul><p>​ 简单环 非简单环</p><p>​</p><ul><li><p>**权(Weight)<strong>和</strong>网(Network)**的含义</p><p>在某些实际场景中，图中的每条 边(或弧) 会赋予一个实数来表示一定含义，这中与 边(或弧) 相匹配的实数被称为 &quot;权&quot;，而带权的图通常称为 &quot;<strong>网</strong>&quot; 。</p><p>​ 带权的图存储结构</p></li><li><p><strong>子图（Subgraph）</strong>：指的是由图中的一部分顶点构成的图称为原图的<strong>子图</strong>。</p><ul><li>假设有两个图G1=(V1,E1) 和 G2=(V2,E2)，如果V2$ \\subseteq $V1,E2$\\subseteq$E1，则称G2为G1的子图。</li></ul></li></ul><p><strong>图的存储结构分类</strong></p><p>根据不同的特征，图又可分为 <strong>完全图</strong>、<strong>连通图</strong>、<strong>稀疏图</strong> 和 <strong>稠密图</strong>。</p><ul><li>完全图：若图中各个顶点都与除自身外的其他顶点有关系，这样的无向图称为 <strong>完全图</strong>（无向完全图）；满足此条件的有向图则称为 <strong>有向完全图</strong>。</li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205112311695.png" alt="image-20220511231141642" style="zoom:50%;"><blockquote><p>具有n个顶点的完全图，图中边的数量为：n(n-1)/2；而对于具有n个顶点的有向完全图，图中的数量为 n(n-1)。</p><p>以上无向完全图：4(4-1)/2 = 6</p><p>以上有向完全图：4( 4-1)/2 = 12</p></blockquote><ul><li>稀疏图和稠密图：这两种图是相对存在的，即如果图中具有很少的边（或弧），此图就称为 &quot;<strong>稀疏图</strong>&quot;；反之则称为&quot;<strong>稠密图</strong>&quot;。</li></ul><p>稀疏和稠密的判断条件是：<strong>e &lt; nlogn</strong>，其中 e 表示图中边或弧的数量，n表示图中顶点的数量，如果式子成立，则为<strong>稀疏图</strong>，反之则为<strong>稠密图</strong>。</p><h3 id="连通图-connectedgraph" tabindex="-1"><a class="header-anchor" href="#连通图-connectedgraph" aria-hidden="true">#</a> 连通图(ConnectedGraph)</h3><ul><li><p>图中从一个顶点到另一个顶点，若存在至少一条路径，则称这<strong>两个顶点是连通的</strong>。如下图1中，虽然V1和V3没有直接关联，但从V1到V3存在两条路径，分别是 <strong>V1-V2-V3</strong> 和 <strong>V1-V4-V3</strong> , 因此 V1 和 V3 之间时连通的。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205122046143.png" alt="image-20220512204642090" style="zoom:33%;"></li></ul><p>​ 图1</p><ul><li>无向图中，如果任意两个顶点之间都能够连通，则称此无向图为<strong>连通图</strong>。例如，图2中的无向图就是一个连通图，因为此图中任意两个顶点之间都是连通的。</li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205102119337.png" alt="无向图" style="zoom:33%;"><p>​ 图2</p><ul><li><p>若无向图不是连通图，单图中某个子图符合连通图的性质，则称此子图为<strong>连通分量</strong>。</p><blockquote><p>上面提到，由图中的部分顶点和边构成的图为该图的子图，但这里的子图指的是<strong>图中 &quot;最大&quot; 的连通子</strong>图（也称&quot;<strong>极大连通子图</strong>&quot;）</p></blockquote></li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206180433735.png" alt="image-20220618043327668" style="zoom:33%;"><p>​ 图3.1）非连通图</p><blockquote><p>虽然 图3.1）的无向图不是连通图，但可以分解为 3 个 &quot;最大连通子图&quot; 图 3.2），它们都满足连通图的性质，因此都是连通分量。</p></blockquote><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206190301927.png" alt="image-20220619030127856" style="zoom:33%;"><p>​ 图3.2）连通分量</p><blockquote><p>图3.a）中的无向图只能分解为3部分各自连通的 &quot;<strong>最大连通子图（极大连通子图）</strong>&quot; 。</p></blockquote><blockquote><p>需要<strong>注意</strong>的是：连通分量的提出是以 &quot;整个无向图不是连通图&quot; 为前提的，因为如果无向图是连通图，则其无法分解出多个最大连通子图，因为图中的所有的顶点都是连通的，它本身也可以看作是一个&quot;极大连通子图&quot;(连通分量)，无法再分解了。</p></blockquote><p><strong>强连通图</strong></p><ul><li>有向图中，若任意两个顶点 Vi 和Vj ，<strong>满足从 Vi 到 Vj 以及 从 Vj 到 Vi 都连通</strong>，且都含有至少一条通路，则称此有向图为<strong>强连通图</strong>。</li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205141605660.png" alt="image-20220514160456813" style="zoom:25%;"><p>​ 图4 强连通图</p><ul><li>若有向图本身不是强连通图，但其包含的最大连通子图具有强连通图的性质，则称该子图为<strong>强连通分量</strong>。</li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205141615101.png" alt="image-20220514161515995" style="zoom:25%;"><p>​ 图5 强连通分量</p><ul><li>图5整个有向图虽然不是强连通图，但其包含两个强连通分量。</li></ul><h3 id="生成树" tabindex="-1"><a class="header-anchor" href="#生成树" aria-hidden="true">#</a> 生成树</h3><h4 id="生成树-1" tabindex="-1"><a class="header-anchor" href="#生成树-1" aria-hidden="true">#</a> 生成树</h4><p>对连通图的遍历，过程所经过的边和顶点的组合可看做一颗普通树，通常称为<strong>生成树</strong>。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206141344868.png" alt="image-20220614134427791" style="zoom:33%;"><p>​ 1.1 1.2</p><p>​ 图1</p><p>如图1所示，图1.1是一张连通图，图1.2对应的是两种不同遍历方式的生成树。</p><blockquote><p>连通图中，任意两个顶点之间可能含有多条通路，遍历连通图的方式也有多种，往往一张连通图可能有多种不同的生成树与之对应。</p></blockquote><p>连通图中的生成树必须满足以下2个条件：</p><ol><li>包含连通图中的所有顶点；</li><li>任意两顶点之间有且仅有一条通路；</li></ol><p>因此，连通图的生成树具有这样的特征，即<strong>生成树中的边的数量=顶点数-1</strong>；</p><h4 id="生成森林" tabindex="-1"><a class="header-anchor" href="#生成森林" aria-hidden="true">#</a> 生成森林</h4><p><strong>生成树是对应连通图来说的，而生成森林是对应非连通图来说的。</strong></p><p>我们知道，非连通图可分解为多个连通分量，而每个连通分量又各自对应多个生成树（至少一颗），因此与整个非连通图相对应的，是由多棵生成树组成的生成森林。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205122124546.png" alt="image-20220512212434432" style="zoom:25%;"><p>​ 图2.1 非连通图</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205122126947.png" alt="image-20220512212610835" style="zoom:25%;"><p>​ 图2.2 非连通图和连通分量</p><p>如图2.1所示，这是一张非连通图，可分解为3个连通分量（图2.2），其中各个连通分量对应的生成树如下图3所示：</p><p>​ <img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205182152216.png" alt="image-20220518215231097" style="zoom:25%;"></p><p>​ 图3 生成树</p><blockquote><p>注意，图3中列出的仅是各个连通分量的其中一种生成树。（不同遍历方式，对应的生成树也不同）</p></blockquote><p>因此，多个连通分量对应的多棵生成树就构成了生成森林。</p><h3 id="图的存储结构" tabindex="-1"><a class="header-anchor" href="#图的存储结构" aria-hidden="true">#</a> 图的存储结构</h3><ul><li><p>对于线性表来说，是一对一的关系，所以用数组或者链表均可简单存放，树结构是一对多关系，所以我们要用数组和链表的特性结合在一起才能更好的存放。</p></li><li><p>对于图这种多对多的情况，图上的任意一个顶点都可以看作是第一个顶点，任一顶点的邻接点之间也不存在次序关系。</p></li><li><p>任意两个顶点之间都可能存在关系，因此无法以数据元素在内存中的物理位置来表示元素之间的关系（内存在物理位置中是线性的，图是平面的）。</p></li></ul><p>图是由顶点和边或弧两部分组成的，合在一起比较困难，我们可以分为两个结构来分别存储。</p><ul><li>因为顶点不区分大小、主次，所以可以用一维数组来存储顶点。</li><li>边或弧是描述顶点与顶点之间的关系的，根据前面的定义，一维数组肯定是搞不定，所以需要二维数组。</li></ul><h4 id="邻接矩阵" tabindex="-1"><a class="header-anchor" href="#邻接矩阵" aria-hidden="true">#</a> 邻接矩阵</h4><h5 id="无向图" tabindex="-1"><a class="header-anchor" href="#无向图" aria-hidden="true">#</a> 无向图</h5><p>图的邻接矩阵（Adjacency Matrix）存储方式是用两个数组来表示图，一个一维数组存储图中的顶点，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息。</p><p>我们可以设置两个数组，顶点数组为 vertex[4]={V0,V1,V2,V3}; ，边数组为 arc[4] [4]为对称矩阵。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205260051929.png" alt="image-20220526005120185" style="zoom:33%;"><p>​ 有向图邻接矩阵（有向图是对称矩阵，红线两边是对成的）(0：无关系，1有关系)</p><p>对称矩阵：所谓对称矩阵就是n阶矩阵的元（元素，在矩阵中称为元）满足a[ i ][ j ]==a[ j ][ j ]（0&lt;=i,j&lt;=n）。即从矩阵的左上角到右下角的对角线为轴，左下和右上相对应的元是相等的。</p><p>有了这个二维数组组成的对称矩阵，我们可以知道图中的信息：</p><ul><li>要判定任意两个顶点是否右边无边就非常容易了；</li><li>要知道某个顶点的度，其实就是这个顶点Vi在邻接矩阵中第i行(或第i列)的元素之和；</li><li>求顶点Vi的所有邻接点，就是将矩阵中底i行元素扫描一边，arc[i][j]为1的就是邻接点。</li></ul><h5 id="有向图" tabindex="-1"><a class="header-anchor" href="#有向图" aria-hidden="true">#</a> 有向图</h5><p>无向图构成了一个对称矩阵，对于程序来说，有一半是可有可无的，浪费了内存空间。而有向图可以充分利用空间。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205262110493.png" alt="image-20220526211009399" style="zoom:33%;"><p>​ 邻接矩阵（有向图）</p><ul><li>有向图邻接矩阵的一些规律，如上图： <ul><li>顶点V1的入度为1，正好是V1列的各数之和；</li><li>顶点V1的出度为2，正好是V1行的各数之和；</li></ul></li></ul><h5 id="网" tabindex="-1"><a class="header-anchor" href="#网" aria-hidden="true">#</a> 网</h5><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205262128387.png" alt="image-20220526212826319" style="zoom:33%;"><p>​ 邻接矩阵（网）</p><ul><li>权值是一个自定的特定意义的值，比如可以用来表示两地的距离：南宁 -&gt; 玉林 （300KM）。</li><li>两个顶点没有关系时，用♾️表示，♾️：一个类型可以存储的最大值，可以用一个宏定义来存放，判断两个顶点是否有关系时，可以使用宏定义进行判断。</li></ul><h5 id="图的顺序存储结构代码实现-邻接矩阵" tabindex="-1"><a class="header-anchor" href="#图的顺序存储结构代码实现-邻接矩阵" aria-hidden="true">#</a> 图的顺序存储结构代码实现（邻接矩阵）</h5><blockquote><p><strong>代码实现</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;time.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VERTEX_NUM_MAX</span> <span class="token expression"><span class="token number">100</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VRType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> InfoType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VertexType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    UG<span class="token punctuation">,</span> DG<span class="token punctuation">,</span> UN<span class="token punctuation">,</span> DN
<span class="token punctuation">}</span> GraphType<span class="token punctuation">;</span><span class="token comment">//无向图，有向图，无向网，有向网</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    VRType adj<span class="token punctuation">;</span>
    InfoType <span class="token operator">*</span>info<span class="token punctuation">;</span>
<span class="token punctuation">}</span> ArcCell<span class="token punctuation">,</span> AdjMatrix<span class="token punctuation">[</span>VERTEX_NUM_MAX<span class="token punctuation">]</span><span class="token punctuation">[</span>VERTEX_NUM_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    VertexType vts<span class="token punctuation">[</span>VERTEX_NUM_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
    AdjMatrix matrix<span class="token punctuation">;</span>
    <span class="token keyword">int</span> vtx_num<span class="token punctuation">,</span> arc_num<span class="token punctuation">;</span>
    GraphType type<span class="token punctuation">;</span>
<span class="token punctuation">}</span> MGraph<span class="token punctuation">;</span>

<span class="token comment">/**
 * 定位顶点在顶点集的位置
 * @param graph
 * @param vtx
 * @return
 */</span>
<span class="token keyword">int</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>graph<span class="token punctuation">,</span> VertexType vtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>vts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> vtx<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 创建无向图邻接矩阵
 * @param graph
 */</span>
<span class="token keyword">void</span> <span class="token function">CreateUG</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//输入结点和边的数量</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化二维邻接矩阵</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//填充结点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> graph<span class="token operator">-&gt;</span>vts <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//填充边</span>
    <span class="token keyword">int</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tail <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> head <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;no find the vertex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//对称邻接矩阵</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 创建有向图
 * @param graph
 */</span>
<span class="token keyword">void</span> <span class="token function">CreateDG</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//填充结点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> graph<span class="token operator">-&gt;</span>vts <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//填充边</span>
    <span class="token keyword">int</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tail <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> head <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;no find the vertex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 创建无向网邻接矩阵
 * @param graph
 */</span>
<span class="token keyword">void</span> <span class="token function">CreateUN</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>
            graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//填充结点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> graph<span class="token operator">-&gt;</span>vts <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//填充边</span>
    <span class="token keyword">int</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> weight<span class="token punctuation">;</span>
    InfoType <span class="token operator">*</span>info<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        info <span class="token operator">=</span> <span class="token punctuation">(</span>InfoType <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>InfoType<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d %d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>weight<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tail <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> head <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">free</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;no find the vertex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> weight<span class="token punctuation">;</span>
        graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>
        graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> weight<span class="token punctuation">;</span>
        graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 创建有向网邻接矩阵
 * @param graph
 */</span>
<span class="token keyword">void</span> <span class="token function">CreateDN</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>
            graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//填充结点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> graph<span class="token operator">-&gt;</span>vts <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//填充边</span>
    <span class="token keyword">int</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> weight<span class="token punctuation">;</span>
    InfoType <span class="token operator">*</span>info<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        info <span class="token operator">=</span> <span class="token punctuation">(</span>InfoType <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>InfoType<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d %d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>weight<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tail <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> head <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">free</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;\\nno find the vertex\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> weight<span class="token punctuation">;</span>
        graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 选择创建邻接矩阵
 * @param graph
 */</span>
<span class="token keyword">void</span> <span class="token function">CreateGraph</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> UG<span class="token operator">:</span>
            <span class="token function">CreateUG</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> DG<span class="token operator">:</span>
            <span class="token function">CreateDG</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> UN<span class="token operator">:</span>
            <span class="token function">CreateUN</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> DN<span class="token operator">:</span>
            <span class="token function">CreateDN</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PrinterGraph</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>vtx_num<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> graph<span class="token operator">-&gt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MGraph graph<span class="token punctuation">;</span>
    <span class="token function">CreateGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrinterGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
输入：
0
6 10
1
2
3
4
5
6
1 2
2 3
3 1
1 4
4 3
3 6
6 1
4 6
6 5
5 4

输出：
0 1 1 1 0 1
1 0 1 0 0 0
1 1 0 1 0 1
1 0 1 0 1 1
0 0 0 1 0 1
1 0 1 1 1 0
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="邻接表" tabindex="-1"><a class="header-anchor" href="#邻接表" aria-hidden="true">#</a> 邻接表</h4><blockquote><p>邻接矩阵看起来很不错，首先是容易理解，第二是索引和编排都很舒服。</p><ul><li>但是对于边数相对顶点较少的图（例如：图1），这种结构无疑是对存储空间造成了极大的浪费。</li><li>因此我们可以考虑另一种存储结构，例如把数组和链表结合在一起存储，这种方式在图结构也适用，我们称为邻接表(Adjacency List)。</li><li>邻接表的存储方式 <ul><li>图中顶点用一个一维数组来存储，当然，顶点也可以用单链表来存储，不过数组可以更容易的读取顶点信息，更加方便。</li><li>图中每个顶点Vi的所有邻接点构成一个线性表，由于邻接点的个数不确定，所以我们选择用单链表来存储。</li></ul></li></ul></blockquote><p>​ 图1</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206022152984.png" alt="image-20220602215227917" style="zoom:33%;"><p>​ 邻接表（无向图）的存储结构</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206022128252.png" alt="image-20220602212801174" style="zoom:33%;"><p>​ 邻接表（有向图）的存储结构</p><blockquote><p>有时候为了便于确定顶点的入度，我们可以建立一个有向图逆邻接表</p></blockquote><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206022134776.png" alt="image-20220602213436708" style="zoom:33%;"><p>​ 逆邻接表（有向图）</p><blockquote><p>对于带权值的网图，可以在边集结点定义中增加一个数据域来存储权值即可（有向网和无向网都是如此）：</p></blockquote><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206022207406.png" alt="image-20220602220713338" style="zoom:33%;"><p>​ 邻接表（有向网）的存储结构</p><h5 id="邻接表代码实现" tabindex="-1"><a class="header-anchor" href="#邻接表代码实现" aria-hidden="true">#</a> 邻接表代码实现</h5><blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_VERTEX_SIZE</span> <span class="token expression"><span class="token number">10</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> InfoType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    UG<span class="token punctuation">,</span> DG<span class="token punctuation">,</span> UN<span class="token punctuation">,</span> DN
<span class="token punctuation">}</span> GraphType<span class="token punctuation">;</span><span class="token comment">//无向图，有向图，无向网，有向网</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token punctuation">{</span>
    InfoType <span class="token operator">*</span>info<span class="token punctuation">;</span>
    <span class="token keyword">int</span> adj<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> ArcNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VNode</span> <span class="token punctuation">{</span>
    DataType data<span class="token punctuation">;</span>
    ArcNode <span class="token operator">*</span>firstArc<span class="token punctuation">;</span>
<span class="token punctuation">}</span> VNode<span class="token punctuation">,</span> VertexList<span class="token punctuation">[</span>MAX_VERTEX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    VertexList vexList<span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex_num<span class="token punctuation">,</span> arc_num<span class="token punctuation">;</span>
    GraphType type<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Graph<span class="token punctuation">;</span>

<span class="token comment">/**
 * 定位顶点在顶点集的位置
 * @param g
 * @param data
 * @return
 */</span>
<span class="token keyword">int</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> DataType data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 创建无向图邻接表
 * @param g
 */</span>
<span class="token keyword">void</span> <span class="token function">CreateUG</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//输入顶点数量和边的数量</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex1i<span class="token punctuation">,</span> vex2i<span class="token punctuation">;</span>
    ArcNode <span class="token operator">*</span>arcs <span class="token operator">=</span> <span class="token punctuation">(</span>ArcNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ArcNode<span class="token punctuation">)</span> <span class="token operator">*</span> g<span class="token operator">-&gt;</span>arc_num <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i1 <span class="token operator">=</span> g<span class="token operator">-&gt;</span>arc_num <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    ArcNode <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex1i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex2i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vex1i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vex2i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;not found vertex!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//边1</span>
        new <span class="token operator">=</span> <span class="token punctuation">(</span>arcs <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        new<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        new<span class="token operator">-&gt;</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        new<span class="token operator">-&gt;</span>adj <span class="token operator">=</span> vex2i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc <span class="token operator">=</span> new<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> new<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">//边2</span>
        new <span class="token operator">=</span> <span class="token punctuation">(</span>arcs <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        new<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        new<span class="token operator">-&gt;</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        new<span class="token operator">-&gt;</span>adj <span class="token operator">=</span> vex1i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc <span class="token operator">=</span> new<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> new<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 创建有向图邻接表
 * @param g
 */</span>
<span class="token keyword">void</span> <span class="token function">CreateDG</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//输入顶点数量和边的数量</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex1i<span class="token punctuation">,</span> vex2i<span class="token punctuation">;</span>
    ArcNode <span class="token operator">*</span>arcs <span class="token operator">=</span> <span class="token punctuation">(</span>ArcNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ArcNode<span class="token punctuation">)</span> <span class="token operator">*</span> g<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i1 <span class="token operator">=</span> g<span class="token operator">-&gt;</span>arc_num <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    ArcNode <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex1i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex2i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vex1i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vex2i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;not found vertex!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//边1</span>
        new <span class="token operator">=</span> <span class="token punctuation">(</span>arcs <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        new<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        new<span class="token operator">-&gt;</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        new<span class="token operator">-&gt;</span>adj <span class="token operator">=</span> vex2i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc <span class="token operator">=</span> new<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> new<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 创建无向网邻接表
 * @param g
 */</span>
<span class="token keyword">void</span> <span class="token function">CreateUN</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//在无向图的基础上+权</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 创建有向网邻接表
 * @param g
 */</span>
<span class="token keyword">void</span> <span class="token function">CreateDN</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//在有向图的基础上+权</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 选择创建有向图
 * @param g
 */</span>
<span class="token keyword">void</span> <span class="token function">CreateGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> UG<span class="token operator">:</span>
            <span class="token function">CreateUG</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> DG<span class="token operator">:</span>
            <span class="token function">CreateDG</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> UN<span class="token operator">:</span>
            <span class="token function">CreateUN</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> DN<span class="token operator">:</span>
            <span class="token function">CreateDN</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PrinterGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;【%d】&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstArc<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; ——&gt; %d&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>adj<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Graph g<span class="token punctuation">;</span>
    <span class="token function">CreateGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrinterGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
0
4 5
0
1
2
3
0 1
1 2
2 3
3 0
0 2
0【0】 ——&gt; 1 ——&gt; 3 ——&gt; 2
1【1】 ——&gt; 0 ——&gt; 2
2【2】 ——&gt; 1 ——&gt; 3 ——&gt; 0
3【3】 ——&gt; 2 ——&gt; 0
*/</span>

<span class="token comment">/*
1
4 5
0
1
2
3
0 3
1 0
1 2
2 1
2 0
0【0】 ——&gt; 3
1【1】 ——&gt; 0 ——&gt; 2
2【2】 ——&gt; 1 ——&gt; 0
3【3】
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="十字链表" tabindex="-1"><a class="header-anchor" href="#十字链表" aria-hidden="true">#</a> 十字链表</h3><blockquote><p>邻接表固然优秀，但也有不足，例如有向图的处理上，有时候需要再建立一个逆邻接表。</p><p><strong>与邻接表不同，十字链表法仅适用于存储有向图和有向网。不仅如此，十字链表法还改善了邻接表计算图中顶点入度的问题。</strong></p><p>有没有可能把邻接表和逆邻接表结合起来呢？</p><ul><li><p>答案是肯定的，这就是我们现在要谈的<strong>十字链表（Orthogonal List）</strong>:</p></li><li><p>为此我们重新定义顶点表的顶点结构：</p></li><li><table><thead><tr><th style="text-align:center;">data</th><th style="text-align:center;">firstIn</th><th style="text-align:center;">firstOut</th></tr></thead><tbody><tr><td style="text-align:center;">顶点数据</td><td style="text-align:center;">顶点入度指针</td><td style="text-align:center;">顶点出度指针</td></tr></tbody></table></li><li><p>重新定义边集结点的结构：</p></li><li><table><thead><tr><th style="text-align:center;">tailVex</th><th style="text-align:center;">headVex</th><th style="text-align:center;">headLink</th><th style="text-align:center;">tailLink</th><th style="text-align:center;">info</th></tr></thead><tbody><tr><td style="text-align:center;">弧尾顶点</td><td style="text-align:center;">弧头顶点</td><td style="text-align:center;">指向下个入度的边结点</td><td style="text-align:center;">指向下个出度边结点</td><td style="text-align:center;">权值信息</td></tr></tbody></table></li></ul><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206080041803.png" alt=""></p><p>​ 图1 十字链表的存储结构示意图</p><p>拿图1中的顶点V0来说，通过构建好的十字链表得知，以该顶点为弧头的顶点只有存储在数组第3位置的顶点V3（因此该顶点的入度为1），而以该顶点为弧尾的顶点有两个，分别是V1和V2</p><p><strong>代码实现</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token comment">/**
 * 图的十字链表
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_VEX_SIZE</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> InfoType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> headVex<span class="token punctuation">;</span>
    <span class="token keyword">int</span> tailVex<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token operator">*</span>headLink<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token operator">*</span>tailLink<span class="token punctuation">;</span>
    InfoType info<span class="token punctuation">;</span>
<span class="token punctuation">}</span> ArcNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    DataType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token operator">*</span>firstIn<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token operator">*</span>firstOut<span class="token punctuation">;</span>
<span class="token punctuation">}</span> VexNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>
    VexNode vexList<span class="token punctuation">[</span>MAX_VEX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex_num<span class="token punctuation">,</span> arc_num<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Graph<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> DataType data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CreateGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstIn <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstOut <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    DataType vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex1i<span class="token punctuation">,</span> vex2i<span class="token punctuation">;</span>
    ArcNode <span class="token operator">*</span>arcs <span class="token operator">=</span> <span class="token punctuation">(</span>ArcNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ArcNode<span class="token punctuation">)</span> <span class="token operator">*</span> g<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>arc_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex1i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex2i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vex1i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vex2i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;no found vertex！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        arcs<span class="token operator">-&gt;</span>tailVex <span class="token operator">=</span> vex1i<span class="token punctuation">;</span>
        arcs<span class="token operator">-&gt;</span>headVex <span class="token operator">=</span> vex2i<span class="token punctuation">;</span>
        <span class="token comment">//头插法</span>
        arcs<span class="token operator">-&gt;</span>tailLink <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstOut<span class="token punctuation">;</span>
        arcs<span class="token operator">-&gt;</span>headLink <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstIn<span class="token punctuation">;</span>
        g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstOut <span class="token operator">=</span> arcs<span class="token punctuation">;</span>
        g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstIn <span class="token operator">=</span> arcs<span class="token punctuation">;</span>
        arcs<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PrinterGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d  &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;【V%d】&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstOut<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; ——&gt;【V%d】&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>headVex<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>tailLink<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d  &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;【V%d】&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstIn<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; &lt;——【V%d】&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>tailVex<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>headLink<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Graph g<span class="token punctuation">;</span>
    <span class="token function">CreateGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrinterGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 输入

4 5
0
1
2
3
0 1
0 2
2 3
3 0
3 1

*/</span>

<span class="token comment">/* 输出

0  【V0】 ——&gt;【V2】 ——&gt;【V1】
1  【V1】
2  【V2】 ——&gt;【V3】
3  【V3】 ——&gt;【V1】 ——&gt;【V0】

0  【V0】 &lt;——【V3】
1  【V1】 &lt;——【V3】 &lt;——【V0】
2  【V2】 &lt;——【V0】
3  【V3】 &lt;——【V2】

*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="邻接多重表" tabindex="-1"><a class="header-anchor" href="#邻接多重表" aria-hidden="true">#</a> 邻接多重表</h3><blockquote><p>无向图的存储可以使用邻接表，但在实际使用中，如果想对图中某个顶点进行实操（修改或删除），由于邻接表中存储该顶点的边的结点有两个，因此需要操作两个结点。</p><ul><li><p>为了提高在无向图中提高对操作顶点的效率，我们需要学习新的一种近适用于<strong>无向图和无向网</strong>的方法——<strong>邻接多重表</strong></p></li><li><p>邻接多重表存储无向图的方式，可看作是邻接表和十字链表的结合。</p></li><li><p>邻接多重表顶点结构：</p><table><thead><tr><th style="text-align:center;">data</th><th style="text-align:center;">first</th></tr></thead><tbody><tr><td style="text-align:center;">顶点数据</td><td style="text-align:center;">指向与它关联的边</td></tr></tbody></table></li><li><p>邻接多重变边集节点结构：</p></li><li><table><thead><tr><th style="text-align:center;">ivex</th><th style="text-align:center;">ilink</th><th style="text-align:center;">jvex</th><th style="text-align:center;">jlink</th><th style="text-align:center;">info</th><th style="text-align:center;">mark</th></tr></thead><tbody><tr><td style="text-align:center;">指向顶点的位置</td><td style="text-align:center;">指向下一个存储与 ivex 有直接关联顶点的节点</td><td style="text-align:center;">指向顶点的位置</td><td style="text-align:center;">指向下一个存储与 jvex 有直接关联顶点的节点</td><td style="text-align:center;">权值</td><td style="text-align:center;">标记域：遍历图时标记节点是否被访问过，防止重复访问 0：未访问，1已访问</td></tr></tbody></table><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206070019007.png" alt="image-20220607001946215"></p><p>​ 邻接多重表</p><ul><li><p>邻接多重表的创建过程：</p><ol><li><p>把顶点1的边集先构建出来。</p></li><li><p>顶点2开始(i)判断前面是否存在已经有边是与顶点i连线的，如果有顶点i的first指过去，否则创建边集。</p></li></ol></li></ul></li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206150058970.png" alt="image-20220615005803854" style="zoom:25%;"><p>​ 0-&gt;1 , 1-&gt;2 , 4-&gt;1的创建过程</p><p><strong>代码实现</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;string.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;math.h&quot;</span></span>

<span class="token comment">/**
 * 图的邻接多重表
 */</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VEX_MAX_SIZE</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> InfoType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> iVex<span class="token punctuation">;</span>
    <span class="token keyword">int</span> jVex<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token operator">*</span>iLink<span class="token punctuation">,</span> <span class="token operator">*</span>jLink<span class="token punctuation">;</span>
    InfoType info<span class="token punctuation">;</span>
<span class="token punctuation">}</span> EdgeNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    DataType data<span class="token punctuation">;</span>
    EdgeNode <span class="token operator">*</span>first<span class="token punctuation">;</span>
<span class="token punctuation">}</span> VexNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>
    VexNode vexList<span class="token punctuation">[</span>VEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex_num<span class="token punctuation">,</span> edge_num<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Graph<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> DataType data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CreateGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    EdgeNode <span class="token operator">*</span>edges <span class="token operator">=</span> <span class="token punctuation">(</span>EdgeNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>EdgeNode<span class="token punctuation">)</span> <span class="token operator">*</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    DataType vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex1i<span class="token punctuation">,</span> vex2i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex1i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex2i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vex1i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vex2i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;no found vex!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        edges<span class="token operator">-&gt;</span>iVex <span class="token operator">=</span> vex1i<span class="token punctuation">;</span>
        edges<span class="token operator">-&gt;</span>jVex <span class="token operator">=</span> vex2i<span class="token punctuation">;</span>

        edges<span class="token operator">-&gt;</span>iLink <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>
        g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">=</span> edges<span class="token punctuation">;</span>
        edges<span class="token operator">-&gt;</span>jLink <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>
        g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">=</span> edges<span class="token punctuation">;</span>
        edges<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PrinterGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    EdgeNode <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;【V%d】&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>jVex <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; ——&gt;【V%d】&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>iVex<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>jLink<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; ——&gt;【V%d】&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>jVex<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>iLink<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Graph g<span class="token punctuation">;</span>
    <span class="token function">CreateGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrinterGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 输入
5 6
0
1
2
3
4
0 1
0 3
2 1
2 3
2 4
4 1
*/</span>
<span class="token comment">/* 输出
【V0】 ——&gt;【V3】 ——&gt;【V1】
【V1】 ——&gt;【V4】 ——&gt;【V2】 ——&gt;【V0】
【V2】 ——&gt;【V4】 ——&gt;【V3】 ——&gt;【V1】
【V3】 ——&gt;【V2】 ——&gt;【V0】
【V4】 ——&gt;【V1】 ——&gt;【V2】
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="边集数组" tabindex="-1"><a class="header-anchor" href="#边集数组" aria-hidden="true">#</a> 边集数组</h3><blockquote><p>边集数组由两个一维数组构成</p><ul><li>一个存顶点的信息</li><li>另一个存边的信息，边数组每个数据元素由一条边的起点下标(begin)、终点下标(end)和权值组成(weight)</li></ul></blockquote><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206141338549.png" alt="image-20220614133759831" style="zoom:33%;"><h3 id="深度优先搜索-dfs" tabindex="-1"><a class="header-anchor" href="#深度优先搜索-dfs" aria-hidden="true">#</a> 深度优先搜索（DFS）</h3><blockquote><p>深度优先搜索（Depth First Search），也称深度优先遍历，简称DFS。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206150124907.png" alt="image-20220615012421844" style="zoom:33%;"><p>​ 图1：无向图</p><p>深度优先搜索的过程类似于树的先序遍历，首先从例子中体会深度优先搜索，例如图1是一个无向图，采用深度优先算法遍历这个图的过程为：</p><ol><li>首先任意找一个未被遍历过的顶点，例如从 V1 开始，由于 V1 已经率先访问过了，所以，需要标记 V1 的状态为访问过；</li><li>然后遍历 V1 的邻接点，例如访问 V2 ，并做标记，然后访问V2的邻接点，例如 V4 （做标记），然后 V8 ，然后 V5。</li><li>当继续遍历 V5 的邻接点时，根据之前做的标记显示，所有的邻接点都已经访问过了。此时 V5 回退到 V8 ，看 V8 是否有未被访问过的邻接点，如果没有，继续回退到 V4，V2，V1；</li><li>通过查看 V1，找到一个未被访问的邻接点 V3，继续遍历，然后访问 V3 邻接点 V6 然后 V7；</li><li>由于 V7 没有被访问的邻接点，所以会退到 V6，继续回退至 V3，最后到达 V1，发现没有未被访问过的；</li><li>最后一步需要判断是否所有的顶点都有被访问，如果还有没被访问的，以未被访问的顶点作为第一个顶点，继续按照上面的方式进行遍历。</li></ol><blockquote><p>根据上面的过程，可以得到图1通过深度优先搜索得到顶点的次序为： V1 -&gt; V2 -&gt; V4 -&gt; V8 -&gt; V5 -&gt; V3 -&gt; V6 -&gt; V7</p></blockquote></blockquote><p>​</p><blockquote><p>所谓深度优先搜索，是从图中的一个顶点出发，每次遍历当前访问顶点的邻接点，一直到访问的顶点没有未被访问的邻接点为止。</p><ul><li><p>然后采用依次回退的方式，查看来的路上每一个顶点是否 还有其他未被访问过的邻接点。</p></li><li><p>访问完成后，判断图中的顶点是否已经全部遍历，如果没有，以未访问的顶点作为起点，重复上述过程；</p></li></ul><blockquote><p>深度优先搜索是一个不断回溯的过程。</p></blockquote><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205260051929.png" alt="image-20220526005120185" style="zoom:33%;"><p>​ 深度优先搜索例子</p><p><strong>代码实现</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;time.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VERTEX_MAX_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VexType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> InfoType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VertexType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    false<span class="token punctuation">,</span> true
<span class="token punctuation">}</span> bool<span class="token punctuation">;</span>
bool visited<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token punctuation">{</span>
    VexType adj<span class="token punctuation">;</span>
    InfoType <span class="token operator">*</span>info<span class="token punctuation">;</span>
<span class="token punctuation">}</span> EdgeNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    VexType vexList<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    EdgeNode edges<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex_num<span class="token punctuation">,</span> edge_num<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Graph<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> VertexType vtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> vtx<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CreateGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex1i<span class="token punctuation">,</span> vex2i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex1i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex2i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vex1i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vex2i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;no found %d or %d of vex！\\n&quot;</span><span class="token punctuation">,</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//无向图的二阶矩阵对称</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 返回顶点v的邻接点在顶点数组的下标
 * @param g 图
 * @param vi 顶点v的下标
 * @return 返回顶点V的邻接点的下标
 */</span>
<span class="token keyword">int</span> <span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 返回顶点v的邻接点的下标 从下标 w 开始 （w已经访问过，邻接点的在邻接矩阵中是有序的，从w开始 即是查找下一个邻接点）
 * @param g 图
 * @param vi 顶点v的下标
 * @param w 顶点v的邻接点
 * @return 返回下一个邻接点
 */</span>
<span class="token keyword">int</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">VisitVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">VisitVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问顶点</span>
    visited<span class="token punctuation">[</span>vi<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">//设置为已经访问过状态</span>
    <span class="token keyword">int</span> visit <span class="token operator">=</span> <span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找顶点的邻接点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>visit <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果有邻接点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>visit<span class="token punctuation">]</span> <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//没有被访问访问过，递归访问邻接点的邻接点，直到图的最深处，没有邻接点没有被访问过的时候</span>
            <span class="token function">DFS</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> visit<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        visit <span class="token operator">=</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vi<span class="token punctuation">,</span> visit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接着下一个邻接点</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//对访问状态初始化，全部设置为 未访问过</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//对图中的每个没有被访问过的顶点，进行深度优先搜索</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">DFS</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Graph g<span class="token punctuation">;</span>
    <span class="token function">CreateGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DFSTraverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 输入
4 5
0
1
2
3
0 1
1 2
2 0
2 3
*/</span>

<span class="token comment">/* 输出
0 1 2 3 
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="广度优先搜索-bfs" tabindex="-1"><a class="header-anchor" href="#广度优先搜索-bfs" aria-hidden="true">#</a> 广度优先搜索（BFS）</h3><blockquote><p>广度优先搜索（Breadth First Search），又称广度优先遍历，简称 BFS；</p><p>广度优先搜索类似于树的层序遍历。从图中的某一顶点出发，遍历每一个顶点时，依次遍历其所有的邻接点，然后再从这些邻接点出发，同样依次访问它们的邻接点。按照此过程，直到图中所有被访问过的邻接点都被访问到。</p><p>最后还需要做的操作就是查看图中是否存在尚未被访问的顶点，若有，则以该顶点为起始点，重复上述遍历过程。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206150124907.png" alt="image-20220615012421844" style="zoom:33%;"><p>​ 图1</p><p>拿图1中的无向图为例</p><ul><li>假设 V1 作为起始点，遍历其所有的邻接点 V2 和 V3；</li><li>以 V2 为起始点，访问邻接点 V4 和 V5；</li><li>以 V3 为起始点，访问邻接点 V6、V7；</li><li>以V4为起始点访问 V8 ；</li><li>以 V5 为起始点，由于 V5 的所有邻接点已经全部被访问，直接略过；</li><li>V6 和 V7 也是如此。</li></ul><p>以 V1 为起始点的遍历过程结束后，判断图中是否还有未被访问的顶点，没有了就证明这个图已经遍历完成了，遍历顺序为：</p><blockquote><p>V1 -&gt; V2 -&gt; V3 -&gt; V4 -&gt; V5 -&gt; V6 -&gt; V7 -&gt; V8</p></blockquote><p><strong>代码实现</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VERTEX_MAX_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VexType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> InfoType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VertexType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    false<span class="token punctuation">,</span> true
<span class="token punctuation">}</span> bool<span class="token punctuation">;</span>

bool visited<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token punctuation">{</span>
    VexType adj<span class="token punctuation">;</span>
    InfoType <span class="token operator">*</span>info<span class="token punctuation">;</span>
<span class="token punctuation">}</span> EdgeNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    VexType vexList<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    EdgeNode edges<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex_num<span class="token punctuation">,</span> edge_num<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Graph<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> VertexType vtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> vtx<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CreateGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex1i<span class="token punctuation">,</span> vex2i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex1i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex2i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vex1i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vex2i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;no found %d or %d of vex！\\n&quot;</span><span class="token punctuation">,</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//无向图的二阶矩阵对称</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 返回顶点v的邻接点在顶点数组的下标
 * @param g 图
 * @param vi 顶点v的下标
 * @return 返回顶点V的邻接点的下标
 */</span>
<span class="token keyword">int</span> <span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 返回顶点v的邻接点的下标 从下标 w 开始 （w已经访问过，邻接点的在邻接矩阵中是有序的，从w开始 即是查找下一个邻接点）
 * @param g 图
 * @param vi 顶点v的下标
 * @param w 顶点v的邻接点
 * @return 返回下一个邻接点
 */</span>
<span class="token keyword">int</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">VisitVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> vex<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Queue<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> vex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Queue <span class="token operator">*</span>new <span class="token operator">=</span> <span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new<span class="token operator">-&gt;</span>vex <span class="token operator">=</span> vex<span class="token punctuation">;</span>
    new <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    Queue <span class="token operator">*</span>p<span class="token punctuation">;</span>
    p <span class="token operator">=</span> q<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> new<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>vex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>vex <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>vex<span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>next <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">_Bool</span> <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">BFSTraverse</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>
    Queue <span class="token operator">*</span>q<span class="token punctuation">;</span>
    <span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> v<span class="token punctuation">,</span> vi<span class="token punctuation">,</span> visit<span class="token punctuation">;</span>
    <span class="token comment">//遍历每一个顶点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果顶点已经访问过，跳过</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">//访问顶点</span>
        <span class="token function">VisitVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置成已访问过</span>
        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token comment">//入队</span>
        <span class="token function">EnQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果队列不是空的</span>
            <span class="token function">DeQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出队</span>
            vi <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取顶点的下标</span>
            visit <span class="token operator">=</span> <span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取顶点的邻接点</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>visit <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果有邻接点</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>visit<span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果这个邻接点已经被访问过，跳过这个，接着下一个</span>
                    visit <span class="token operator">=</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">,</span> visit<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//访问顶点</span>
                <span class="token function">VisitVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> visit<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//设置成已访问过</span>
                visited<span class="token punctuation">[</span>visit<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>
                <span class="token comment">//入队</span>
                <span class="token function">EnQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>visit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                visit <span class="token operator">=</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">,</span> visit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Graph g<span class="token punctuation">;</span>
    <span class="token function">CreateGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">BFSTraverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 输入
4 5
0
1
2
3
0 1
1 2
2 0
2 3
*/</span>

<span class="token comment">/* 输出
0 1 2 3 
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="马踏棋盘算法-骑士周游问题" tabindex="-1"><a class="header-anchor" href="#马踏棋盘算法-骑士周游问题" aria-hidden="true">#</a> 马踏棋盘算法（骑士周游问题）</h3><blockquote><p>∂∂马踏棋盘问题（又称骑士周边游问题）是算法设计的经典问题之一。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206152152532.png" alt="image-20220615215259462" style="zoom:33%;"><p>题目要求：</p><ul><li><p>国际象棋的棋盘为 8 * 8 的方格棋盘，现将 “马” 放在任意指定的方格中，按照 “马” 走棋的规则将 “马” 进行移动。要求每个方格只能进入一次，最终使得 “马” 走遍棋盘的 64 个方格。</p></li><li><p>编写代码，实现马踏棋盘的操作，要求用 1～64来标注 “马” 移动的路径。</p></li></ul><p><strong>代码实现</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//</span>
<span class="token comment">// Created by 刘玉培 on 2022/6/15.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;time.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">X</span> <span class="token expression"><span class="token number">8</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Y</span> <span class="token expression"><span class="token number">8</span></span></span>
<span class="token keyword">int</span> chess<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">[</span>Y<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">_Bool</span> <span class="token function">nextXY</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> X <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> X <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> Y <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> X <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> X <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> Y <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span>Y <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> Y <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span> <span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token comment">//</span>
<span class="token comment">// Created by 刘玉培 on 2022/6/15.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;time.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">X</span> <span class="token expression"><span class="token number">8</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Y</span> <span class="token expression"><span class="token number">8</span></span></span>
<span class="token keyword">int</span> chess<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">[</span>Y<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">_Bool</span> <span class="token function">nextXY</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> X <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> X <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> Y <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> X <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> X <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> Y <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span>Y <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> Y <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>chess<span class="token punctuation">[</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token operator">*</span>x <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>y <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span> <span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printChess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> X<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Y<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\t&quot;</span><span class="token punctuation">,</span> chess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 深度优先
 * @param x
 * @param y
 * @param tag
 * @return
 */</span>
<span class="token keyword">int</span> <span class="token function">TravelChessBoard</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    chess<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> tag<span class="token punctuation">;</span>
    <span class="token keyword">int</span> x1 <span class="token operator">=</span> x<span class="token punctuation">,</span> y1 <span class="token operator">=</span> y<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">_Bool</span> flag<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">*</span> Y <span class="token operator">==</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//棋盘已经全部走完</span>
        <span class="token function">printChess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//在8个方向中，查找可以落脚的位置</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        flag <span class="token operator">=</span> <span class="token function">nextXY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果有可走的位置</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TravelChessBoard</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> tag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当棋盘已经全部走完，一路返回到最顶部</span>
        <span class="token comment">//回溯后继续查找下一个可以走的位置</span>
        x1 <span class="token operator">=</span> x<span class="token punctuation">;</span>
        y1 <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            flag <span class="token operator">=</span> <span class="token function">nextXY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/**
     * 由于并不是每一步都可以一路顺利走完整个棋盘的，
     * 当走到这里表示，表示此路不通，沿着此路不能走完整个棋盘
     * 将脚印擦掉，回溯尝试下一个路径。
     */</span>
    chess<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">clock_t</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>
    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TravelChessBoard</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n计算耗时：%lf 秒\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*  
39	26	37	62	49	58	51	56	
36	63	40	27	42	55	48	59	
25	38	23	34	61	50	57	52	
64	35	28	41	54	43	60	47	
29	24	31	22	33	46	53	44	
8	11	6	13	4	15	20	17	
0	30	9	32	21	18	45	2	
10	7	12	5	14	3	16	19	

计算耗时：355.874715 秒
  */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="深度优先生成树和广度优先生成树" tabindex="-1"><a class="header-anchor" href="#深度优先生成树和广度优先生成树" aria-hidden="true">#</a> 深度优先生成树和广度优先生成树</h3><blockquote><p><strong>在对无向图进行遍历的时候，遍历过程中所经过的顶点和边的组合，就是生成树或者生成森林</strong>。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206180325505.png" alt="image-20220618032454832" style="zoom:33%;"><p>​ 图1</p><ul><li>例如，图1中的无向图由 V1 ～ V7 的顶点和编号分别为 A～I 的边组成。当使用深度优先遍历搜索算法时，假设 V1 作为遍历的起始点，经过的顶点和边的顺序为（所走的路径不是唯一的）：</li></ul><p>​ <img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206180332919.png" alt="image-20220618033235850" style="zoom:33%;"></p><p>​ 图2 <strong>深度优先生成树</strong></p><ul><li><p>由深度优先搜索得到的树为深度优先深处生成树。同理，广度优先搜索生成的树为广度优先生成树。图1无向图以顶点 V1 为起点进行广度优先搜索遍历得到树如 图3 所示：</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206180418467.png" alt="image-20220618041805370" style="zoom:33%;"><p>​ 图3 <strong>广度优先生成树</strong></p></li></ul><p><strong>非连通图的生成森林</strong></p><p>非连通在进行遍历时，实际是对非连通图中的每个连通分量分别进行遍历，在遍历过程经过的每个顶点和边，就构成了每个连通的生成树。多个连通分量构成的多个生成树就是非连通图的生成森林。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206190258474.png" alt="image-20220619025802384" style="zoom:33%;"><p>​ 图4.1 非连通图</p><p>​</p></blockquote><h4 id="深度优先生成森林" tabindex="-1"><a class="header-anchor" href="#深度优先生成森林" aria-hidden="true">#</a> 深度优先生成森林</h4><blockquote><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206190300637.png" alt="image-20220619030029564" style="zoom:33%;"><p>​ 图4.2 非连通图-深度优先生成森林</p><p><strong>深度优先生成森林相关代码实现</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;time.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VERTEX_MAX_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VexType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> InfoType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VertexType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    false<span class="token punctuation">,</span> true
<span class="token punctuation">}</span> bool<span class="token punctuation">;</span>
bool visited<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token punctuation">{</span>
    VexType adj<span class="token punctuation">;</span>
    InfoType <span class="token operator">*</span>info<span class="token punctuation">;</span>
<span class="token punctuation">}</span> EdgeNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    VexType vexList<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    EdgeNode edges<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex_num<span class="token punctuation">,</span> edge_num<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Graph<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    VexType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>left_child<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>next_sibling<span class="token punctuation">;</span>
<span class="token punctuation">}</span> TreeNode<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> VertexType vtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> vtx<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CreateGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex1i<span class="token punctuation">,</span> vex2i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex1i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex2i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vex1i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vex2i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;no found %d or %d of vex！\\n&quot;</span><span class="token punctuation">,</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//无向图的二阶矩阵对称</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 返回顶点v的邻接点在顶点数组的下标
 * @param g 图
 * @param vi 顶点v的下标
 * @return 返回顶点V的邻接点的下标
 */</span>
<span class="token keyword">int</span> <span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 返回顶点v的邻接点的下标 从下标 w 开始 （w已经访问过，邻接点的在邻接矩阵中是有序的，从w开始 即是查找下一个邻接点）
 * @param g 图
 * @param vi 顶点v的下标
 * @param w 顶点v的邻接点
 * @return 返回下一个邻接点
 */</span>
<span class="token keyword">int</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">VisitVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 将连通图或连通分量转成二叉树（将连通图或连通分量 看成一棵树）
 * @param g
 * @param vi
 * @param p
 */</span>
<span class="token keyword">void</span> <span class="token function">DFSTree</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">,</span> TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//传进来的顶点作为根</span>
    <span class="token keyword">int</span> visit <span class="token operator">=</span> <span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个邻接点</span>
    bool first <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">//标记，如果是第一个邻接点，作为树的左孩子，否则为兄弟结点</span>
    TreeNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>visit <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>visit<span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//已经访问过，跳过</span>
            visit <span class="token operator">=</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vi<span class="token punctuation">,</span> visit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        visited<span class="token punctuation">[</span>visit<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>
        p <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>visit<span class="token punctuation">]</span><span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>left_child <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>next_sibling <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token comment">//第一个邻接点作为树的左孩子，其他邻接点作为孩子的兄弟结点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root<span class="token operator">-&gt;</span>left_child <span class="token operator">=</span> p<span class="token punctuation">;</span>
            first <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            root<span class="token operator">-&gt;</span>next_sibling <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">DFSTree</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> visit<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        visit <span class="token operator">=</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vi<span class="token punctuation">,</span> visit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">/**
 * 深度优先搜索生成森林转二叉树
 * @param g
 */</span>
<span class="token keyword">void</span> <span class="token function">DFSForest</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> TreeNode <span class="token operator">*</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    TreeNode <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token comment">//初始化访问状态</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token comment">//生成每一颗树的根</span>
        p <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>left_child <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>next_sibling <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">*</span>root <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//第一课树的根（连通图/连通分量的深度优先搜索的第一个顶点）作为二叉树的根</span>
        <span class="token keyword">else</span> pre<span class="token operator">-&gt;</span>next_sibling <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token function">DFSTree</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pre <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//其余邻接点，作为兄弟</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> t<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>left_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>next_sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Graph g<span class="token punctuation">;</span>
    TreeNode <span class="token operator">*</span>T<span class="token punctuation">;</span>
    <span class="token function">CreateGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DFSForest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* input
13 13
1
2
3
4
5
6
7
8
9
10
11
12
13
1 2
1 3
1 6
1 12
2 13
4 5
7 8
7 10
7 9
8 10
11 12
11 13
12 13
*/</span>

<span class="token comment">/*output
1 2 13 11 12 4 5 7 8 10 9 
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以图4.1 为例，构建的深度优先生成森林 转 孩子兄弟表示法 二叉树：</p><p>图中，3种颜色的树各代表一颗深度优先生成树，使用孩子兄弟表示法，也就是将三棵树相连，第一棵树的树根作为整颗树的树根</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206191603847.png" alt="image-20220619160329071" style="zoom:33%;"></blockquote><h4 id="广度优先生成森林" tabindex="-1"><a class="header-anchor" href="#广度优先生成森林" aria-hidden="true">#</a> 广度优先生成森林</h4><blockquote><p>非连通图采用广度优先搜索进行遍历时，经过的顶点以及边的集合为该图的广度优先生成森林。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206190258474.png" alt="image-20220619025802384" style="zoom:33%;"><p>​ 图5.1 非连通图</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206191723426.png" alt="image-20220619172322356" style="zoom:33%;"><p>​ 广度优先搜索生成森林</p><p><strong>广度优先生成森林相关代码实现</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;time.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VERTEX_MAX_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VexType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> InfoType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VertexType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    false<span class="token punctuation">,</span> true
<span class="token punctuation">}</span> bool<span class="token punctuation">;</span>
bool visited<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token punctuation">{</span>
    VexType adj<span class="token punctuation">;</span>
    InfoType <span class="token operator">*</span>info<span class="token punctuation">;</span>
<span class="token punctuation">}</span> EdgeNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    VexType vexList<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    EdgeNode edges<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex_num<span class="token punctuation">,</span> edge_num<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Graph<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    VexType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>left_child<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>next_sibling<span class="token punctuation">;</span>
<span class="token punctuation">}</span> TreeNode<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> VertexType vtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> vtx<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CreateGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex1i<span class="token punctuation">,</span> vex2i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex1i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex2i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vex1i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vex2i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;no found %d or %d of vex！\\n&quot;</span><span class="token punctuation">,</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//无向图的二阶矩阵对称</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 返回顶点v的邻接点在顶点数组的下标
 * @param g 图
 * @param vi 顶点v的下标
 * @return 返回顶点V的邻接点的下标
 */</span>
<span class="token keyword">int</span> <span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 返回顶点v的邻接点的下标 从下标 w 开始 （w已经访问过，邻接点的在邻接矩阵中是有序的，从w开始 即是查找下一个邻接点）
 * @param g 图
 * @param vi 顶点v的下标
 * @param w 顶点v的邻接点
 * @return 返回下一个邻接点
 */</span>
<span class="token keyword">int</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">VisitVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
    TreeNode <span class="token operator">*</span>data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Queue<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">,</span> TreeNode <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Queue <span class="token operator">*</span>new <span class="token operator">=</span> <span class="token punctuation">(</span>Queue <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new<span class="token operator">-&gt;</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    new<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    Queue <span class="token operator">*</span>p <span class="token operator">=</span> q<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> new<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">,</span> TreeNode <span class="token operator">*</span><span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>data <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    Queue <span class="token operator">*</span>tmp<span class="token operator">=</span>q<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">_Bool</span> <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> q<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">/**
 * 将连通图或连通分量转成二叉树（将连通图或连通分量 看成一棵树）
 * @param g
 * @param vi
 * @param p
 */</span>
<span class="token keyword">void</span> <span class="token function">BFSTree</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> <span class="token keyword">int</span> vi<span class="token punctuation">,</span> TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//初始化队列</span>
    Queue <span class="token operator">*</span>q<span class="token punctuation">;</span>
    <span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//定义临时变量</span>
    TreeNode <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    bool first<span class="token punctuation">;</span>
    <span class="token keyword">int</span> visit<span class="token punctuation">;</span>

    <span class="token comment">//将第一个顶点入队</span>
    <span class="token function">EnQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">DeQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出队</span>
        vi <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> pre<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//顶点的位置</span>
        visit <span class="token operator">=</span> <span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取顶点的邻接点</span>
        first <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">//第一次访问，每个邻接点都设置</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>visit <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>visit<span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果已经访问过</span>
                visit <span class="token operator">=</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vi<span class="token punctuation">,</span> visit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取下一个邻接点</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            visited<span class="token punctuation">[</span>visit<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">//设置成已访问过状态</span>
            <span class="token comment">//将邻接点包装成树的结点</span>
            p <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>visit<span class="token punctuation">]</span><span class="token punctuation">;</span>
            p<span class="token operator">-&gt;</span>left_child <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            p<span class="token operator">-&gt;</span>next_sibling <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token comment">//如果出队的是第一个邻接点，设置结点为pre的左孩子</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                first <span class="token operator">=</span> false<span class="token punctuation">;</span>
                pre<span class="token operator">-&gt;</span>left_child <span class="token operator">=</span> p<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> pre<span class="token operator">-&gt;</span>next_sibling <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//否则右孩子</span>
            <span class="token function">EnQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结点入队，下次获取它的邻接点</span>
            pre <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//用于连接兄弟结点</span>
            visit <span class="token operator">=</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vi<span class="token punctuation">,</span> visit<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 深度优先搜索生成森林转二叉树
 * @param g
 */</span>
<span class="token keyword">void</span> <span class="token function">BFSForest</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> TreeNode <span class="token operator">*</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    TreeNode <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>pre<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>
        p <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">*</span>root <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//第一课树的根（连通图/连通分量的深度优先搜索的第一个顶点）作为二叉树的根</span>
        <span class="token keyword">else</span> pre<span class="token operator">-&gt;</span>next_sibling <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//其他树作为树根的兄弟</span>
        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token function">BFSTree</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> t<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>left_child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>next_sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Graph g<span class="token punctuation">;</span>
    TreeNode <span class="token operator">*</span>T<span class="token punctuation">;</span>
    <span class="token function">CreateGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">BFSForest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* input
13 13
1
2
3
4
5
6
7
8
9
10
11
12
13
1 2
1 3
1 6
1 12
2 13
4 5
7 8
7 10
7 9
8 10
11 12
11 13
12 13
*/</span>
<span class="token comment">/* output
1 2 13 3 6 12 11 4 5 7 8 9 10 
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拿5.1的非连通图为例，通过广度优先搜索得到的广度优先生成森林 转 孩子兄弟表示法 二叉树为：</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206192009940.png" alt="image-20220619200928872" style="zoom:33%;"><p>​ 广度优先生成森林，孩子兄弟表示法（二叉树）</p></blockquote><h3 id="普里姆-prim-算法求最小生成树" tabindex="-1"><a class="header-anchor" href="#普里姆-prim-算法求最小生成树" aria-hidden="true">#</a> 普里姆（Prim）算法求最小生成树</h3><blockquote><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206201710355.png" alt="image-20220620171029252"></p><p>​ 图1 连通网和它对应的生成树</p><p>图1 连通无向网和它对应的生成树，可以用于解决实际生活问题：假设有4座城市： A、B、C、D ，为了方便生活，要为这4座城市建立通信。对于 4 个城市来讲，本着节约经费原则，只需要建立 3 条通信线路即可，如：图1 右边所示的任意一种方式。</p><p>在具体选择 图1右 中的哪一种方式时，西药综合考虑城市之间的距离，建立通信线路的难度等各种因素，将这些因素综合起来用一个数值表示，当作这条线路的权值。</p><p>假设通过综合分析，城市之间如 图1左 所示，对于 图1右 的方案中，选择权值总和为 7 的两种方案最节省经费。</p><p><strong>简单来说就是 给定一个带有权值的连通图（连通网），如何在众多生成树中筛选出权值总和最小的生成树，即为该树的最小生成树。</strong></p><p>给定一个连通网，求最小生成树的方法有：普里姆（Prim）算法 和 克鲁斯卡尔（Kruskal）算法。</p></blockquote><h4 id="普里姆算法" tabindex="-1"><a class="header-anchor" href="#普里姆算法" aria-hidden="true">#</a> 普里姆算法</h4><blockquote><p>普里姆算法在找最小生成树时，将顶点分为两类，一类是在查找过程中已经包含在树中（假设A类），剩下的另一类（假设为 B 类）。</p><p>对于给定的连通网，起始状态全部归为 B 类。在找最小生成树时，选定任意一个顶点作为起始点，并将之从B类移至A类；然后找出B类到A类中的顶点之间权值最小的顶点，将之从 B类 移至 A类 ，如此重复，直到 B类 中没有顶点为止。所走过的顶点和边就是改连通图的最小生成树。</p><p>例如，通过普里姆算法查找 图1左 的最小生成树步骤为：</p><ul><li>从顶点A出发，顶点 B、C、D 到顶点A的权值分别为 2、4、2 ； <ul><li>对于顶点A来说， B 和 D 到 A 的权值最小，假设先找到 B：</li></ul></li></ul><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206202131635.png" alt="image-20220620213116956" style="zoom:33%;"><ul><li><p>顶点 C 到 B 的权值为3，C 到 A 的权值为 4，先放到A类中；</p></li><li><p>顶点 D 到 A 的权值为2 ，D 到 B 的权值无穷大（如果顶点之间没有通路，设定权值为无穷大）。所以顶点 D 到 A 的权值最小。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206211415233.png" alt="image-20220621140430163" style="zoom:33%;"></li><li><p>最后在A类中查到顶点 C 到 A的权值为4，C 到 B 的权值为 3，选择权值最小的。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206202145672.png" style="zoom:33%;"></li></ul><p><strong>代码实现</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VERTEX_MAX_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VexType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> InfoType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> VertexType<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    false<span class="token punctuation">,</span> true
<span class="token punctuation">}</span> bool<span class="token punctuation">;</span>

bool visited<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token punctuation">{</span>
    VexType adj<span class="token punctuation">;</span>
    InfoType <span class="token operator">*</span>info<span class="token punctuation">;</span>
<span class="token punctuation">}</span> EdgeNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    VexType vexList<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    EdgeNode edges<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex_num<span class="token punctuation">,</span> edge_num<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Graph<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span> VertexType vtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> vtx<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">CreateGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>
            g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> vex1i<span class="token punctuation">,</span> vex2i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>edge_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vex2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex1i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vex2i <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vex1i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vex2i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;no found %d or %d of vex！\\n&quot;</span><span class="token punctuation">,</span> vex1<span class="token punctuation">,</span> vex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> weight<span class="token punctuation">;</span>
        g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>vex2i<span class="token punctuation">]</span><span class="token punctuation">[</span>vex1i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj <span class="token operator">=</span> weight<span class="token punctuation">;</span><span class="token comment">//无向图的二阶矩阵对称</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//记录目标顶点外的每个顶点的边的权值，用于筛选出最小权值的顶点</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> vex_i<span class="token punctuation">;</span><span class="token comment">//起始顶点下标</span>
    <span class="token keyword">int</span> low_cost<span class="token punctuation">;</span><span class="token comment">//到顶点 i(vexList中的下标) 的权值</span>
<span class="token punctuation">}</span> CostEdge<span class="token punctuation">;</span>

CostEdge costEdge<span class="token punctuation">[</span>VERTEX_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">Minimum</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> min <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>
    <span class="token keyword">int</span> min_i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">&gt;</span> costEdge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>low_cost <span class="token operator">&amp;&amp;</span> costEdge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>low_cost <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            min <span class="token operator">=</span> costEdge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>low_cost<span class="token punctuation">;</span>
            min_i <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> min_i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 普里姆算法函数
 * @param g 无向网
 * @param sp 无向网最小生成树起始点
 */</span>
<span class="token keyword">void</span> <span class="token function">MinimumSpanningTreePrim</span><span class="token punctuation">(</span>Graph <span class="token operator">*</span>g<span class="token punctuation">,</span>VexType sp<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//获取起始点在顶点数组中的下标</span>
    <span class="token keyword">int</span> spi <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> sp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//保存起始点到各个顶点的权值</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        costEdge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vex_i <span class="token operator">=</span> spi<span class="token punctuation">;</span>
        costEdge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>low_cost <span class="token operator">=</span> g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>spi<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//自己到自己的成本为0，</span>
    costEdge<span class="token punctuation">[</span>spi<span class="token punctuation">]</span><span class="token punctuation">.</span>low_cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//最小生成树中已经存在起始点了，后面就不需要再找它了，所以从1开始</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//找出和spi邻接的权值最小的顶点的下标</span>
        spi <span class="token operator">=</span> <span class="token function">Minimum</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//此时的spi为起始点的邻接最小权值的顶点的下标，costEdge[spi].vex_i 是spi的起始点</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;V%d --&gt; V%d\\n&quot;</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>costEdge<span class="token punctuation">[</span>spi<span class="token punctuation">]</span><span class="token punctuation">.</span>vex_i<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>vexList<span class="token punctuation">[</span>spi<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//归入最小生成树的顶点的成本设置为0</span>
        costEdge<span class="token punctuation">[</span>spi<span class="token punctuation">]</span><span class="token punctuation">.</span>low_cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//如果归入最小生成树的顶点中存在比 原来的spi(起始点) 权值更小的点，则取代原来的 spi(起始点)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token operator">-&gt;</span>vex_num<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>costEdge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>low_cost <span class="token operator">&gt;</span> g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>spi<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                costEdge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>vex_i <span class="token operator">=</span> spi<span class="token punctuation">;</span>
                costEdge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>low_cost <span class="token operator">=</span> g<span class="token operator">-&gt;</span>edges<span class="token punctuation">[</span>spi<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Graph g<span class="token punctuation">;</span>
    <span class="token function">CreateGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MinimumSpanningTreePrim</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*input
6 10
1
2
3
4
5
6
1 2 6
1 3 1
1 4 5
2 3 5
2 5 3
3 4 5
3 5 6
3 6 4
4 6 2
5 6 6
*/</span>
<span class="token comment">/*output
V1 --&gt; V3
V3 --&gt; V6
V6 --&gt; V4
V3 --&gt; V2
V2 --&gt; V5
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div> <img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202206211416869.png" alt="image-20220621141638811" style="zoom:33%;"><p><strong>普里姆算法的运行效率只与连通网中包含的顶点数相关，而和网所含的边数无关。所以普里姆算法适合于解决边稠密的网，该算法运行的时间复杂度为：O(n2)。</strong></p><p><strong>如果连通网中所含边的绸密度不高，则建议使用克鲁斯卡尔算法求最小生成树。</strong></p></blockquote><h2 id="散列表-hash-哈希表" tabindex="-1"><a class="header-anchor" href="#散列表-hash-哈希表" aria-hidden="true">#</a> 散列表(Hash)（哈希表）</h2><p>哈希表可以通过关键字直接找到数据的存储位置，不需要进行任何的比较，其查找的效率极高 O(1)。</p><h3 id="哈希表的构建" tabindex="-1"><a class="header-anchor" href="#哈希表的构建" aria-hidden="true">#</a> 哈希表的构建</h3><p>在初中数学课本中学习过函数的相关知识，给定一个x，通过一个一个数学公式，只需要将x的值代入公式就可以求出一个新的值。</p><blockquote><p>一次函数：$ f(x)=x*33 ,如果：x=2，则 f(2)=66 $</p></blockquote><p>哈希表的建立同函数类似，把函数的x用查找记录时使用的关键字来代替，然后将关键字的值代入一个精心设计的公式中，就可以求出一个值，这个值就是哈希地址。</p><blockquote><p>数据的哈希地址=f(关键字)</p></blockquote><blockquote><p>哈希地址只是表示在查找表中的存储位置，而不是实际的物理存储位置。f() 是一个函数，通过这个函数<strong>可以快速求出该关键字对应的数据的哈希地址</strong>，称之为 &quot;<strong>哈希函数</strong>&quot;。</p></blockquote><p>例如，这里有一个电话薄（查找表），电话簿中有4个人的联系方式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>张三  <span class="token number">18212345678</span>
李四	<span class="token number">15087654321</span>
王五	<span class="token number">15223456789</span>
赵六	<span class="token number">15834567890</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如想查找李四的电话号码，对于一般的查找方式最先想到的是从头开始遍历，一一比较。如果将电话簿构建成一张哈希表，可以通过名字 &quot;王五&quot; 直接找到电话号码在表中的位置。</p><p><strong>在构建哈希表时，最重要的是哈希函数的设计</strong>，例如设计电话薄案例中的哈希函数为：每个名字的姓的拼音首字母的ASCII值即为对应号码的存储位置。这时会发现，张三和赵六两个关键字的首字母都是Z，最终求出的电话号码的存储位置相同，这种现象称为哈希冲突。在设计哈希函数时，要尽量的避免哈希冲突的发生。</p><blockquote><p><strong>对于哈希表而言，冲突只能尽可能的减少，无法完全避免。</strong></p></blockquote><h3 id="哈希函数的构造" tabindex="-1"><a class="header-anchor" href="#哈希函数的构造" aria-hidden="true">#</a> 哈希函数的构造</h3><p>常用的哈希函数的构造方法有6种：<strong>直接定址法、数字分析法、平方取中法、折叠法、除留余数法、随机数法</strong>。</p><h4 id="直接定址法" tabindex="-1"><a class="header-anchor" href="#直接定址法" aria-hidden="true">#</a> 直接定址法</h4><p>直接定址法：其哈希函数为一次函数，即以下两种形式：</p><blockquote><p>$ H(key)=key $ 或者 $ H(key) = a * key +b $</p><p>其中H(key)表示关键字为key对应的哈希地址，a和b都为常数。</p></blockquote><p>例如有一个从1岁到100岁的人口数据统计表，如下表所示：</p><table><thead><tr><th style="text-align:center;">地址</th><th style="text-align:center;">01</th><th style="text-align:center;">02</th><th style="text-align:center;">03</th><th style="text-align:center;">...</th><th style="text-align:center;">25</th><th style="text-align:center;">26</th><th style="text-align:center;">27</th><th style="text-align:center;">...</th></tr></thead><tbody><tr><td style="text-align:center;">年龄</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">...</td><td style="text-align:center;">25</td><td style="text-align:center;">26</td><td style="text-align:center;">27</td><td style="text-align:center;">...</td></tr><tr><td style="text-align:center;">人数</td><td style="text-align:center;">3000</td><td style="text-align:center;">2000</td><td style="text-align:center;">5000</td><td style="text-align:center;">...</td><td style="text-align:center;">1050</td><td style="text-align:center;">2050</td><td style="text-align:center;">3300</td><td style="text-align:center;">...</td></tr></tbody></table><p>假如其哈希函数为第一种形式，其关键字的值表示最终的存储位置。若需要查找年龄为25岁的人口数量，将年龄25代入哈希函数中，直接求得其对应的哈希地址为25（求得的哈希地址表示该记录的位置在查找表的第25位）。</p><h4 id="数字分析法" tabindex="-1"><a class="header-anchor" href="#数字分析法" aria-hidden="true">#</a> 数字分析法</h4><p>数字分析法：如果关键字由多位字符或数字组成，就可以考虑抽取其中的2位或者多位作为该关键字对应的哈希地址，在取法上尽量选择变化较多的位，避免发生冲突。</p><p>例如表2中列举的一部分关键字，每个关键字都是8位十进制数字组成：</p><table><thead><tr><th style="text-align:center;">8</th><th style="text-align:center;">1</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th><th style="text-align:center;">6</th><th style="text-align:center;">5</th><th style="text-align:center;">3</th><th style="text-align:center;">2</th></tr></thead><tbody><tr><td style="text-align:center;">8</td><td style="text-align:center;">1</td><td style="text-align:center;">3</td><td style="text-align:center;">7</td><td style="text-align:center;">2</td><td style="text-align:center;">2</td><td style="text-align:center;">4</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">1</td><td style="text-align:center;">3</td><td style="text-align:center;">8</td><td style="text-align:center;">7</td><td style="text-align:center;">4</td><td style="text-align:center;">2</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">1</td><td style="text-align:center;">3</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">3</td><td style="text-align:center;">6</td><td style="text-align:center;">7</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">1</td><td style="text-align:center;">3</td><td style="text-align:center;">2</td><td style="text-align:center;">2</td><td style="text-align:center;">8</td><td style="text-align:center;">1</td><td style="text-align:center;">7</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">1</td><td style="text-align:center;">3</td><td style="text-align:center;">3</td><td style="text-align:center;">8</td><td style="text-align:center;">9</td><td style="text-align:center;">6</td><td style="text-align:center;">7</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">1</td><td style="text-align:center;">3</td><td style="text-align:center;">6</td><td style="text-align:center;">8</td><td style="text-align:center;">5</td><td style="text-align:center;">3</td><td style="text-align:center;">7</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">1</td><td style="text-align:center;">4</td><td style="text-align:center;">1</td><td style="text-align:center;">9</td><td style="text-align:center;">3</td><td style="text-align:center;">5</td><td style="text-align:center;">5</td></tr></tbody></table><p>通过分析关键字的构成，很明显可以看到关键字的第1位和第2位都是固定不变的，而第3位不是数字3就是数字4，最后一位只可能取</p><p>2、7、5，只有中间的4位取值近似随机，所以为了避免冲突，可以从4位中任意选取2位作为其哈希地址。</p><h4 id="平方取中法" tabindex="-1"><a class="header-anchor" href="#平方取中法" aria-hidden="true">#</a> 平方取中法</h4><p>平方取中法：是对<strong>关键字做平方操作</strong>，<strong>取中间的几位作为哈希地址</strong>，此方法也是<strong>比较常用</strong>的构造哈希函数的方法。</p><p>例如关键字序列为：$ {321 ,356 ,378} $ ,对各个关键字进行平方后的结果为：$ {103041,126736,142884} $，则可以取中间的两位{30,67,28}，作为其哈希地址。</p><h4 id="折叠法" tabindex="-1"><a class="header-anchor" href="#折叠法" aria-hidden="true">#</a> 折叠法</h4><p>折叠法：是将关键字分割成位数相同的几部分（最后一部分的位数可以不同），然后取这几部分的叠加和（舍去进位）作为哈希地址，此方法适合关键字位数较多的情况。</p><p>例如，在图书馆中图书都是以一个10位数的十进制数字作为关键字进行编号的，若对其查找表建立哈希表时，就可以使用折叠法。</p><p>若某书的编号为：0-332-20086-3，分割方式如图1所示，在对其进行折叠时有两种方式：一种是<strong>移位折叠</strong>，另一种是<strong>间界折叠</strong>：</p><ul><li><p>移位折叠是将分割后的每一小部分，按照最低位对其，然后相加（如有进位，舍去），如图1.1所示：</p></li><li><p>间届折叠法是从一端向另一端沿着分割线来回折叠，如图1.2。</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205290140058.png" alt="image-20220529014016955" style="zoom:50%;"></li></ul><h4 id="除留余数法" tabindex="-1"><a class="header-anchor" href="#除留余数法" aria-hidden="true">#</a> 除留余数法</h4><p>除留余数法：若已知整个哈希表最大长度 m，可以取一个不大于 m 的数 p，然后对关键字 key 做取余运算，即 $ H(key) = key \\ % \\ p \\ $。</p><blockquote><p>此方法中对于 p 的取值非常重要，由经验得知 <strong>p 可以为不大于 m 的质数</strong>或者<strong>不包括质因数小于20的合数</strong>。</p><ul><li><strong>质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数</strong>；否则称为合数（规定1既不是质数也不是合数）。</li><li><strong>合数是指在大于1的整数中除了能被1和本身整除外</strong>，<strong>还能被其他数（0除外）整除的数</strong>。与之相对的是质数，而1既不属于质数也不属于合数。最小的合数是4。</li><li><strong>约数，又称因数</strong>。整数a除以整数b(b≠0) 除得的商正好是整数而没有余数，我们就说a能被b整除，或b能整除a。a称为b的倍数，b称为a的约数。</li><li><strong>质因数</strong>：就是<strong>一个数的约数</strong>，<strong>约数是质数</strong>。</li></ul></blockquote><h4 id="随机数法" tabindex="-1"><a class="header-anchor" href="#随机数法" aria-hidden="true">#</a> 随机数法</h4><p>​ 随机数法：通过key生成一个随机数作为它的哈希地址，即：$ H(key)=random(key) $ ，<strong>此方法适用于关键字长度不等的情况</strong>。</p><blockquote><p>注意：这里的随机函数其实是伪随机函数，随机函数是即使每次给定的key相同，但是 $ H(key) $ 不一定相同；而伪随机函数则是每个key对应的都是固定的 $ H(key) $。</p></blockquote><p>​ 如此多的构建哈希函数的方法，在选择的时候，需要根据实际的查找表的情况采取适当的方法。通常考虑的因素有以下几个方面：</p><ul><li>关键字的长度： <ul><li>如果长度不等，就选用随机数法；</li><li>如果关键字位数较多，就选用折叠法或者数字分析法；</li><li>如果位数较短，就可以考虑平方取中法；</li></ul></li><li>哈希表的大小： <ul><li>如果大小已知，可以选用除留余数法。</li></ul></li><li>关键字的分布情况。</li><li>查找表的查找频率。</li><li>计算哈希值所需的时间（包括硬件指令的因素）。</li></ul><h3 id="处理冲突的方法" tabindex="-1"><a class="header-anchor" href="#处理冲突的方法" aria-hidden="true">#</a> 处理冲突的方法</h3><p>对于哈希表的建立，需要选取适合的哈希函数，但是对于无法避免的冲突，需要采取适当的措施去处理。</p><p>通常用的处理冲突的方法有以下几种：</p><h4 id="开放定址法" tabindex="-1"><a class="header-anchor" href="#开放定址法" aria-hidden="true">#</a> 开放定址法</h4><blockquote><p>$ H(key)=(H(key)+d)\\ MOD\\ m$ （其中m为哈希表的表长，d为一个增量）</p></blockquote><p>​ 当得出的哈希地址产生冲突时，选取以下 3 种方法的一种获取 d 的值，然后继续计算，直到计算出的哈希地址不再冲突为止，这 3 种方法分别为：</p><ul><li>线性探测法：d = 1,2,3,..,m-1 ；</li><li>二次探测法：d = $ 1^2 $ , $ -(1^2) $ ,$ 2^2 $ ,$ -(2^2) $ ,... ,$ x^2 $ ,$ -(x^2) $ ；$( x&lt;m/2) $</li><li>伪随机数法：d = 伪随机数 ；</li></ul><p>例如：在长度为11的哈希表中已填好 $ {17,60,29} $ 这三个数据（如图2.1所示），其中采用的哈希函数为 $ H(key)=key\\ MOD\\ 11 $ ,现有第四个数据 38，当通过哈希函数求得的地址为 5 ，与 60 冲突 ，则分别采用以上 3 种方式求得插入为止如图 2.2 所示：</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205300030627.png" alt="image-20220530003028484" style="zoom:33%;"><p>​ 图2</p><blockquote><p>在线性探测法中，当遇到冲突时，从发生冲突的地方起，每次+1，向右探测，直到有空闲为止；</p><p>二次探测法中，从发生冲突的位置起，按照 $ +(1^2) $ , $ -(1^2) $ ,$ +(2^2) $ ,$ -(2^2) $ ,... ,$ +(x^2) $ ,$ -(x^2) $ ；$( x&lt;m/2) $ 如此探测，直到有空闲位置；</p><p>伪随机探测，每次加上一个随机数，直到探测到空闲位置结束；</p></blockquote><h4 id="再哈希法" tabindex="-1"><a class="header-anchor" href="#再哈希法" aria-hidden="true">#</a> 再哈希法</h4><blockquote><p>当通过哈希函数求得的哈希地址同其他关键字产生冲突时，使用另一个哈希函数计算，直到冲突不再发生。</p></blockquote><h4 id="链地址法" tabindex="-1"><a class="header-anchor" href="#链地址法" aria-hidden="true">#</a> 链地址法</h4><blockquote><p>将所有产生冲突的关键字所对应的数据全部存储在同一个线性链表中。例如有一组13个关键字为 \${19,14,23,01,68,20,84,27,55,11,10,79}$ , 其哈希函数为：$H(key)=key\\ MOD\\ 13$ ，使用链地址法所构建的哈希表如下图所示：</p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202205300050443.png" alt="image-20220530005022359" style="zoom:33%;"></blockquote><h4 id="建立一个公共溢出区" tabindex="-1"><a class="header-anchor" href="#建立一个公共溢出区" aria-hidden="true">#</a> 建立一个公共溢出区</h4><blockquote><p>建立两张表，一张为基本表，另一张为溢出表。基本表存储没有发生冲突的数据，当关键字由哈希函数生成的哈希地址产生冲突时，就将数据填入溢出表。</p></blockquote><h3 id="哈希查找算法及c语言实现" tabindex="-1"><a class="header-anchor" href="#哈希查找算法及c语言实现" aria-hidden="true">#</a> 哈希查找算法及C语言实现</h3><blockquote><p>在哈希表中进行查找的操作同哈希表的构建过程类似，其具体实现思路为：对于给定的关键字K，将其代入哈希函数中，求得该关键字对应的数据的哈希地址，如果地址中没有数据，则证明该查找表中没有存储该数据。</p><p>如果哈希地址中有数据，就需要做进一步证明（排除冲突影响），找到该数据对应的关键字同 K 进行比较，如果相等，则查找成功。反之，如果不相等，说明在构造哈希表时发生了冲突，需要根据构造表时设定的处理冲突的方法找到下一个地址，同地址中的数据进行对比，知道遇到地址中数据NULL（说明查找失败），或者对比成功。</p><p>处理冲突的方法有：开放定址法、再哈希法、链地址法、建立公共溢出区法。</p></blockquote><blockquote><p>假设哈希表在构造过程采用的开放定址法处理的冲突，则哈希表的查找过程用代码实现为：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_SIZE</span> <span class="token expression"><span class="token number">7</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL_KEY</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ElemType <span class="token operator">*</span>elem<span class="token punctuation">;</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">*</span>HashTable<span class="token punctuation">,</span> HashTable0<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">CreateHashTable</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>table<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>table <span class="token operator">=</span> <span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>table<span class="token punctuation">)</span><span class="token operator">-&gt;</span>count <span class="token operator">=</span> HASH_SIZE<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>table<span class="token punctuation">)</span><span class="token operator">-&gt;</span>elem <span class="token operator">=</span> <span class="token punctuation">(</span>ElemType <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span> <span class="token operator">*</span> HASH_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASH_SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>table<span class="token punctuation">)</span><span class="token operator">-&gt;</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> NULL_KEY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">HashCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> key <span class="token operator">%</span> HASH_SIZE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>HashTable table<span class="token punctuation">,</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">HashCode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>table<span class="token operator">-&gt;</span>elem<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">!=</span> NULL_KEY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hash<span class="token operator">++</span><span class="token punctuation">;</span>
        hash <span class="token operator">=</span> hash <span class="token operator">%</span> HASH_SIZE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    table<span class="token operator">-&gt;</span>elem<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">Search</span><span class="token punctuation">(</span>HashTable table<span class="token punctuation">,</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">HashCode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-&gt;</span>elem<span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token operator">==</span>NULL_KEY<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>table<span class="token operator">-&gt;</span>elem<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">!=</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>hash<span class="token punctuation">;</span>
        hash <span class="token operator">=</span> hash <span class="token operator">%</span> HASH_SIZE<span class="token punctuation">;</span>
        <span class="token comment">//如果根据hash查找到为NULL 或者 查了一圈，回到原来的位置，则查找失败</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-&gt;</span>elem<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">==</span> NULL_KEY <span class="token operator">||</span> hash <span class="token operator">==</span> <span class="token function">HashCode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>HASH_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    HashTable table<span class="token punctuation">;</span>
    <span class="token function">CreateHashTable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASH_SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Insert</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">Search</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d 在哈希表中的位置： %d\\n&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//输出：</span>
<span class="token comment">//38 在哈希表中的位置： 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="查找算法的效率分析" tabindex="-1"><a class="header-anchor" href="#查找算法的效率分析" aria-hidden="true">#</a> 查找算法的效率分析</h4><blockquote><p>在构造哈希表的过程中，由于冲突的产生，使得哈希表的查找算法仍然会涉及到比较的过程，因此对于哈希表的查找效率仍需以平均查找长度来衡量。</p></blockquote><blockquote><p>在哈希表的查找过程中需 和 给定值进行比较的关键字的个数取决于以下 3 个因素：</p><ul><li>哈希函数：哈希函数的“好坏”取决于影响出现冲突的频繁程度。但是一般情况下，哈希函数相比于后两种影响，可以忽略不计。</li><li>处理哈希冲突的方式：对于同一组关键字，设定相同的哈希函数，使用不同的处理冲突方式得到的哈希表是不同的，表的平均查找长度也不同。</li><li>哈希表的装填因子：在一般情况下，在处理冲突的方式相同的情况下，其平均查找长度取决于哈希表的装满程度：装的越满，插入数据时越有可能发生冲突，反之越小。</li></ul></blockquote><blockquote><p>装填因子=哈希表中数据个数/哈希表长度，用字母 α （是数学符号，不是字母a）。装填因子越小，表示哈希表中空闲的位置就越多。</p></blockquote><blockquote><p>经过计算，在假设查找表中的所有数据的查找概率相等的情况下，对于表长为m，数据个数为n的哈希表：</p><ul><li>其查找成功的平均查找长度约为：$-1/a*In(1-a)$</li><li>其查找不成功的平均查找长度约为：$1/(1-a)$</li></ul><p>通过公式可以看到，哈希表的查找效率只同填充因子有关，而同哈希表中的数据个数无关，所以在选用哈希表做查找操作时，选择一个合适的装填因子时非常必要的。</p></blockquote><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h2><h3 id="_1、动态规划-dynamic-programming-dp" tabindex="-1"><a class="header-anchor" href="#_1、动态规划-dynamic-programming-dp" aria-hidden="true">#</a> 1、动态规划（Dynamic Programming，DP）</h3><p>最优子结构：F(3)=F(2)+F(1)，则称项F(2)、F(1)为F(2)项的最优子结构。</p><p>边界：从分析题里面得来(F0)=1,F(1)=2 ,称F(0)、F(2)为为该动态规划问题的边界。</p><p>状态转移方程：F(n)=F(n-1)+F(n-2)为该DP问题的状态转移方程。</p><h3 id="_2、贪心思想" tabindex="-1"><a class="header-anchor" href="#_2、贪心思想" aria-hidden="true">#</a> 2、贪心思想</h3><blockquote><p>贪心算法的问题需要满足的条件：</p><ul><li>最优子结构：规模大的问题的解由规模较小的子问题组成，规模较大的问题的解只能由其中一个规模较小的子问题的解决定。</li><li>无后效性：后面阶段的求解不会修改前面阶段已经计算好的结果；</li><li>贪心选择性质：从局部最优解可以得到全局最优解。</li></ul></blockquote><p>贪心算法与动态规划的区别</p><ol><li>贪心是求局部最优解，但不一定是全局最优解。若想要全局最优必须证明。</li><li></li></ol>`,338);function W(J,nn){const o=e("center"),t=e("ExternalLinkIcon");return l(),i("div",null,[a(o,null,{default:u(()=>[r]),_:1}),d,v,s("blockquote",null,[s("p",null,[n("维基百科：在"),s("a",m,[n("计算机科学"),a(t)]),n("中，"),b,n("（英语：data structure）是计算机中存储、组织"),s("a",g,[n("数据"),a(t)]),n("的方式。")]),y,h]),f,s("blockquote",null,[s("p",null,[n("维基百科："),w,n("（algorithm；算法），在"),s("a",x,[n("数学"),a(t)]),n("（"),s("a",L,[n("算学"),a(t)]),n("）和"),s("a",q,[n("计算机科学"),a(t)]),n("之中，指一个被定义好的、计算机可施行其指示的有限步骤或次序，常用于"),s("a",_,[n("计算"),a(t)]),n("、"),s("a",T,[n("数据处理"),a(t)]),n("和"),s("a",E,[n("自动推理"),a(t)]),n("。算法是"),s("a",N,[n("有效方法"),a(t)]),n("，包含一系列定义清晰的指令，并可于"),s("a",V,[n("有限的"),a(t)]),n("时间及空间内清楚的表述出来。")]),s("p",null,[n("百度百科：算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰"),s("a",S,[n("指令"),a(t)]),n("，算法代表着用系统的方法描述解决问题的策略机制。")]),z]),A,s("blockquote",null,[s("p",null,[n("百度百科：程序调用自身的编程技巧称为递归（ recursion）。递归作为一种"),s("a",j,[n("算法"),a(t)]),n("在"),s("a",C,[n("程序设计语言"),a(t)]),n("中广泛应用。 一个过程或"),s("a",Q,[n("函数"),a(t)]),n("在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的"),s("a",B,[n("语句"),a(t)]),n("来定义对象的"),s("a",U,[n("无限集合"),a(t)]),n("。一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。")])]),D,s("blockquote",null,[s("p",null,[n("法国数学家"),s("a",I,[n("爱德华·卢卡斯"),a(t)]),n("曾编写过一个印度的古老传说：在世界中心贝拿勒斯（在印度北部）的圣庙里，一块黄铜板上插着三根宝石针。印度教的主神"),s("a",P,[n("梵天"),a(t)]),n("在创造世界的时候，在其中一根针上从下到上地穿好了由大到小的64片金片，这就是所谓的汉诺塔。不论白天黑夜，总有一个僧侣在按照下面的法则移动这些金片：一次只移动一片，不管在哪根针上，小片必须在大片上面。僧侣们预言，当所有的金片都从梵天穿好的那根针上移到另外一根针上时，世界就将在一声霹雳中消灭，而"),s("a",G,[n("梵塔"),a(t)]),n("、庙宇和众生也都将同归于尽。")]),H]),O,s("blockquote",null,[s("p",null,[n("在8×8格的"),s("a",X,[n("国际象棋"),a(t)]),n("上摆放8个"),s("a",M,[n("皇后"),a(t)]),n("，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。"),s("a",F,[n("高斯"),a(t)]),n("认为有76种方案。1854年在"),s("a",Z,[n("柏林"),a(t)]),n("的象棋杂志上不同的作者发表了40种不同的解，后来有人用"),s("a",R,[n("图论"),a(t)]),n("的方法解出92种结果。如果经过±90度、±180度旋转，和对角线对称变换的摆法看成一类，共有42类。"),s("a",$,[n("计算机"),a(t)]),n("发明后，有多种计算机语言可以编程解决此问题")]),K]),Y])}const an=c(k,[["render",W],["__file","数据结构与算法C语言实现.html.vue"]]);export{an as default};
