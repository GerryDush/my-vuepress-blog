import{_ as i,r,o,c as t,d as a,e as n,b as d,a as e}from"./app-521e935c.js";const l={},c=e(`<h1 style="text-align:center;">TensorFlow</h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><h3 id="apple-m1-配置安装-tensorflow" tabindex="-1"><a class="header-anchor" href="#apple-m1-配置安装-tensorflow" aria-hidden="true">#</a> Apple M1 配置安装 TensorFlow</h3><h4 id="本机环境" tabindex="-1"><a class="header-anchor" href="#本机环境" aria-hidden="true">#</a> 本机环境</h4><p>MacOS Ventura 13.0</p><h3 id="检查自己的-conda-环境" tabindex="-1"><a class="header-anchor" href="#检查自己的-conda-环境" aria-hidden="true">#</a> 检查自己的 Conda 环境</h3><p>虽然conda官方已提供minicoda的mac m1适配，但也不能用，一定需要miniforge3，如以前环境较乱，最好是删除自己装过的miniforge3环境重装。</p><p><strong>删除已有环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>    <span class="token builtin class-name">cd</span> ~
    <span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/miniforge3
    <span class="token function">rm</span> <span class="token parameter variable">-rf</span> .conda
    <span class="token function">rm</span> <span class="token parameter variable">-rf</span> .condarc
    <span class="token comment">#完成后，进入 .zshrc ，gg 将末端配置 miniforge3 的 PATH 配置删除。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="下载安装-conda-env-环境" tabindex="-1"><a class="header-anchor" href="#下载安装-conda-env-环境" aria-hidden="true">#</a> 下载安装 <a href="%5Bgithub.com%5D(https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-arm64.sh)">Conda env</a>（环境）</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x ~/Downloads/Miniforge3-MacOSX-arm64.sh
<span class="token function">sh</span> ~/Downloads/Miniforge3-MacOSX-arm64.sh
<span class="token builtin class-name">source</span> ~/miniforge3/bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-conda-环境" tabindex="-1"><a class="header-anchor" href="#创建-conda-环境" aria-hidden="true">#</a> 创建 Conda 环境</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">-n</span> tf26 <span class="token assign-left variable">python</span><span class="token operator">==</span><span class="token number">3.9</span>
conda create <span class="token parameter variable">-n</span> tf26 <span class="token assign-left variable">python</span><span class="token operator">==</span><span class="token number">3.8</span>
 <span class="token comment"># 3.8和3.9都可以，pytorch需要3.9</span>
 <span class="token comment">#在我的电脑上安装了 3.9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切换到自己的conda环境" tabindex="-1"><a class="header-anchor" href="#切换到自己的conda环境" aria-hidden="true">#</a> 切换到自己的conda环境</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda activate tf26
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="安装-tensorflow-依赖" tabindex="-1"><a class="header-anchor" href="#安装-tensorflow-依赖" aria-hidden="true">#</a> 安装 TensorFlow 依赖</h4><p>安装tensorflow依赖包，此前安装过的需要卸载旧版</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda <span class="token function">install</span> <span class="token parameter variable">-c</span> apple tensorflow-deps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>安装指定版本依赖</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#conda install -c apple tensorflow-deps==2.6.0 #example </span>
conda <span class="token function">install</span> <span class="token parameter variable">-c</span> apple tensorflow-deps<span class="token operator">==</span>x.x.x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="install-tensorflow" tabindex="-1"><a class="header-anchor" href="#install-tensorflow" aria-hidden="true">#</a> Install TensorFlow</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> tensorflow-macos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="安装-tensorflow-metal-插件" tabindex="-1"><a class="header-anchor" href="#安装-tensorflow-metal-插件" aria-hidden="true">#</a> 安装 TensorFlow-metal 插件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> tensorflow-metal
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="测试安装" tabindex="-1"><a class="header-anchor" href="#测试安装" aria-hidden="true">#</a> 测试安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#conda activate tf26 #需要在前面配置的环境里面运行</span>
python  <span class="token comment">#进入python 交互式编程 界面；交互式编程：直接在命令行编写；脚本式编程：在文件里面编写，再编译运行</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">import</span> tensorflow <span class="token comment">#在交互式编程界面，输入 import tensorflow</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> 									<span class="token comment">#没有报错，也没有输出一大坨东西，证明安装成功</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="anaconda" tabindex="-1"><a class="header-anchor" href="#anaconda" aria-hidden="true">#</a> Anaconda</h2><h3 id="what-is-anaconda" tabindex="-1"><a class="header-anchor" href="#what-is-anaconda" aria-hidden="true">#</a> What is Anaconda？</h3><p>Anaconda指的是一个<strong>开源的Python发行版本</strong>（应该是和openjdk类似的东西），其包含了<strong>conda</strong>、<strong>Python</strong>等180多个科学包及其依赖项。 因为包含了大量的科学包，Anaconda 的下载文件比较大（约 531 MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用<strong>Miniconda</strong>这个较小的发行版（仅包含conda和 Python）。</p><h4 id="what-is-conda" tabindex="-1"><a class="header-anchor" href="#what-is-conda" aria-hidden="true">#</a> What is Conda？</h4><p>Conda 是一个开源的包、环境管理器，可以用于在同一个机器上安装不同版本的软件包及其依赖，并能够在不同的环境之间切换。</p><ul><li>Conda 用于 比如，一台机器上 有 Python2 和 Python3（Python2 和 Python3 语法不兼容） 或 多种 基于不同 Python 版本编写的项目，例如我们本机已经安装 Python3，如果想运行基于Python2的项目怎么办？Conda 应该就是解决这个问题的，可以创建有不同Python版本的虚拟环境，在运行基于不同Python版本的项目时，切换到对应的虚拟环境即可。</li></ul><h3 id="what-is-miniforge" tabindex="-1"><a class="header-anchor" href="#what-is-miniforge" aria-hidden="true">#</a> What is Miniforge？</h3>`,33),p={href:"https://github.com/conda-forge/miniforge",target:"_blank",rel:"noopener noreferrer"},h=e(`<p><strong>Why is miniforge?</strong></p><p>到目前为止，我们查阅anaconda的官网可发现，由于目前Anaconda没有支持arm架构的版本，在M1芯片Mac上安装的Anaconda是非常不稳定的，而且仅支持最高3.8版本的Python。而官网原生支持运行在arm架构上的Python版本为3.9.1，所以综合来讲我们只能寻找一种替代方案，那就是miniforge。</p><p>conda创建python虚拟环境时候下载python慢，依次执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="神经网络基础" tabindex="-1"><a class="header-anchor" href="#神经网络基础" aria-hidden="true">#</a> 神经网络基础</h2><h3 id="得分函数" tabindex="-1"><a class="header-anchor" href="#得分函数" aria-hidden="true">#</a> 得分函数</h3><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202211102040901.jpg" alt="20160731215030972"></p><p>得分函数的目的：我们要做的就是对于一个给定的输入，比如一张小猫的图片，通过一系列复杂的变换（中间的过程咱们暂且当做一个黑盒子）能得到这个输入对应于每个类别的得分数值。</p><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202211102045246.jpg" alt="20160731215030972"></p><p>首先对于一个32 x 32 x 3的输入，我们把它拉伸成一个列向量（一维数组），也就是一个3072 x 1的向量。</p><ul><li>咱们下面用最简单的线性分类来解释整个过程，在线性分类中，我们需要权重参数W和B，那么W是整个线性分类的核心参数。</li><li>我们要把一个输入分成10个类别并且对于每个类别给定一个得分数值，这样咱们的W参数矩阵就是一个10*3072的矩阵</li><li>我们可以通俗的理解成对于每一个类别我们都有3072个小参数去和咱们的输入（3072维的列向量）去计算最终的的分值，那么10就是我们最终要输入多少个类别。</li><li>参数B 偏置项 ，属于某一个类别的 加分。</li></ul><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202211102048349.jpg" alt="20160731215923917"></p><p><strong>得分函数计算实例：上图就是一个得分函数计算的最简单的一个流程，我们假设图像是有4个像素点组成的，然后咱们把它拉成了一个列向量（Xi），权重参数W是一个3*4的矩阵，因为咱们要把输入分成三个类别，最终再加上参数b得到了最终这只小猫属于每个类别的得分数值。</strong></p><p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202211102049975.jpg" alt="20160731220453850"></p><p>理解参数W和b:下面咱们再通过这张图来形象的理解下参数W和b,在真实的情况下对于每一个类别的参数W是一个3072维的，但是咱们为了形象化理解把它画在了2维的空间中，我们可以从图中看到三种颜色的线代表了三个线性分类器，参数W的每一个小权重的改变（共有3072个小权重）意味着这条线在改变的小参数的那个维度发生了偏转，我们可以想象2维空间中对于W的改变意味着什么然后再去想象这个3072维的空间。</p><p>参数b是比不可少的，因为如果没有b那么所有的分类线都会交集与零点，这显然是不可取的嘛。</p><p>但是如何从一个输入计算出它最终属于每一个类别的得分在一个实际的深度学习网络中可没这么简单就搞定，这样做只是能更好的理解这个得分函数。</p><p><strong>得分函数，得到一个图像属于不同类别的得分（比如属于猫、狗）</strong></p><p><strong>W 应该是相当于 多种不同类别 的模板，Xi 是输入的图像，Xi 分别和 W 多种不同类别的模板进行计算，得到 Xi 属于不同类别的不同得分，b 则是 Xi 属于某一个类别的加分项（偏置）。</strong></p><p><strong>W是先设置一个初始值权重，然后在训练时候不断优化</strong></p><h3 id="损失函数" tabindex="-1"><a class="header-anchor" href="#损失函数" aria-hidden="true">#</a> 损失函数</h3><p>损失函数的作用：衡量模型模型预测的好坏。再简单一点说就是：损失函数就是用来表现预测与实际数据的差距程度。</p><p>损失函数（loss function）是用来估量你模型的预测值f(x)与真实值Y的不一致程度，它是一个非负实值函数,通常使用L(Y, f(x))来表示，损失函数越小，模型的鲁棒性就越好。</p>`,23);function m(u,b){const s=r("ExternalLinkIcon");return o(),t("div",null,[c,a("ul",null,[a("li",null,[a("a",p,[n("Miniforge"),d(s)]),n(" 应该是和 Miniconda 是一样的功能。简介说到其功能可以与miniconda相媲美，如果我们需要安装管理各种python的库，安装miniforge即可。")])]),h])}const g=i(l,[["render",m],["__file","TensorFlow.html.vue"]]);export{g as default};
