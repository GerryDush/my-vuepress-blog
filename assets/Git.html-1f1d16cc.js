import{_ as i,o as l,c as e,a as t}from"./app-521e935c.js";const s={},o=t(`<p style="text-align:center;font-size:50px;font-weight:600;">Git</p><h2 id="开始" tabindex="-1"><a class="header-anchor" href="#开始" aria-hidden="true">#</a> 开始</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><p><strong>Git</strong> 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p><p><strong>Git 通过简单的链表来解决代码分支问题，通过指针的移动就可以在不同版本来回切换，甚至不管是主干版本还是分支都可以</strong></p><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202209080420940.png" alt="QQ20220908-042017@2x" style="zoom:33%;"><h3 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h3><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202209080348389.png" alt="QQ20220908-034756@2x" style="zoom:33%;"><ol><li><p>创建文件夹</p></li><li><p><code>git init</code></p><ul><li>初始化为工作目录</li></ul></li><li><p><code>git add</code></p><ul><li>把需要git跟踪的文件添加进去，并把这些文件记录到暂存区</li><li>暂存区其实是一个索引文件，它记录了下一次要提交的文件列表</li><li><code>git add .</code>添加当前目录的所有文件</li><li><code>git add &lt;path&gt;</code> 添加单个文件 或 文件夹</li></ul></li><li><p><code>git commit</code></p><ul><li>把文件记录到git仓库</li><li>git仓库保存了项目的元数据和对象数据库，并且它是以快照方式保存的</li><li>快照模式相当于给当前的状态拍一个照片，记录每一个细节</li><li>git仓库是存储在本地计算机硬盘的，速度非常快</li><li><code>git commit -m &quot;xxx&quot;</code> -m 后面带的是提交备注，这个是必须的，方便给自己或别人知道自己做了些什么，没有备注是不能提交的</li></ul></li></ol><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202209080414078.png" alt="QQ20220908-041404@2x" style="zoom:33%;"><p>​ 这说明我们跟踪的文件已经进入了git仓库</p><ol start="5"><li><code>git log</code><ul><li>查看本次提交日志</li></ul></li></ol><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202209080416218.png" alt="QQ20220908-041553@2x" style="zoom:33%;"><p>​ 可以看到有一个提交 ID ，这个ID是唯一的，每一次提交都不一样，可以用于回退到任意版本</p><p>​ HEAD：就是刚开始提到的指针，它现在指向master分支，也是我们现在唯一的分支</p><ul><li><p><code>git reset --hard &lt;commit_id&gt;</code></p><ul><li>回退版本</li></ul></li><li><p><code>git clone &lt;url&gt; </code></p></li><li><p>拉取代码</p></li><li><p><code>git push</code></p><ul><li>将本地的分支版本上传到远程并合并</li></ul></li><li><p><code>git config user.name &quot;username&quot;</code></p><ul><li>设置当前项目的 git 提交用户名</li></ul></li><li><p><code>git config user.email &quot;xxx@xxx.xxx&quot;</code></p><ul><li>设置当前项目的 git 提交邮箱</li></ul></li><li><p><code>git config --global user.name &quot;username&quot;</code></p><ul><li>设置全局 git 提交用户名</li></ul></li><li><p><code>git config --global user.email &quot;xxx@xxx.xxx&quot;</code></p><ul><li>设置全局 git 提交邮箱</li></ul></li><li><p><code>git status</code></p><ul><li>查看当前项目的状态，列出 git 跟踪的文件状态等信息...</li></ul></li></ul><h3 id="排跟踪除文件" tabindex="-1"><a class="header-anchor" href="#排跟踪除文件" aria-hidden="true">#</a> 排跟踪除文件</h3><p><strong>描述：</strong></p><ul><li>有一些文件我们并不代码跟踪，也不需要提交到远程仓库，例如 测试用例、编译出来的文件、系统自动生成的无关文件 等等...</li><li>可以在工作目录下创建 <code>.gitignore</code> 文件来指定排除的文件</li></ul><ol><li><p><code>.gitignore</code> 内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>test/ <span class="token comment">#忽略 test 文件夹</span>
*bin  <span class="token comment">#忽略bin结尾的文件</span>
xxx   <span class="token comment">#忽略xxx文件</span>
*.app <span class="token comment">#忽略app后缀的文件</span>
xxx.* <span class="token comment">#忽略文件名为xxx的文件</span>
<span class="token comment">#...</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://cxrs.oss-cn-shenzhen.aliyuncs.com/202209080409008.png" alt="QQ20220908-040911@2x" style="zoom:33%;"></li></ol><p>​ 可以看到跟踪的文件情况</p><blockquote><p>从我们的实践可以看出，我们没有连接任何的服务器，就对本地代码进行了良好的管理。</p><p>这就是分布式的一大好处，分布式一个相对于集中化的概念.</p><p>类似 SVN 之类的集中化的管理工具，如果服务器出了问题，那么谁都提交不了代码，谁也拉取不了代码 ，你只能在已经拉取的代码上工作，别人的提交和你之前的提交你都无法参考</p><p>而git 不一样，你可以不依赖服务器，本地开发都可以</p><p>即使你可能是 clone 的是在线仓库的代码，比如 github 挂了，你仍然可以查看此前的所有代码版本，你也可以把代码提交到本地，不影响你现在的开发</p></blockquote>`,22),n=[o];function c(a,d){return l(),e("div",null,n)}const r=i(s,[["render",c],["__file","Git.html.vue"]]);export{r as default};
