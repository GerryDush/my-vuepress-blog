import{_ as e,r as t,o as i,c,d as n,e as l,b as o,a}from"./app-521e935c.js";const d="/my-vuepress-blog/assets/autotools1-3800cf57.png",p={},r=a(`<h1 id="gnu" tabindex="-1"><a class="header-anchor" href="#gnu" aria-hidden="true">#</a> GNU</h1><h2 id="gcc-编译参数" tabindex="-1"><a class="header-anchor" href="#gcc-编译参数" aria-hidden="true">#</a> GCC 编译参数</h2><h3 id="编译过程" tabindex="-1"><a class="header-anchor" href="#编译过程" aria-hidden="true">#</a> 编译过程</h3><p>源代码.c -&gt; 预处理（Pre-Processing = 预编译文件.i） -&gt; 编译（Compiling = 汇编文件.s） -&gt; 汇编（Assembling = 目标文件.o） -&gt; 链接（Linking）-&gt; 可执行文件</p><h4 id="gcc-支持的后缀名" tabindex="-1"><a class="header-anchor" href="#gcc-支持的后缀名" aria-hidden="true">#</a> GCC 支持的后缀名</h4><table><thead><tr><th>后缀</th><th>对应的语言</th></tr></thead><tbody><tr><td>.c</td><td>C原始程序</td></tr><tr><td>.C/.cc/.cxx</td><td>C++原始程序</td></tr><tr><td>.m</td><td>Objective-C 原始程序</td></tr><tr><td>.i</td><td>已经预处理的C原始程序</td></tr><tr><td>.ii</td><td>已经预处理的C++原始程序</td></tr><tr><td>.s/.S</td><td>汇编语言原始程序</td></tr><tr><td>.h</td><td>预处理文件（头文件）</td></tr><tr><td>.o</td><td>目标文件</td></tr><tr><td>.a(archive)/.so</td><td>编译后的库文件，静态库/动态库</td></tr></tbody></table><h4 id="基本格式" tabindex="-1"><a class="header-anchor" href="#基本格式" aria-hidden="true">#</a> 基本格式</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token punctuation">[</span>-c<span class="token operator">|</span>-S<span class="token operator">|</span>-E<span class="token punctuation">]</span> <span class="token punctuation">[</span>-std<span class="token operator">=</span>standard<span class="token punctuation">]</span>
           <span class="token punctuation">[</span>-g<span class="token punctuation">]</span> <span class="token punctuation">[</span>-pg<span class="token punctuation">]</span> <span class="token punctuation">[</span>-Olevel<span class="token punctuation">]</span>
           <span class="token punctuation">[</span>-Wwarn<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>-Wpedantic<span class="token punctuation">]</span>
           <span class="token punctuation">[</span>-Idir<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>-Ldir<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
           <span class="token punctuation">[</span>-Dmacro<span class="token punctuation">[</span><span class="token operator">=</span>defn<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>-Umacro<span class="token punctuation">]</span>
           <span class="token punctuation">[</span>-foption<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>-mmachine-option<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
           <span class="token punctuation">[</span>-o outfile<span class="token punctuation">]</span> <span class="token punctuation">[</span>@file<span class="token punctuation">]</span> infile<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编译过程参数" tabindex="-1"><a class="header-anchor" href="#编译过程参数" aria-hidden="true">#</a> 编译过程参数</h4><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>-c</td><td>只编译不链接，生成目标文件.o</td></tr><tr><td>-S</td><td>只编译不链接，生成汇编代码</td></tr><tr><td>-E</td><td>只预编译</td></tr><tr><td>-g</td><td>保护调试信息</td></tr><tr><td>-o [file]</td><td>指定目标输出文件名</td></tr><tr><td>-I[dir]</td><td>指定头文件搜索路径</td></tr></tbody></table><h3 id="库选项" tabindex="-1"><a class="header-anchor" href="#库选项" aria-hidden="true">#</a> 库选项</h3><p>Linux 下静态链接库和动态链接库格式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>.a  <span class="token punctuation">[</span>libname.a<span class="token punctuation">]</span>
.so <span class="token punctuation">[</span>libname.so<span class="token punctuation">[</span>主版本号.次版本号.发行号<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>-static</td><td>静态编译</td></tr><tr><td>-shared</td><td>动态编译，生成动态库文件</td></tr><tr><td>-L[dir]</td><td>库文件搜索路径</td></tr><tr><td>-fPIC</td><td>生成使用相对位置无关的目标代码（Position Independent Code），通常用于使用-static 选项从该PIC目标文件生成动态库文件</td></tr></tbody></table><h4 id="编译静态链接库和动态链接库" tabindex="-1"><a class="header-anchor" href="#编译静态链接库和动态链接库" aria-hidden="true">#</a> 编译静态链接库和动态链接库</h4><p>编译静态链接库</p><ol><li>先生成目标文件.o</li><li>ar crv [<em>.a] [</em>.o]</li></ol><h4 id="调用静态链接库" tabindex="-1"><a class="header-anchor" href="#调用静态链接库" aria-hidden="true">#</a> 调用静态链接库</h4><p><code>gcc - o [file] [file.c] -L[dir] [file.a]</code></p><h4 id="编译动态链接库" tabindex="-1"><a class="header-anchor" href="#编译动态链接库" aria-hidden="true">#</a> 编译动态链接库</h4><ol><li>生成位置无关的目标代码 gcc -fPIC -c [*.c]</li><li>gcc -shared -o [<em>.so] [</em>.o]</li></ol><h4 id="调用动态链接库-与静态链接库类似" tabindex="-1"><a class="header-anchor" href="#调用动态链接库-与静态链接库类似" aria-hidden="true">#</a> 调用动态链接库（与静态链接库类似）</h4><p>gcc -o [file] [file.c] -L[dir] [file.so]</p><h4 id="动态链接库的系统路径-path" tabindex="-1"><a class="header-anchor" href="#动态链接库的系统路径-path" aria-hidden="true">#</a> 动态链接库的系统路径 PATH</h4><p>可以在此路径找到动态库搜索路径 <code>/etc/ld.so.conf</code></p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><h4 id="提前准备" tabindex="-1"><a class="header-anchor" href="#提前准备" aria-hidden="true">#</a> 提前准备</h4><ol><li>countlib.h</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>countlib.c</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>count.c</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;countlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
    <span class="token function">sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;%u&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;%u&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result is : %lu\\n&quot;</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编译静态链接库" tabindex="-1"><a class="header-anchor" href="#编译静态链接库" aria-hidden="true">#</a> 编译静态链接库</h4><ol><li>生成目标文件.o</li></ol><p><code>gcc -c countlib.c</code> 2. 生成静态链接库.a</p><p><code>ar crv countlib.a countlib.o</code></p><ol start="3"><li>调用静态链接库</li></ol><p><code>gcc -o count count.c -I. -L. countlib.a</code></p><ol start="4"><li>运行</li></ol><p><code>./count</code></p><h4 id="编译动态链接库-1" tabindex="-1"><a class="header-anchor" href="#编译动态链接库-1" aria-hidden="true">#</a> 编译动态链接库</h4><ol><li>生成静态链接库.so</li></ol><p><code>gcc -shared -o countlib.so countlib.c</code></p><ol start="2"><li>调用动态链接库</li></ol><p><code>gcc -o count2 count.c -I. -L. countlib.so</code></p><ol start="3"><li>运行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./count2
./count2: error <span class="token keyword">while</span> loading shared libraries: countlib.so: cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="将-so移动到-usr-lib或在-etc-ld-so-conf配置之后-运行" tabindex="-1"><a class="header-anchor" href="#将-so移动到-usr-lib或在-etc-ld-so-conf配置之后-运行" aria-hidden="true">#</a> 将.so移动到<code>/usr/lib</code>或在<code>/etc/ld.so.conf</code>配置之后，运行</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> countlib.so /usr/lib
./count2 <span class="token number">20</span> <span class="token number">30</span>
result is <span class="token builtin class-name">:</span> <span class="token number">600</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="警告选项" tabindex="-1"><a class="header-anchor" href="#警告选项" aria-hidden="true">#</a> 警告选项</h3><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-w</td><td>关闭所有警告</td></tr><tr><td>-Wall</td><td>发出 gcc 提供的所有有用的警告</td></tr><tr><td>-pedantic</td><td>发出 ansi c 的所有警告</td></tr></tbody></table><h3 id="优化选项" tabindex="-1"><a class="header-anchor" href="#优化选项" aria-hidden="true">#</a> 优化选项</h3><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-O[0-3]</td><td>优化等级，一般只有最终发布的时候才用</td></tr></tbody></table><ul><li>-O0: 无优化</li><li>-O1: 一些基本的优化</li><li>-O2: 更多优化，包括一些可能增加代码大小的优化</li><li>-O3: 最大程度的优化</li></ul><h2 id="编译gcc" tabindex="-1"><a class="header-anchor" href="#编译gcc" aria-hidden="true">#</a> 编译GCC</h2><h4 id="gcc-依赖几个库及关系" tabindex="-1"><a class="header-anchor" href="#gcc-依赖几个库及关系" aria-hidden="true">#</a> GCC 依赖几个库及关系</h4><h4 id="编译过程参数-1" tabindex="-1"><a class="header-anchor" href="#编译过程参数-1" aria-hidden="true">#</a> 编译过程参数</h4><table><thead><tr><th>库</th><th>作用</th><th>依赖</th></tr></thead><tbody><tr><td>m4</td><td>多处理器库</td><td></td></tr><tr><td>gmp</td><td>GNU的多精度数字运算类库</td><td>需要依赖m4</td></tr><tr><td>mpfr</td><td>多精度浮点运算的C类库</td><td>需要依赖gmp</td></tr><tr><td>mpc</td><td>是一个用于复杂的高精度数学运算C类库</td><td>依赖gmp，mpfr</td></tr><tr><td>gcc</td><td></td><td>需要依赖以上所有</td></tr></tbody></table><p>依次编译GCC依赖库，再编译GCC</p>`,60),u={href:"https://gcc.gnu.org/install/",target:"_blank",rel:"noopener noreferrer"},k=a(`<h2 id="gdb-调试" tabindex="-1"><a class="header-anchor" href="#gdb-调试" aria-hidden="true">#</a> GDB 调试</h2><ol><li>准备测试代码</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;compare x=%u y=%u result=%d\\n&quot;</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                x<span class="token operator">++</span><span class="token punctuation">;</span>
                y<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看程序" tabindex="-1"><a class="header-anchor" href="#查看程序" aria-hidden="true">#</a> 查看程序</h3><ol><li>保留调试信息编译</li></ol><p><code>gcc -g hello1.c -o hello</code></p><ol start="2"><li>GDB 查看程序</li></ol><p><code>gdb hello</code></p><h3 id="打断点" tabindex="-1"><a class="header-anchor" href="#打断点" aria-hidden="true">#</a> 打断点</h3><ul><li><code>b(break) 函数名</code></li><li><code>b(break) 行号</code></li><li><code>b(break) 文件名：行号</code></li><li><code>b(break) 行号 if 条件</code></li></ul><blockquote><p>break 可以简写为 b</p></blockquote><h3 id="查看断点" tabindex="-1"><a class="header-anchor" href="#查看断点" aria-hidden="true">#</a> 查看断点</h3><ul><li><code>i b (info break)</code></li></ul><blockquote><p><code>info break</code> 可以简写为 <code>i b</code></p></blockquote><ul><li><code>info locals</code>: 显示当前函数的本地变量。</li></ul><h3 id="删除断点" tabindex="-1"><a class="header-anchor" href="#删除断点" aria-hidden="true">#</a> 删除断点</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> i b
Num     Type           Disp Enb Address            What
<span class="token number">1</span>       breakpoint     keep y   0x0000000000000760 <span class="token keyword">in</span> compare at hello1.c:5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>d(delete)</code> 删除所有断点 <code>d(delete) [Num]</code> 删除某个断点</p><blockquote><p><code>delete</code> 可以简写为 <code>d</code></p></blockquote><h3 id="查看代码" tabindex="-1"><a class="header-anchor" href="#查看代码" aria-hidden="true">#</a> 查看代码</h3><p><code>l(list)</code> 查看代码</p><blockquote><p><code>list</code> 可以简写为 <code>l</code></p></blockquote><h3 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h3><ul><li><code>r(run)</code> 运行</li><li><code>c(continue)</code> 继续</li><li><code>q(quit)</code> 退出gdb</li><li><code>kill</code>: 终止程序的执行。</li></ul><h3 id="单步调试" tabindex="-1"><a class="header-anchor" href="#单步调试" aria-hidden="true">#</a> 单步调试</h3><ul><li><code>n(next)</code> setp over 单步调试（下一行）</li><li><code>s(setp)</code> setp info 单步进入（进入函数）</li><li><code>f(finish)</code> setp return 单步返回（跳过这个断点）</li></ul><h3 id="查看堆栈和调用链" tabindex="-1"><a class="header-anchor" href="#查看堆栈和调用链" aria-hidden="true">#</a> 查看堆栈和调用链</h3><ul><li><code>backtrace</code> (或 <code>bt</code>): 显示调用链。</li><li><code>frame</code>: 切换到指定帧。</li><li><code>info args</code>: 显示当前函数的参数。</li></ul><h3 id="内存和变量" tabindex="-1"><a class="header-anchor" href="#内存和变量" aria-hidden="true">#</a> 内存和变量</h3><ul><li><code>info variables</code>: 显示所有可见的变量。</li><li><code>x</code>: 显示内存中的内容。 <ul><li>例如：<code>x/10x 0x12345678</code> 显示地址0x12345678开始的10个16进制值。</li><li><code>x/s</code> 显示以NULL结尾的字符串。</li></ul></li></ul><h3 id="打印值" tabindex="-1"><a class="header-anchor" href="#打印值" aria-hidden="true">#</a> 打印值</h3><ul><li><code>p(print) [exp]</code> 打印变量，也可以打印函数，也可以打印表达式</li></ul><h3 id="监控变量值" tabindex="-1"><a class="header-anchor" href="#监控变量值" aria-hidden="true">#</a> 监控变量值</h3><ul><li><code>watch [var]</code> 监控变量值</li></ul><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><ul><li><code>set var_name = value</code>: 设置变量的值。</li><li><code>show var_name</code>: 显示变量的值。</li><li><code>help</code> (或 <code>h</code>): 显示帮助信息。</li></ul><h2 id="makefile" tabindex="-1"><a class="header-anchor" href="#makefile" aria-hidden="true">#</a> Makefile</h2><h3 id="makefile的编写规则" tabindex="-1"><a class="header-anchor" href="#makefile的编写规则" aria-hidden="true">#</a> makefile的编写规则</h3><ul><li>示例</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>hello<span class="token operator">:</span>main<span class="token punctuation">.</span>c func1<span class="token punctuation">.</span>c func2<span class="token punctuation">.</span>c
    gcc main<span class="token punctuation">.</span>c func1<span class="token punctuation">.</span>c func2<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>targets（目标）<span class="token operator">:</span>prerequisites（依赖）
    command（命令）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Makefile 由若干条规则构成</li></ul><p><code>rule1</code></p><p><code>rule2</code></p><p><code>rule3</code></p><h4 id="实操" tabindex="-1"><a class="header-anchor" href="#实操" aria-hidden="true">#</a> 实操</h4><ul><li>func1.c</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>func2.c</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>main.c</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
    <span class="token function">sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;func1: %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">func1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;func2: %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">func2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Makefile</li></ul><div class="language-Makefile line-numbers-mode" data-ext="Makefile"><pre class="language-Makefile"><code>hello: main.c func1.c func2.c
    gcc func1.c func2.c main.c -o hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="运行-1" tabindex="-1"><a class="header-anchor" href="#运行-1" aria-hidden="true">#</a> 运行</h4><ul><li><p><code>make</code></p></li><li><p><code>./hello 10 20</code></p></li></ul><h4 id="示例2" tabindex="-1"><a class="header-anchor" href="#示例2" aria-hidden="true">#</a> 示例2</h4><div class="language-Makefile line-numbers-mode" data-ext="Makefile"><pre class="language-Makefile"><code>hello:main.o func1.o func2.o
    gcc main.o func1.o func2.o -o hello

main.o:main.c
    gcc -c main.c
func1.o:func1.c
    gcc -c func1.c
func2.o:
    gcc -c func2.c
# 目标后面没有跟依赖的，称为伪目标
clean:
    rm func1.o func2.o main.o hello
install:
    cp hello /usr/local/hello
uninstall:
    rm /usr/local/hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="makefile-变量" tabindex="-1"><a class="header-anchor" href="#makefile-变量" aria-hidden="true">#</a> Makefile 变量</h3><h4 id="用户自定义变量" tabindex="-1"><a class="header-anchor" href="#用户自定义变量" aria-hidden="true">#</a> 用户自定义变量</h4><p>例如：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>myobj <span class="token operator">=</span> main.o func1.o func2.o
<span class="token comment">#或</span>
myobj <span class="token operator">:=</span> main.o func1.o func2.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别" aria-hidden="true">#</a> <code>=</code> 和 <code>:=</code> 的区别</h5><p>示例：</p><ul><li><code>=</code></li></ul><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>VAR1 <span class="token operator">=</span> original
VAR2 <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>VAR1<span class="token punctuation">)</span>
VAR1 <span class="token operator">=</span> updated

<span class="token target symbol">all</span><span class="token punctuation">:</span>
    <span class="token operator">@</span>echo <span class="token variable">$</span><span class="token punctuation">(</span>VAR2<span class="token punctuation">)</span>   <span class="token comment"># 输出 &quot;updated&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>:=</code></li></ul><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>VAR1 <span class="token operator">:=</span> original
VAR2 <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>VAR1<span class="token punctuation">)</span>
VAR1 <span class="token operator">:=</span> updated

<span class="token target symbol">all</span><span class="token punctuation">:</span>
    <span class="token operator">@</span>echo <span class="token variable">$</span><span class="token punctuation">(</span>VAR2<span class="token punctuation">)</span>   <span class="token comment"># 输出 &quot;original&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>区别：<code>=</code> 相当于引用类型，<code>:=</code> 相当于值类型</p><h4 id="预定义变量" tabindex="-1"><a class="header-anchor" href="#预定义变量" aria-hidden="true">#</a> 预定义变量</h4><table><thead><tr><th>变量</th><th>作用</th></tr></thead><tbody><tr><td>AR</td><td>库文件维护的名称，默认值为ar</td></tr><tr><td>AS</td><td>汇编程序的名称，默认值为as</td></tr><tr><td>CC</td><td>C编译器的名称，默认为cc</td></tr><tr><td>CXX</td><td>C++编译器的名称，默认值为g++</td></tr><tr><td>ARFLAGS</td><td>库文件维护程序选项，无默认值</td></tr><tr><td>ASFLAGS</td><td>汇编程序选项，无默认值</td></tr><tr><td>CFLAGS</td><td>C编译器选项，无默认值</td></tr><tr><td>CXXFLAGS</td><td>C++编译器选项，无默认值</td></tr><tr><td>MAKE</td><td>用于在 Makefile 中调用 make 命令。它的主要作用是避免在嵌套调用中出现问题</td></tr></tbody></table><h4 id="自动变量及环境变量" tabindex="-1"><a class="header-anchor" href="#自动变量及环境变量" aria-hidden="true">#</a> 自动变量及环境变量</h4><table><thead><tr><th>变量</th><th>作用</th></tr></thead><tbody><tr><td>$*</td><td>不包含扩展名的目标文件名称</td></tr><tr><td>$&lt;</td><td>第一个依赖文件名称</td></tr><tr><td>$?</td><td>所有时间戳比目标文件晚的依赖文件</td></tr><tr><td>$@</td><td>目标文件完整名称</td></tr><tr><td>$^</td><td>当前目标的所有不重复的依赖文件</td></tr></tbody></table><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> 示例</h4><ul><li>原 Makefile</li></ul><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">hello</span><span class="token punctuation">:</span>main.o func1.o func2.o
    gcc main.o func1.o func2.o -o hello

<span class="token target symbol">main.o</span><span class="token punctuation">:</span>main.c
    gcc -c main.c
<span class="token target symbol">func1.o</span><span class="token punctuation">:</span>func1.c
    gcc -c func1.c
<span class="token target symbol">func2.o</span><span class="token punctuation">:</span>
    gcc -c func2.c
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm func1.o func2.o main.o hello
<span class="token target symbol">install</span><span class="token punctuation">:</span>
    cp hello /usr/local/hello
<span class="token target symbol">uninstall</span><span class="token punctuation">:</span>
    rm /usr/local/hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用变量</li></ul><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>myobj <span class="token operator">=</span> main.o func1.o func2.o
CFLAGS <span class="token operator">=</span> -g -c
CC <span class="token operator">=</span> gcc
PREFIX <span class="token operator">=</span> /usr/local/
<span class="token target symbol">hello</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>myobj<span class="token punctuation">)</span>
    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span>

<span class="token target symbol">main.o</span><span class="token punctuation">:</span>main.c
    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span>
<span class="token target symbol">func1.o</span><span class="token punctuation">:</span>func1.c
    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span>
<span class="token target symbol">func2.o</span><span class="token punctuation">:</span>func2.c
    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> func2.c
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm <span class="token variable">$</span><span class="token punctuation">(</span>myobj<span class="token punctuation">)</span> hello
<span class="token target symbol">install</span><span class="token punctuation">:</span>
    cp hello <span class="token variable">$</span><span class="token punctuation">(</span>PREFIX<span class="token punctuation">)</span>hello
<span class="token target symbol">uninstall</span><span class="token punctuation">:</span>
    rm <span class="token variable">$</span><span class="token punctuation">(</span>PREFIX<span class="token punctuation">)</span>hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="make-工作流程" tabindex="-1"><a class="header-anchor" href="#make-工作流程" aria-hidden="true">#</a> make 工作流程</h3><ol><li>make会在当前目录下找名字叫 “Makefile” 或 “makefile” 的文件。</li><li>如果找到，它会找文件中的第一个目标文件（target）并把这个文件作为最终的目标文件。</li><li>根据时间戳生成目标文件</li><li>递归去寻找目标文件依赖文件，并且递归生成（同样有时间戳问题）</li></ol><h3 id="makefile-规则" tabindex="-1"><a class="header-anchor" href="#makefile-规则" aria-hidden="true">#</a> makefile 规则</h3><h4 id="显式规则" tabindex="-1"><a class="header-anchor" href="#显式规则" aria-hidden="true">#</a> 显式规则</h4><blockquote><p>上面的示例就是显式规则</p></blockquote><h4 id="隐式规则" tabindex="-1"><a class="header-anchor" href="#隐式规则" aria-hidden="true">#</a> 隐式规则</h4><p>例如：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">hello2</span><span class="token punctuation">:</span>main.o func1.o func2.o
    gcc <span class="token variable">$^</span> -o <span class="token variable">$@</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果当前目录下存在同名的 <code>main.c func1.c func2.c</code>，它会自动的生成 <code>main.o func1.o func2.o</code></p><p>而不需要：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">hello2</span><span class="token punctuation">:</span>main.o func1.o func2.o
    gcc <span class="token variable">$^</span> -o <span class="token variable">$@</span>
<span class="token target symbol">func1.o</span><span class="token punctuation">:</span>func1.c
    gcc -c func1.c -o func1.o
<span class="token target symbol">func2.o</span><span class="token punctuation">:</span>func2.c
    gcc -c func2.c -o func2.o
<span class="token target symbol">main.o</span><span class="token punctuation">:</span>main.c
    gcc -c main.c -o main.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="makefile-伪目标" tabindex="-1"><a class="header-anchor" href="#makefile-伪目标" aria-hidden="true">#</a> Makefile 伪目标</h3><h4 id="phony" tabindex="-1"><a class="header-anchor" href="#phony" aria-hidden="true">#</a> <code>.PHONY</code></h4><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span>clean
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm <span class="token variable">$</span><span class="token punctuation">(</span>myobj<span class="token punctuation">)</span> hello
<span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span>install
<span class="token target symbol">install</span><span class="token punctuation">:</span>
    cp hello <span class="token variable">$</span><span class="token punctuation">(</span>PREFIX<span class="token punctuation">)</span>hello
<span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span>uninstall
<span class="token target symbol">uninstall</span><span class="token punctuation">:</span>
    rm <span class="token variable">$</span><span class="token punctuation">(</span>PREFIX<span class="token punctuation">)</span>hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.PHONY</code> 是为了区分目标和伪目标，以防目录下有同明文件例如<code>clean</code>，加上<code>.PHONY</code>就没关系了</p><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> <code>@</code></h4><p>如果不希望某一行命令输出日志，只需要在命令前面加上 <code>@</code></p><p>例如：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>myobj <span class="token operator">=</span> main.o func1.o func2.o
<span class="token target symbol">hello</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>myobj<span class="token punctuation">)</span>
    <span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="makefile-引用和嵌套" tabindex="-1"><a class="header-anchor" href="#makefile-引用和嵌套" aria-hidden="true">#</a> Makefile 引用和嵌套</h3><p>包含：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token keyword">include</span> path/submakefile.mk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>嵌套：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">subsystem</span><span class="token punctuation">:</span>
    cd subdir &amp;&amp; gcc hello.c -o hello

<span class="token comment"># 等价于：</span>

<span class="token target symbol">subsystem</span><span class="token punctuation">:</span>
    <span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C subdir

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其中 <code>$(MAKE)</code> 用于在 <code>Makefile</code> 中调用 <code>make</code> 命令。它的主要作用是避免在嵌套调用中出现问题</li><li>其中 <code>-C</code> 是makefile的管理命令，用于指定进入某个文件夹</li><li>其中 <code>subdir</code> 文件夹中，需要有一个<code>Makefile</code>文件，或通过 <code>-f</code> 指定文件名</li></ul><h3 id="makefile-条件判断" tabindex="-1"><a class="header-anchor" href="#makefile-条件判断" aria-hidden="true">#</a> Makefile 条件判断</h3><p>示例：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">hello</span><span class="token punctuation">:</span>main.o
<span class="token keyword">ifeq</span> <span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span>,gcc<span class="token punctuation">)</span>   <span class="token comment"># 判断 $(CC)变量 是否等于 gcc</span>
    <span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -o hello1
<span class="token keyword">else</span>
    <span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -o hello2
<span class="token keyword">endif</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ifeq</code> 判断是否相等</li></ul><h3 id="makefile-函数" tabindex="-1"><a class="header-anchor" href="#makefile-函数" aria-hidden="true">#</a> Makefile 函数</h3><p>以下是一些常见的 Makefile 函数：</p><h4 id="字符串函数" tabindex="-1"><a class="header-anchor" href="#字符串函数" aria-hidden="true">#</a> 字符串函数：</h4><p><code>$(subst from,to,text)</code>: 将文本中的 from 替换为 to。 <code>$(patsubst pattern,replacement,text)</code>: 将文本中与模式匹配的部分替换为指定的替换文本。 <code>$(strip string)</code>: 去掉字符串开头和结尾的空格。 <code>$(wildcard pattern)</code>: 返回匹配指定模式的文件列表。</p><h4 id="文件名函数" tabindex="-1"><a class="header-anchor" href="#文件名函数" aria-hidden="true">#</a> 文件名函数：</h4><p><code>$(dir names...)</code>: 从文件名中提取目录部分。 <code>$(notdir names...)</code>: 从文件名中去掉目录部分。 <code>$(suffix names...)</code>: 提取文件名的后缀。 <code>$(basename names...)</code>: 去掉文件名的后缀。 <code>$(addsuffix suffix,names...)</code>: 向文件名添加后缀。 <code>$(addprefix prefix,names...)</code>: 向文件名添加前缀。</p><h4 id="条件函数" tabindex="-1"><a class="header-anchor" href="#条件函数" aria-hidden="true">#</a> 条件函数：</h4><p><code>$(if condition,then-part[,else-part])</code>: 如果条件成立，则返回 then-part；否则返回 else-part。 <code>$(foreach var, list, text)</code>: 对列表中的每个元素执行指定的操作。 <code>$(shell command)</code>: 执行 shell 命令并返回结果。</p><h4 id="其他函数" tabindex="-1"><a class="header-anchor" href="#其他函数" aria-hidden="true">#</a> 其他函数：</h4><p><code>$(eval text)</code>: 对 text 中的内容进行实时求值。 <code>$(error text)</code>: 输出错误信息并停止 make 的执行。 <code>$(warning text)</code>: 输出警告信息。 这只是 Makefile 函数的一小部分，实际上还有更多函数可用。你可以在 GNU Make 官方文档中找到完整的函数列表和详细说明：GNU Make Manual - Functions。</p><h4 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2" aria-hidden="true">#</a> 示例：</h4><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">subsystem</span><span class="token punctuation">:</span>
    <span class="token operator">@</span>echo <span class="token string">&quot;Computing program...&quot;</span>
    <span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C subdir -f Makefile
    <span class="token operator">@</span>echo <span class="token string">&quot;Program completed.&quot;</span>
    <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">warning</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="makefile-管理命令" tabindex="-1"><a class="header-anchor" href="#makefile-管理命令" aria-hidden="true">#</a> Makefile 管理命令</h3><table><thead><tr><th>变量</th><th>作用</th></tr></thead><tbody><tr><td>-C [dir]</td><td>读入指定目录下面的makefile</td></tr><tr><td>-f [file]</td><td>读入当前目录下指定文件名的makefile</td></tr><tr><td>-I [dir]</td><td>指定被包含的makefile所在目录</td></tr><tr><td>-i</td><td>忽略所有命令执行错误</td></tr></tbody></table><h2 id="autotools" tabindex="-1"><a class="header-anchor" href="#autotools" aria-hidden="true">#</a> Autotools</h2><h3 id="_1-configure基础" tabindex="-1"><a class="header-anchor" href="#_1-configure基础" aria-hidden="true">#</a> 1. configure基础</h3><p>一般而言，configure主要检查当前目标平台的程序，库，头文件，函数等的兼容性。这些结果将作用于config.h和Makefile文件的生成，从而影响最终的编译。 用户可以通过configure配置参数，来定制需要包含或者不需要包含的组件，安装路径等。大概可以分为五组：</p><ul><li>安装路径相关</li><li>程序名配置</li><li>跨平台编译</li><li>动静态库选项</li><li>程序组件</li></ul><p>configure在执行过程中，除了生成Makefile外，还会生成，但是不限于以下文件：</p><ul><li>config.log日志文件</li><li>config.cache缓存文件。提高下一次configure的速度，-C指定</li><li>config.status实际调用编译工具构建软件的shell脚本</li></ul><blockquote><p>在linux上编译一个工程需要先调用./configure,大部分linux开源项目都使用autotools编译架构来生成configure这个脚本。通过在执行./configure，产生Makefile,src/Makefile,config.h，为下一步编译做准备。随后调用make进行编译。一般步骤如下：</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./configure
<span class="token function">make</span>
<span class="token function">make</span> check
<span class="token function">make</span> <span class="token function">install</span>
<span class="token function">make</span> installcheck
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-configure变量列表" tabindex="-1"><a class="header-anchor" href="#_2-configure变量列表" aria-hidden="true">#</a> 2. configure变量列表</h3><blockquote><p>make install将编译的程序，库或者头文件安装到系统中。 安装的路径由prefix决定，默认prefix=/usr/local。比如你可以这样改变prefix值：</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr 
<span class="token function">make</span> 
<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>路径变量</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>prefix</td><td>/usr/local</td><td>prefix 是安装的根目录，通常默认为 /usr/local</td></tr><tr><td>exec-prefix</td><td>\${prefix}</td><td>exec-prefix 是用于存放执行文件的目录，通常默认与 prefix 相同。</td></tr><tr><td>bindir</td><td>\${exec-prefix}/bin</td><td>bindir 存放二进制可执行文件的目录，例如命令行工具。</td></tr><tr><td>libdir</td><td>\${exec-prefix}/lib</td><td>libdir 存放库文件的目录。</td></tr><tr><td>includedir</td><td>\${exec-prefix}/include</td><td>includedir 存放头文件的目录。</td></tr><tr><td>datarootdir</td><td>\${exec-prefix}/share</td><td>datarootdir 是存放不会在运行时修改的数据文件的根目录。</td></tr><tr><td>datadir</td><td>\${datarootdir}</td><td>datadir 存放数据文件的目录，例如程序运行时可能修改的数据。</td></tr><tr><td>mandir</td><td>\${datarootdir}/man</td><td>mandir 存放手册页面的目录。</td></tr><tr><td>infodir</td><td>\${datarootdir}/info</td><td>infodir 存放 info 页面的目录。</td></tr></tbody></table><table><thead><tr><th>标准配置变量</th><th>说明</th></tr></thead><tbody><tr><td>CC</td><td>C编译命令</td></tr><tr><td>CFLAGS</td><td>C编译器参数</td></tr><tr><td>CXX</td><td>C++编译命令</td></tr><tr><td>CXXFLAGS</td><td>C++编译器参数</td></tr><tr><td>LDFLAGS</td><td>链接器参数</td></tr><tr><td>CPPFLAGS</td><td>C/C++预处理器参数</td></tr></tbody></table><h3 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr <span class="token assign-left variable">CC</span><span class="token operator">=</span>gcc-3 <span class="token assign-left variable">CPPFLAGS</span><span class="token operator">=</span>-I<span class="token environment constant">$HOME</span>/usr/include <span class="token assign-left variable">LDFLAGS</span><span class="token operator">=</span>-L<span class="token environment constant">$HOME</span>/usr/lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-make的一些常用参数" tabindex="-1"><a class="header-anchor" href="#_4-make的一些常用参数" aria-hidden="true">#</a> 4. make的一些常用参数</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>make</td><td>根据Makefile编译源代码，连接，生成目标文件，可执行文件。</td></tr><tr><td>make all</td><td>等价于make，编译程序，库，文档等。</td></tr><tr><td>make install</td><td>安装编译好的程序和库，头文件到系统中,一般为/usr/local/bin目录。</td></tr><tr><td>make install-strip</td><td>和make install相同，但是剥离掉调试符号信息。</td></tr><tr><td>make uninstall</td><td>make install的反向操作，将编译成功的可执行文件从系统目录中卸载</td></tr><tr><td>make clean</td><td>清除上次的make命令所产生的object文件（后缀为“.o”的文件）及可执行文件。（make all的反向操作）</td></tr><tr><td>make distclean</td><td>类似make clean，但同时也将./configure生成的文件全部删除掉，包括Makefile</td></tr><tr><td>make check</td><td>运行测试项</td></tr><tr><td>make installcheck</td><td>检查安装程序或库，如果支持的话。</td></tr><tr><td>make dist</td><td>创建一个压缩包文件 PACKAGE-VERSION.tar.gz.</td></tr><tr><td>make distcheck</td><td>生成发布软件包并对其进行测试检查，以确定发布包的正确性。这个操作将自动把压缩包文件解开，然后执行configure命令，并且执行make，来确认编译不出现错误，最后提示你软件包已经准备好，可以发布了。</td></tr></tbody></table><h3 id="autotools的介绍" tabindex="-1"><a class="header-anchor" href="#autotools的介绍" aria-hidden="true">#</a> Autotools的介绍</h3><p>Autotools 是一组用于自动化软件构建、配置和安装的工具，包括 Autoscan、Autoconf、Automake 和 Libtool。这套工具链旨在帮助开发者在不同的操作系统和环境中构建和分发软件包，以确保软件在各种系统上能够正确地配置、编译和运行。</p><blockquote><p>Files used in preparing a software package for distribution, when using just Autoconf:</p></blockquote><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>your source files --&gt; [autoscan*] --&gt; [configure.scan] --&gt; configure.ac

configure.ac --.
               |   .------&gt; autoconf* -----&gt; configure
[aclocal.m4] --+---+
               |   \`-----&gt; [autoheader*] --&gt; [config.h.in]
[acsite.m4] ---&#39;

Makefile.in
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Additionally, if you use Automake, the following additional productions come into play:</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>acinclude.m4<span class="token punctuation">]</span> --.
                 <span class="token operator">|</span>
<span class="token punctuation">[</span>local macros<span class="token punctuation">]</span> --+--<span class="token operator">&gt;</span> aclocal* --<span class="token operator">&gt;</span> aclocal.m4
                 <span class="token operator">|</span>
configure.ac ----<span class="token string">&#39;

configure.ac --.
               +--&gt; automake* --&gt; Makefile.in
Makefile.am ---&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Files used in configuring a software package:</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>                       .-------------<span class="token operator">&gt;</span> <span class="token punctuation">[</span>config.cache<span class="token punctuation">]</span>
configure* ------------+-------------<span class="token operator">&gt;</span> config.log
                       <span class="token operator">|</span>
<span class="token punctuation">[</span>config.h.in<span class="token punctuation">]</span> -.       <span class="token function">v</span>            .-<span class="token operator">&gt;</span> <span class="token punctuation">[</span>config.h<span class="token punctuation">]</span> -.
               +--<span class="token operator">&gt;</span> config.status* -+               +--<span class="token operator">&gt;</span> make*
Makefile.in ---<span class="token string">&#39;                    \`-&gt; Makefile ---&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>autoscan</td><td>用于扫描项目的源代码，自动生成一个初步的 configure.scan 文件。这个文件包含了一些可能需要用于配置项目的 Autoconf 宏。</td><td>configure.scan包含了系统配置的基本选项模版，里面都是一些宏定义。我们需要改成aclocal所需格式configure.ac</td></tr><tr><td>aclocal</td><td>aclocal 是一个 perl 脚本程序，是 Autoconf 的一部分，根据configure.ac文件的内容，构建 aclocal.m4 文件。aclocal的定义是：aclocal - create aclocal.m4 by scanning aconfigure.ac</td><td>aclocal 会查找项目中的 configure.ac 文件，提取其中用到的宏，并生成 aclocal.m4 文件。这个文件是 Autoconf 使用的宏定义集合。</td></tr><tr><td>autoconf</td><td>将 configure.ac 和 aclocal.m4 文件转化为 configure 脚本。</td><td>configure.ac 和 aclocal.m4 文件的内容是一些宏，这些宏经过autoconf 处理后会变成检查系统的特性、环境变量、软件必须的参数的shell脚本。</td></tr><tr><td>autoheader</td><td>autoheader 用于生成 config.h.in 文件，这是由 Autoconf 使用的头文件模板。</td><td>config.h.in 包含了 Autoconf 根据系统和编译器的不同生成的宏定义，可以在生成最终的 config.h 文件时填充。</td></tr><tr><td>automake</td><td>automake 是用于生成 Makefile.in 文件的工具，这些文件随后由 configure 脚本用于生成最终的 Makefile。</td><td>automake 通过读取 Makefile.am 文件来生成 Makefile.in 文件，而 Makefile.am 包含了项目的构建规则。</td></tr></tbody></table><p><strong>configure.ac</strong> configure.ac用于生成configure脚本，autoconf工具用来完成这一步。</p><p>例如下列的例子</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>AC_PREREQ
AC_PREREQ<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.63</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
AC_INIT<span class="token punctuation">(</span><span class="token punctuation">[</span>hello<span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span>liuyupei@foxmail.com<span class="token punctuation">]</span><span class="token punctuation">)</span> 
AC_CONFIG_SRCDIR<span class="token punctuation">(</span><span class="token punctuation">[</span>src/main.c<span class="token punctuation">]</span><span class="token punctuation">)</span> 
AC_CONFIG_HEADERS<span class="token punctuation">(</span><span class="token punctuation">[</span>src/config.h<span class="token punctuation">]</span><span class="token punctuation">)</span> 
AM_INIT_AUTOMAKE<span class="token punctuation">(</span><span class="token punctuation">[</span>foreign<span class="token punctuation">]</span><span class="token punctuation">)</span> 
 <span class="token comment"># Checks for programs. </span>
AC_PROG_CC 
AC_PROG_LIBTOOL 
 <span class="token comment"># Checks for libraries.</span>
<span class="token comment"># Checks for header files. </span>
 <span class="token comment"># Checks for typedefs, structures, and compiler characteristics. </span>
 <span class="token comment"># Checks for library functions.  </span>
AC_CONFIG_FILES<span class="token punctuation">(</span><span class="token punctuation">[</span>Makefile 
          src/Makefile 
          src/a/Makefile 
           src/b/Makefile<span class="token punctuation">]</span><span class="token punctuation">)</span> 
AC_OUTPUT 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中以AC_开头的类似函数调用一样的代码，实际上时被称为“宏”的调用。 这里的宏，与C语言中的宏概念类似，会被替换展开。 configure.ac文件的一般布局是：</p><ul><li>AC_INIT</li><li>测试程序</li><li>测试函数库</li><li>测试头文件</li><li>测试类型定义</li><li>测试结构</li><li>测试编译器特性</li><li>测试库函数</li><li>测试系统调用</li><li>AC_OUTPUT</li></ul><p><strong>configure.ac标签说明</strong></p><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>AC_PREREQ</td><td>声明autoconf要求的版本号</td></tr><tr><td>AC_INIT</td><td>定义软件名称，版本号，联系方式</td></tr><tr><td>AC_CONFIG_SCRDIR</td><td>该宏用来侦测所指定的源码文件是否存在，来确定源码有效性。</td></tr><tr><td>AC_CONFIG_HEADER</td><td>该宏用来生成config.h文件，以便autoheader命令使用</td></tr><tr><td>AM_INIT_AUTOMAKE</td><td>你可以通过 AM_INIT_AUTOMAKE 的可选参数设置一些选项，例如启用 -Wall 选项以显示更多的警告信息：AM_INIT_AUTOMAKE([-Wall])</td></tr><tr><td>AC_PROG_CC</td><td>指定编译器，默认GCC</td></tr><tr><td>AC_CONFIG_FILE</td><td>生成相应的Makefile文件，不同目录下通过空格分隔</td></tr><tr><td>AC_OUTPUT</td><td>用来设定configure所要产生的文件，如果是makefile，config会把它检查出来的结果带入makefile.in文件，产生合适的makefile</td></tr></tbody></table><p>m4是一个经典的宏工具。autoconf正是构建在m4之上，可以理解为autoconf预先定义了大量的，用户检查系统可移植性的宏，这些宏在展开就是大量的shell脚本。</p><p>所以编写configure.ac就需要对这些宏掌握熟练，并且合理调用。</p><p><strong>autoscan和configure.scan</strong></p><p>可以通过调用autoscan命令，得到一个初始化的configure.scan文件。然后重命名为configure.ac后，在此基础上编辑configure.ac。 autoscan会扫描源码，并生成一些通用的宏调用，输入的声明，以及输出的声明。尽管autoscan十分方便，但是没人能够在构建之前，就把源码完全写好。 因此,autoscan通常用于初始化configure.ac，即生成configure.ac的雏形文件configure.scan</p><p><strong>autoheader和configure.h</strong></p><p>autoheader命令扫描configure.ac文件，并确定如何生成config.h.in。每当configure.ac变化时，都可以通过执行autoheader更新config.h.in。 在configure.ac通过AC_CONFIG_HEADERS([config.h])告诉autoheader应当生成config.h.in的路径 config.h包含了大量的宏定义，其中包括软件包的名字等信息，程序可以直接使用这些宏。更重要的是，程序可以根据其中的对目标平台的可移植相关的宏，通过条件编译，动态的调整编译行为。</p><p><strong>automake和Makefil.am</strong></p><p>手工编写Makefile是一件相当繁琐的事情，并且随着项目的复杂程序变大，编写难度越来越大。automake工具应运而生。 可以编辑Makefile.am文件，并依靠automake来生成Makefile.in</p><p><strong>aclocal</strong></p><p>configure.ac实际是依靠宏展开来得到configure。因此，能否成功生成，取决于宏定义是否能够找到。 autoconf会从自身安装路径下寻找事先定义好的宏。然而对于像automake，libtool，gettex等第三方扩展宏，autoconf便无从知晓。 因此，aclocal将在configure.ac同一个目录下生成aclocal.m4，在扫描configure.ac过程中，将第三方扩展和开发者自己编写的宏定义复制进去。 如此一来，autoconf遇到不认识的宏时，就会从aclocal.m4中查找 <img src="`+d+`" alt="Alt text"></p><p><strong>辅助文件</strong></p><p><code>clocal.m4</code> 该宏定义文件包含了第三方宏定义，用于<code>autoconf</code>展开<code>configure.ac</code><code>NEWS</code>，<code>README</code>，<code>AUTHORS</code>，<code>ChangeLog</code> GNU软件标配 <code>config.guess</code>，<code>config.sub</code> 由<code>automake</code>产生，两个用于目标平台检查的脚本 <code>depcomp</code> <code>install-sh</code> 由automake产生，用于完成编译和安装的脚本 <code>missing</code> 由<code>automake</code>产生 <code>ltmain.sh</code> 由<code>libtoolize</code>产生，用于在<code>configure</code>阶段，配置生成可运行于目标平台的libtool脚本 <code>ylwrap</code> 由<code>automake</code>产生 <code>autogen.sh</code> 早期<code>autoreconf</code>并不存在，软件开发者就自己编写脚本，按照顺序调用<code>autoconf</code>，<code>autoheader</code>，<code>automake</code>等工具。这个文件就是这样的脚本。</p><h3 id="文件生成" tabindex="-1"><a class="header-anchor" href="#文件生成" aria-hidden="true">#</a> 文件生成</h3><p>我们需要的文件有configure.ac ，Makefile.am ，aclocal.m4 而作为用户，我们需要的文件是 makefile.in config.h.in 文件</p><p>因此这里我们看看每个文件是如何生成的</p><ul><li>configure.ac</li><li>Makefile.am</li><li>aclocal.m4</li><li>makefile.in</li><li>config.h.in</li></ul><h3 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>makdir src
<span class="token builtin class-name">cd</span> src
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>printc.h</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">printc_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">printc_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">printFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>printc.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;printc.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">printFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World !!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;printc.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello in main.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回上一层目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>configure.ac</strong></p><p>该文件生成是通过 autoscan 命令生成的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ls</span> src
main.c  main.o  printc.c  printc.h  printc.o
$ <span class="token function">ls</span>
src

<span class="token comment"># 生成 configure.scan</span>
$ autoscan
$ <span class="token function">ls</span>
autoscan.log  configure.scan  src

<span class="token comment"># 重命名为configure.ac</span>
$ <span class="token function">mv</span> configure.scan configure.ac
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 configure.ac 文件</p><p>原：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#                                               -*- Autoconf -*-</span>
<span class="token comment"># Process this file with autoconf to produce a configure script.</span>

AC_PREREQ<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.71</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
AC_INIT<span class="token punctuation">(</span><span class="token punctuation">[</span>FULL-PACKAGE-NAME<span class="token punctuation">]</span>, <span class="token punctuation">[</span>VERSION<span class="token punctuation">]</span>, <span class="token punctuation">[</span>BUG-REPORT-ADDRESS<span class="token punctuation">]</span><span class="token punctuation">)</span>
AC_CONFIG_SRCDIR<span class="token punctuation">(</span><span class="token punctuation">[</span>src/printc.h<span class="token punctuation">]</span><span class="token punctuation">)</span>
AC_CONFIG_HEADERS<span class="token punctuation">(</span><span class="token punctuation">[</span>config.h<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># Checks for programs.</span>
AC_PROG_CC

<span class="token comment"># Checks for libraries.</span>

<span class="token comment"># Checks for header files.</span>

<span class="token comment"># Checks for typedefs, structures, and compiler characteristics.</span>

<span class="token comment"># Checks for library functions.</span>

AC_OUTPUT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#                                               -*- Autoconf -*-</span>
<span class="token comment"># Process this file with autoconf to produce a configure script.</span>

AC_PREREQ<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.71</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
AC_INIT<span class="token punctuation">(</span><span class="token punctuation">[</span>hello<span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span>liu_yupei@foxmail.com<span class="token punctuation">]</span><span class="token punctuation">)</span>
AC_CONFIG_SRCDIR<span class="token punctuation">(</span><span class="token punctuation">[</span>src/printc.h<span class="token punctuation">]</span><span class="token punctuation">)</span>
AC_CONFIG_HEADERS<span class="token punctuation">(</span><span class="token punctuation">[</span>config.h<span class="token punctuation">]</span><span class="token punctuation">)</span>
AC_CONFIG_FILES<span class="token punctuation">(</span><span class="token punctuation">[</span>Makefile<span class="token punctuation">]</span><span class="token punctuation">)</span>
AM_INIT_AUTOMAKE<span class="token punctuation">(</span><span class="token punctuation">[</span>-Wall<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># Checks for programs.</span>
AC_PROG_CC

<span class="token comment"># Checks for libraries.</span>

<span class="token comment"># Checks for header files.</span>

<span class="token comment"># Checks for typedefs, structures, and compiler characteristics.</span>

<span class="token comment"># Checks for library functions.</span>

AC_OUTPUT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>AM_INIT_AUTOMAKE</code> 用于初始化 Automake 工具，从 AC_INIT 中获取项目的基本信息，如项目名称和版本号。通常放在 configure.ac 的开头。</li><li><code>AC_CONFIG_FILES</code> 用于配置要由 configure 脚本生成的文件。通常，其中包括 Makefile 和其他文件。每个文件都对应一个模板文件，模板文件中的 @VARIABLE@ 形式的变量将由 configure 根据用户的配置替换为实际的值。 示例：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>AC_CONFIG_FILES<span class="token punctuation">(</span><span class="token punctuation">[</span>Makefile src/Makefile<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Makefile.am 该文件是我们手动需要创建的文件</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>AUTOMAKE_OPTIONS <span class="token operator">=</span> foreign
bin_PROGRAMS <span class="token operator">=</span> hello
hello_SOURCES <span class="token operator">=</span> src/main.c  src/printc.h src/printc.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>hello 就是未来生成的程序名称<br>hello_SOURCES 是该名称所使用的源文件</p></blockquote><blockquote><p>在 Makefile.am 文件中使用 AUTOMAKE_OPTIONS 设置选项时，确保 AUTOMAKE_OPTIONS 被正确设置为 subdir-objects。这个选项告诉 Automake 考虑源文件的目录结构，特别是当源文件位于子目录时。</p></blockquote><p><strong>aclocal.m4</strong></p><p>根据configure.ac文件的内容，构建 aclocal.m4 文件,aclocal 会查找项目中的 configure.ac 文件，提取其中用到的宏，并生成 aclocal.m4 文件。这个文件是 Autoconf 使用的宏定义集合。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ aclocal
$ <span class="token function">ls</span>
aclocal.m4  autom4te.cache  autoscan.log  configure.ac  Makefile.am  src
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，我们开发者需要的文件都已经生成。我们可以通过命令生成 configure ,config.h.in Makefile.in 文件了,这些文件是用户需要的文件。生成过程如下</p><p><strong>config.h.in</strong></p><p>config.h.in 文件是通过autoheader 命令生成的，config.h.in 包含了 Autoconf 根据系统和编译器的不同生成的宏定义，可以在生成最终的 config.h 文件时填充。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ autoheader
$ <span class="token function">ls</span>
aclocal.m4  autom4te.cache  autoscan.log  config.h.in  configure.ac  Makefile.am  src
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>makefile.in</strong></p><p>makefile.in 文件是通过automake命令生成的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ automake

configure.ac:11: error: required <span class="token function">file</span> <span class="token string">&#39;./compile&#39;</span> not found
configure.ac:11:   <span class="token string">&#39;automake --add-missing&#39;</span> can <span class="token function">install</span> <span class="token string">&#39;compile&#39;</span>
configure.ac:9: error: required <span class="token function">file</span> <span class="token string">&#39;./install-sh&#39;</span> not found
configure.ac:9:   <span class="token string">&#39;automake --add-missing&#39;</span> can <span class="token function">install</span> <span class="token string">&#39;install-sh&#39;</span>
configure.ac:9: error: required <span class="token function">file</span> <span class="token string">&#39;./missing&#39;</span> not found
configure.ac:9:   <span class="token string">&#39;automake --add-missing&#39;</span> can <span class="token function">install</span> <span class="token string">&#39;missing&#39;</span>
Makefile.am: error: required <span class="token function">file</span> <span class="token string">&#39;./AUTHORS&#39;</span> not found
Makefile.am: error: required <span class="token function">file</span> <span class="token string">&#39;./ChangeLog&#39;</span> not found
Makefile.am: error: required <span class="token function">file</span> <span class="token string">&#39;./INSTALL&#39;</span> not found
Makefile.am:   <span class="token string">&#39;automake --add-missing&#39;</span> can <span class="token function">install</span> <span class="token string">&#39;INSTALL&#39;</span>
Makefile.am: error: required <span class="token function">file</span> <span class="token string">&#39;./NEWS&#39;</span> not found
Makefile.am: error: required <span class="token function">file</span> <span class="token string">&#39;./README&#39;</span> not found
Makefile.am: error: required <span class="token function">file</span> <span class="token string">&#39;./COPYING&#39;</span> not found
Makefile.am:   <span class="token string">&#39;automake --add-missing&#39;</span> can <span class="token function">install</span> <span class="token string">&#39;COPYING&#39;</span>
Makefile.am: error: required <span class="token function">file</span> <span class="token string">&#39;./depcomp&#39;</span> not found
Makefile.am:   <span class="token string">&#39;automake --add-missing&#39;</span> can <span class="token function">install</span> <span class="token string">&#39;depcomp&#39;</span>
root@Ubuntu-arm64:~/study/autotools<span class="token comment"># </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示需要使用 <code>automake --add-missing</code> 来生成一些必要文件，上面有解释这些必要文件的作用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ automake 

Makefile.am: error: required <span class="token function">file</span> <span class="token string">&#39;./AUTHORS&#39;</span> not found
Makefile.am: error: required <span class="token function">file</span> <span class="token string">&#39;./ChangeLog&#39;</span> not found
Makefile.am: error: required <span class="token function">file</span> <span class="token string">&#39;./NEWS&#39;</span> not found
Makefile.am: error: required <span class="token function">file</span> <span class="token string">&#39;./README&#39;</span> not found
root@Ubuntu-arm64:~/study/autotools<span class="token comment"># </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示缺少一些说明文档，只需要手动创建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> AUTHORS ChangeLog NEWS README
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ automake
$ <span class="token function">ls</span>

aclocal.m4      autoscan.log  config.h.in   depcomp     Makefile.am  NEWS
AUTHORS         ChangeLog     configure.ac  INSTALL     Makefile.in  README
autom4te.cache  compile       COPYING       install-sh  missing      src
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们发现生成了makefile.in 文件了</p><p><strong>configure</strong></p><p>这里我们通过autoconf 命令生成 configure文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ autoconf
$ <span class="token function">ls</span>

aclocal.m4      autoscan.log  config.h.in   COPYING  install-sh   missing  src
AUTHORS         ChangeLog     configure     depcomp  Makefile.am  NEWS
autom4te.cache  compile       configure.ac  INSTALL  Makefile.in  README
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Makefile</strong></p><p>Makefile 文件是通过 configure 来生成的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./configure 
$ <span class="token function">ls</span>
aclocal.m4      ChangeLog    config.log     COPYING     Makefile     NEWS
AUTHORS         compile      config.status  depcomp     Makefile.am  README
autom4te.cache  config.h     configure      INSTALL     Makefile.in  src
autoscan.log    config.h.in  configure.ac   install-sh  missing      stamp-h1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>make</strong></p><p>使用make 命令生成最终的包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">make</span>
<span class="token function">make</span>  all-am
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Entering directory <span class="token string">&#39;/root/study/autotools&#39;</span>
gcc  <span class="token parameter variable">-g</span> <span class="token parameter variable">-O2</span>   <span class="token parameter variable">-o</span> hello src/main.o src/printc.o  
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Leaving directory <span class="token string">&#39;/root/study/autotools&#39;</span>

$ <span class="token function">ls</span>
aclocal.m4      ChangeLog    config.log     COPYING  install-sh   missing  stamp-h1
AUTHORS         compile      config.status  depcomp  Makefile     NEWS
autom4te.cache  config.h     configure      hello    Makefile.am  README
autoscan.log    config.h.in  configure.ac   INSTALL  Makefile.in  src
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>运行 hello</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> ./hello 
Hello <span class="token keyword">in</span> main.
Hello World <span class="token operator">!</span><span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件依赖和命令之间的依赖关系" tabindex="-1"><a class="header-anchor" href="#文件依赖和命令之间的依赖关系" aria-hidden="true">#</a> 文件依赖和命令之间的依赖关系</h3><p>完全没有依赖的文件是</p><blockquote><p>Makefile.am 该文件是自己手动生成的<br>configure.ac 该文件是通过autoscan 命令生成</p></blockquote><p>aclocal 命令依赖文件</p><blockquote><p>configure.ac 通过该命令和依赖文件我们可以生成aclocal.m4 文件。该文件是autoconf autoheader 和automake命令依赖文件，因此，执行上述三个命令前要执行aclocal文件生成aclocal.m4 文件</p></blockquote><p>autoconf命令依赖文件</p><blockquote><p>configure.ac<br>aclocal.m4<br>有两个文件我们执行autoconf 命令，生成configure文件</p></blockquote><p>autoheader 命令依赖文件</p><blockquote><p>configure.ac<br>aclocal.m4<br>这两个文件通过autoheader 命令生成config.h.in 文件</p></blockquote><p>automake 命令依赖文件</p><blockquote><p>Makefile.am<br>通过该命令我们能生成 Makefile.in文件</p></blockquote><p>./configure 脚本依赖文件</p><blockquote><p>Makefile.in<br>config.h.in<br>通过该命令我们就能生产所需要的Makefile文件了</p></blockquote><p>make 命令依赖文件</p><blockquote><p>makefile文件<br>通过 make命名使用makefile文件，生成最终的可执行文件</p></blockquote><p>automake支持三种文件夹层次：flat、shallow和deep。</p><ul><li><p>flat(平)，指的是全部文件都位于同一个文件夹中 就是全部源文件、头文件以及其它库文件都位于当前文件夹中，且没有子文件夹。上述实例就是这样的</p></li><li><p>shallow(浅)，指的是基本的源码都储存在顶层文件夹，其它各个部分则储存在子文件夹中 就是主要源文件在当前文件夹中，而其他一些实现各部分功能的源文件位于各自不同的文件夹。automake本身就是这一类。</p></li><li><p>deep(深)，指的是全部源码都被储存在子文件夹中；顶层文件夹主要包括配置信息</p></li></ul><p>不管对于上述那种方式，只需要最简单的方式，这里我们只需要修改下Makeflile.am文件就可以了</p><p>以前的Makefile.am 文件</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>bin_PROGRAMS <span class="token operator">=</span> hello
hello_SOURCES <span class="token operator">=</span> main.c  printc.h printc.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改成如下就可以了</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>AUTOMAKE_OPTIONS <span class="token operator">=</span> subdir-objects
bin_PROGRAMS <span class="token operator">=</span> hello
hello_SOURCES <span class="token operator">=</span> src/main.c  src/printc.h src/printc.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他操作命令不变。</p><p><strong>多个Makefile.am文件共同作用</strong></p><h4 id="格式模板" tabindex="-1"><a class="header-anchor" href="#格式模板" aria-hidden="true">#</a> 格式模板</h4><table><thead><tr><th>文件类型</th><th>书写格式</th></tr></thead><tbody><tr><td>可执行文件</td><td>bin_PROGRAMS = hello</td></tr><tr><td></td><td>hello_SOURCES = xxx.c</td></tr><tr><td></td><td>hello_LDADD =</td></tr><tr><td></td><td>hello_LDFLAG =</td></tr><tr><td></td><td>hello_DEPENDENCIES =</td></tr><tr><td>静态库</td><td>lib_LIBARIES = libhello.a</td></tr><tr><td></td><td>hello_a_SOURCES =</td></tr><tr><td></td><td>hello_a_LDADD =</td></tr><tr><td></td><td>hello_a_LDFLAGS =</td></tr><tr><td></td><td>hello_LIBADD =</td></tr><tr><td>头文件</td><td>include_HEADERS = hello.h</td></tr><tr><td>数据文件</td><td>data_DATA = data1 data2</td></tr></tbody></table><blockquote><p>对于可执行文件和静态库类型，如果只想编译，不想安装到系统中，可以用noinst_PROGRAMS代替bin_PROGRAMS，noinst_LIBRARIES代替lib_LIBRARIES。</p></blockquote><p>Makefile.am还提供了一些全局变量供所有的目标体使用：</p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>INCLUDES</td><td>链接时所需要的头文件</td></tr><tr><td>LDADD</td><td>链接时所需要的库文件</td></tr><tr><td>LDFLAG</td><td>链接时的选贤</td></tr><tr><td>EXTRA_DIST</td><td>源程序和一些默认的文件自动打入 tar.gz 包，其他文件若要进入 tar.gz 包可以使用这种方法，比如配置文件、数据文件等。</td></tr><tr><td>SUBDIRS</td><td>在处理本目录之前，要递归处理哪些子目录</td></tr></tbody></table><p>在Makefile.am中尽量使用相对路径，系统预定义了两个基本路径：</p><table><thead><tr><th>路径变量</th><th>含义</th></tr></thead><tbody><tr><td>\${top_srcdir}</td><td>工程最顶层目录，用于引用源程序</td></tr><tr><td>\${top_builddir}</td><td>定义了生成目标文件上最上层目录，用于引用.o 等编译出来的目标文件</td></tr></tbody></table>`,253);function v(m,b){const s=t("ExternalLinkIcon");return i(),c("div",null,[r,n("p",null,[n("a",u,[l("GNU GCC 官方文档"),o(s)])]),k])}const f=e(p,[["render",v],["__file","GNU.html.vue"]]);export{f as default};
